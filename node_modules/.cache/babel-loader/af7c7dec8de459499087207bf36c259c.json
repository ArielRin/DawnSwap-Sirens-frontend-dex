{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TranslationMemory = void 0;\nconst core_1 = require(\"../core\");\n/**\n * Translation Memory (TM) is a vault of translations that were previously made in other projects.\n * Those translations can be reused to speed up the translation process.\n * Every translation made in the project is automatically added to the project Translation Memory.\n *\n * Use API to create, upload, download, or remove specific TM.\n * Translation Memory export and import are asynchronous operations and shall be completed with sequence of API methods.\n */\nclass TranslationMemory extends core_1.CrowdinApi {\n  listTm(options, deprecatedLimit, deprecatedOffset) {\n    if ((0, core_1.isOptionalNumber)(options, '0' in arguments)) {\n      options = {\n        groupId: options,\n        limit: deprecatedLimit,\n        offset: deprecatedOffset\n      };\n    }\n    let url = `${this.url}/tms`;\n    url = this.addQueryParam(url, 'groupId', options.groupId);\n    return this.getList(url, options.limit, options.offset);\n  }\n  /**\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.post\n   */\n  addTm(request) {\n    const url = `${this.url}/tms`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.get\n   */\n  getTm(tmId) {\n    const url = `${this.url}/tms/${tmId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.delete\n   */\n  deleteTm(tmId) {\n    const url = `${this.url}/tms/${tmId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.patch\n   */\n  editTm(tmId, request) {\n    const url = `${this.url}/tms/${tmId}`;\n    return this.patch(url, request, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param options optional paramerers for the request\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.getMany\n   */\n  listTmSegments(tmId, options) {\n    const url = `${this.url}/tms/${tmId}/segments`;\n    return this.getList(url, options === null || options === void 0 ? void 0 : options.limit, options === null || options === void 0 ? void 0 : options.offset);\n  }\n  /**\n   * @param tmId tm identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.post\n   */\n  addTmSegment(tmId, request) {\n    const url = `${this.url}/tms/${tmId}/segments`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.clear\n   */\n  clearTm(tmId) {\n    const url = `${this.url}/tms/${tmId}/segments`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.exports.post\n   */\n  exportTm(tmId) {\n    let request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const url = `${this.url}/tms/${tmId}/exports`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param exportId export identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.exports.get\n   */\n  checkExportStatus(tmId, exportId) {\n    const url = `${this.url}/tms/${tmId}/exports/${exportId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param exportId export identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.exports.download.download\n   */\n  downloadTm(tmId, exportId) {\n    const url = `${this.url}/tms/${tmId}/exports/${exportId}/download`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.tms.concordance.post\n   */\n  concordanceSearch(projectId, request) {\n    const url = `${this.url}/projects/${projectId}/tms/concordance`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.imports.post\n   */\n  importTm(tmId, request) {\n    const url = `${this.url}/tms/${tmId}/imports`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param importId import identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.imports.get\n   */\n  checkImportStatus(tmId, importId) {\n    const url = `${this.url}/tms/${tmId}/imports/${importId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param segmentId segment identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.get\n   */\n  getTmSegment(tmId, segmentId) {\n    const url = `${this.url}/tms/${tmId}/segments/${segmentId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param segmentId segment identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.delete\n   */\n  deleteTmSegment(tmId, segmentId) {\n    const url = `${this.url}/tms/${tmId}/segments/${segmentId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param segmentId segment identifier\n   * @param recordId record identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.records.delete\n   */\n  deleteTmSegmentRecord(tmId, segmentId, recordId) {\n    const url = `${this.url}/tms/${tmId}/segments/${segmentId}/records/${recordId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param segmentId segment identifier\n   * @param recordId record identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.records.patch\n   */\n  editTmSegmentRecord(tmId, segmentId, recordId, request) {\n    const url = `${this.url}/tms/${tmId}/segments/${segmentId}/records/${recordId}`;\n    return this.patch(url, request, this.defaultConfig());\n  }\n  /**\n   * @param tmId tm identifier\n   * @param segmentId segment identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.records.post\n   */\n  addTmSegmentRecords(tmId, segmentId, request) {\n    const url = `${this.url}/tms/${tmId}/segments/${segmentId}/records`;\n    return this.post(url, request, this.defaultConfig());\n  }\n}\nexports.TranslationMemory = TranslationMemory;","map":{"version":3,"names":["Object","defineProperty","exports","value","TranslationMemory","core_1","require","CrowdinApi","listTm","options","deprecatedLimit","deprecatedOffset","isOptionalNumber","arguments","groupId","limit","offset","url","addQueryParam","getList","addTm","request","post","defaultConfig","getTm","tmId","get","deleteTm","delete","editTm","patch","listTmSegments","addTmSegment","clearTm","exportTm","length","undefined","checkExportStatus","exportId","downloadTm","concordanceSearch","projectId","importTm","checkImportStatus","importId","getTmSegment","segmentId","deleteTmSegment","deleteTmSegmentRecord","recordId","editTmSegmentRecord","addTmSegmentRecords"],"sources":["C:/projects/panther-frontend-dex1/node_modules/@crowdin/crowdin-api-client/out/translationMemory/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TranslationMemory = void 0;\nconst core_1 = require(\"../core\");\n/**\n * Translation Memory (TM) is a vault of translations that were previously made in other projects.\n * Those translations can be reused to speed up the translation process.\n * Every translation made in the project is automatically added to the project Translation Memory.\n *\n * Use API to create, upload, download, or remove specific TM.\n * Translation Memory export and import are asynchronous operations and shall be completed with sequence of API methods.\n */\nclass TranslationMemory extends core_1.CrowdinApi {\n    listTm(options, deprecatedLimit, deprecatedOffset) {\n        if ((0, core_1.isOptionalNumber)(options, '0' in arguments)) {\n            options = { groupId: options, limit: deprecatedLimit, offset: deprecatedOffset };\n        }\n        let url = `${this.url}/tms`;\n        url = this.addQueryParam(url, 'groupId', options.groupId);\n        return this.getList(url, options.limit, options.offset);\n    }\n    /**\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.post\n     */\n    addTm(request) {\n        const url = `${this.url}/tms`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.get\n     */\n    getTm(tmId) {\n        const url = `${this.url}/tms/${tmId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.delete\n     */\n    deleteTm(tmId) {\n        const url = `${this.url}/tms/${tmId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.patch\n     */\n    editTm(tmId, request) {\n        const url = `${this.url}/tms/${tmId}`;\n        return this.patch(url, request, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param options optional paramerers for the request\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.getMany\n     */\n    listTmSegments(tmId, options) {\n        const url = `${this.url}/tms/${tmId}/segments`;\n        return this.getList(url, options === null || options === void 0 ? void 0 : options.limit, options === null || options === void 0 ? void 0 : options.offset);\n    }\n    /**\n     * @param tmId tm identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.post\n     */\n    addTmSegment(tmId, request) {\n        const url = `${this.url}/tms/${tmId}/segments`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.clear\n     */\n    clearTm(tmId) {\n        const url = `${this.url}/tms/${tmId}/segments`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.exports.post\n     */\n    exportTm(tmId, request = {}) {\n        const url = `${this.url}/tms/${tmId}/exports`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param exportId export identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.exports.get\n     */\n    checkExportStatus(tmId, exportId) {\n        const url = `${this.url}/tms/${tmId}/exports/${exportId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param exportId export identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.exports.download.download\n     */\n    downloadTm(tmId, exportId) {\n        const url = `${this.url}/tms/${tmId}/exports/${exportId}/download`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.tms.concordance.post\n     */\n    concordanceSearch(projectId, request) {\n        const url = `${this.url}/projects/${projectId}/tms/concordance`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.imports.post\n     */\n    importTm(tmId, request) {\n        const url = `${this.url}/tms/${tmId}/imports`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param importId import identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.imports.get\n     */\n    checkImportStatus(tmId, importId) {\n        const url = `${this.url}/tms/${tmId}/imports/${importId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param segmentId segment identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.get\n     */\n    getTmSegment(tmId, segmentId) {\n        const url = `${this.url}/tms/${tmId}/segments/${segmentId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param segmentId segment identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.delete\n     */\n    deleteTmSegment(tmId, segmentId) {\n        const url = `${this.url}/tms/${tmId}/segments/${segmentId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param segmentId segment identifier\n     * @param recordId record identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.records.delete\n     */\n    deleteTmSegmentRecord(tmId, segmentId, recordId) {\n        const url = `${this.url}/tms/${tmId}/segments/${segmentId}/records/${recordId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param segmentId segment identifier\n     * @param recordId record identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.records.patch\n     */\n    editTmSegmentRecord(tmId, segmentId, recordId, request) {\n        const url = `${this.url}/tms/${tmId}/segments/${segmentId}/records/${recordId}`;\n        return this.patch(url, request, this.defaultConfig());\n    }\n    /**\n     * @param tmId tm identifier\n     * @param segmentId segment identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.tms.segments.records.post\n     */\n    addTmSegmentRecords(tmId, segmentId, request) {\n        const url = `${this.url}/tms/${tmId}/segments/${segmentId}/records`;\n        return this.post(url, request, this.defaultConfig());\n    }\n}\nexports.TranslationMemory = TranslationMemory;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,iBAAiB,SAASC,MAAM,CAACE,UAAU,CAAC;EAC9CC,MAAMA,CAACC,OAAO,EAAEC,eAAe,EAAEC,gBAAgB,EAAE;IAC/C,IAAI,CAAC,CAAC,EAAEN,MAAM,CAACO,gBAAgB,EAAEH,OAAO,EAAE,GAAG,IAAII,SAAS,CAAC,EAAE;MACzDJ,OAAO,GAAG;QAAEK,OAAO,EAAEL,OAAO;QAAEM,KAAK,EAAEL,eAAe;QAAEM,MAAM,EAAEL;MAAiB,CAAC;IACpF;IACA,IAAIM,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,MAAK;IAC3BA,GAAG,GAAG,IAAI,CAACC,aAAa,CAACD,GAAG,EAAE,SAAS,EAAER,OAAO,CAACK,OAAO,CAAC;IACzD,OAAO,IAAI,CAACK,OAAO,CAACF,GAAG,EAAER,OAAO,CAACM,KAAK,EAAEN,OAAO,CAACO,MAAM,CAAC;EAC3D;EACA;AACJ;AACA;AACA;EACII,KAAKA,CAACC,OAAO,EAAE;IACX,MAAMJ,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,MAAK;IAC7B,OAAO,IAAI,CAACK,IAAI,CAACL,GAAG,EAAEI,OAAO,EAAE,IAAI,CAACE,aAAa,CAAC,CAAC,CAAC;EACxD;EACA;AACJ;AACA;AACA;EACIC,KAAKA,CAACC,IAAI,EAAE;IACR,MAAMR,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,EAAC;IACrC,OAAO,IAAI,CAACC,GAAG,CAACT,GAAG,EAAE,IAAI,CAACM,aAAa,CAAC,CAAC,CAAC;EAC9C;EACA;AACJ;AACA;AACA;EACII,QAAQA,CAACF,IAAI,EAAE;IACX,MAAMR,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,EAAC;IACrC,OAAO,IAAI,CAACG,MAAM,CAACX,GAAG,EAAE,IAAI,CAACM,aAAa,CAAC,CAAC,CAAC;EACjD;EACA;AACJ;AACA;AACA;AACA;EACIM,MAAMA,CAACJ,IAAI,EAAEJ,OAAO,EAAE;IAClB,MAAMJ,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,EAAC;IACrC,OAAO,IAAI,CAACK,KAAK,CAACb,GAAG,EAAEI,OAAO,EAAE,IAAI,CAACE,aAAa,CAAC,CAAC,CAAC;EACzD;EACA;AACJ;AACA;AACA;AACA;EACIQ,cAAcA,CAACN,IAAI,EAAEhB,OAAO,EAAE;IAC1B,MAAMQ,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,WAAU;IAC9C,OAAO,IAAI,CAACN,OAAO,CAACF,GAAG,EAAER,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACM,KAAK,EAAEN,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACO,MAAM,CAAC;EAC/J;EACA;AACJ;AACA;AACA;AACA;EACIgB,YAAYA,CAACP,IAAI,EAAEJ,OAAO,EAAE;IACxB,MAAMJ,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,WAAU;IAC9C,OAAO,IAAI,CAACH,IAAI,CAACL,GAAG,EAAEI,OAAO,EAAE,IAAI,CAACE,aAAa,CAAC,CAAC,CAAC;EACxD;EACA;AACJ;AACA;AACA;EACIU,OAAOA,CAACR,IAAI,EAAE;IACV,MAAMR,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,WAAU;IAC9C,OAAO,IAAI,CAACG,MAAM,CAACX,GAAG,EAAE,IAAI,CAACM,aAAa,CAAC,CAAC,CAAC;EACjD;EACA;AACJ;AACA;AACA;AACA;EACIW,QAAQA,CAACT,IAAI,EAAgB;IAAA,IAAdJ,OAAO,GAAAR,SAAA,CAAAsB,MAAA,QAAAtB,SAAA,QAAAuB,SAAA,GAAAvB,SAAA,MAAG,CAAC,CAAC;IACvB,MAAMI,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,UAAS;IAC7C,OAAO,IAAI,CAACH,IAAI,CAACL,GAAG,EAAEI,OAAO,EAAE,IAAI,CAACE,aAAa,CAAC,CAAC,CAAC;EACxD;EACA;AACJ;AACA;AACA;AACA;EACIc,iBAAiBA,CAACZ,IAAI,EAAEa,QAAQ,EAAE;IAC9B,MAAMrB,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,YAAWa,QAAS,EAAC;IACzD,OAAO,IAAI,CAACZ,GAAG,CAACT,GAAG,EAAE,IAAI,CAACM,aAAa,CAAC,CAAC,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACIgB,UAAUA,CAACd,IAAI,EAAEa,QAAQ,EAAE;IACvB,MAAMrB,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,YAAWa,QAAS,WAAU;IAClE,OAAO,IAAI,CAACZ,GAAG,CAACT,GAAG,EAAE,IAAI,CAACM,aAAa,CAAC,CAAC,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACIiB,iBAAiBA,CAACC,SAAS,EAAEpB,OAAO,EAAE;IAClC,MAAMJ,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,aAAYwB,SAAU,kBAAiB;IAC/D,OAAO,IAAI,CAACnB,IAAI,CAACL,GAAG,EAAEI,OAAO,EAAE,IAAI,CAACE,aAAa,CAAC,CAAC,CAAC;EACxD;EACA;AACJ;AACA;AACA;AACA;EACImB,QAAQA,CAACjB,IAAI,EAAEJ,OAAO,EAAE;IACpB,MAAMJ,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,UAAS;IAC7C,OAAO,IAAI,CAACH,IAAI,CAACL,GAAG,EAAEI,OAAO,EAAE,IAAI,CAACE,aAAa,CAAC,CAAC,CAAC;EACxD;EACA;AACJ;AACA;AACA;AACA;EACIoB,iBAAiBA,CAAClB,IAAI,EAAEmB,QAAQ,EAAE;IAC9B,MAAM3B,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,YAAWmB,QAAS,EAAC;IACzD,OAAO,IAAI,CAAClB,GAAG,CAACT,GAAG,EAAE,IAAI,CAACM,aAAa,CAAC,CAAC,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACIsB,YAAYA,CAACpB,IAAI,EAAEqB,SAAS,EAAE;IAC1B,MAAM7B,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,aAAYqB,SAAU,EAAC;IAC3D,OAAO,IAAI,CAACpB,GAAG,CAACT,GAAG,EAAE,IAAI,CAACM,aAAa,CAAC,CAAC,CAAC;EAC9C;EACA;AACJ;AACA;AACA;AACA;EACIwB,eAAeA,CAACtB,IAAI,EAAEqB,SAAS,EAAE;IAC7B,MAAM7B,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,aAAYqB,SAAU,EAAC;IAC3D,OAAO,IAAI,CAAClB,MAAM,CAACX,GAAG,EAAE,IAAI,CAACM,aAAa,CAAC,CAAC,CAAC;EACjD;EACA;AACJ;AACA;AACA;AACA;AACA;EACIyB,qBAAqBA,CAACvB,IAAI,EAAEqB,SAAS,EAAEG,QAAQ,EAAE;IAC7C,MAAMhC,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,aAAYqB,SAAU,YAAWG,QAAS,EAAC;IAC/E,OAAO,IAAI,CAACrB,MAAM,CAACX,GAAG,EAAE,IAAI,CAACM,aAAa,CAAC,CAAC,CAAC;EACjD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI2B,mBAAmBA,CAACzB,IAAI,EAAEqB,SAAS,EAAEG,QAAQ,EAAE5B,OAAO,EAAE;IACpD,MAAMJ,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,aAAYqB,SAAU,YAAWG,QAAS,EAAC;IAC/E,OAAO,IAAI,CAACnB,KAAK,CAACb,GAAG,EAAEI,OAAO,EAAE,IAAI,CAACE,aAAa,CAAC,CAAC,CAAC;EACzD;EACA;AACJ;AACA;AACA;AACA;AACA;EACI4B,mBAAmBA,CAAC1B,IAAI,EAAEqB,SAAS,EAAEzB,OAAO,EAAE;IAC1C,MAAMJ,GAAG,GAAI,GAAE,IAAI,CAACA,GAAI,QAAOQ,IAAK,aAAYqB,SAAU,UAAS;IACnE,OAAO,IAAI,CAACxB,IAAI,CAACL,GAAG,EAAEI,OAAO,EAAE,IAAI,CAACE,aAAa,CAAC,CAAC,CAAC;EACxD;AACJ;AACArB,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script"}