{"ast":null,"code":"import _toConsumableArray from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _WETH_ONLY;import{ChainId,JSBI,Percent,Token,WETH}from'@pantherswap-libs/sdk';export var ROUTER_ADDRESS='0xC6A32f7c1796E699f97D89A75DDD2C0e8Ca8358A';// a list of tokens by chain\nexport var BUSD=new Token(ChainId.MAINNET,'0xe9e7cea3dedca5984780bafc599bd69add087d56',18,'BUSD','Binance USD');export var USDT=new Token(ChainId.MAINNET,'0x73E84bFD35C3f1537A72180D1481E1eABf64B70b',18,'USDT-R','RedLight USDT-R');var WETH_ONLY=(_WETH_ONLY={},_defineProperty(_WETH_ONLY,ChainId.MAINNET,[WETH[ChainId.MAINNET]]),_defineProperty(_WETH_ONLY,ChainId.BSCTESTNET,[WETH[ChainId.BSCTESTNET]]),_WETH_ONLY);// used to construct intermediary pairs for trading\nexport var BASES_TO_CHECK_TRADES_AGAINST=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WETH_ONLY[ChainId.MAINNET]),[USDT])));/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n */export var CUSTOM_BASES=_defineProperty({},ChainId.MAINNET,{});// used for display in the default list when adding liquidity\nexport var SUGGESTED_BASES=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WETH_ONLY[ChainId.MAINNET]),[USDT])));// used to construct the list of all pairs we consider by default in the frontend\nexport var BASES_TO_TRACK_LIQUIDITY_FOR=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WETH_ONLY[ChainId.MAINNET]),[USDT])));export var PINNED_PAIRS=_defineProperty({},ChainId.MAINNET,[[new Token(ChainId.MAINNET,'0x93E7ae1eF759Ee2dBEf0F87424b08d7Af7E4BcA5',18,'SIRENS','Sirens Treasure Token'),new Token(ChainId.MAINNET,'0x00F22F97e249B980A1df5A091FcCbd6599600779',18,'WREDLC','Wrapped REDLC')],[BUSD,USDT]]);export var NetworkContextName='NETWORK';// default allowed slippage, in bips\nexport var INITIAL_ALLOWED_SLIPPAGE=650;// 20 minutes, denominated in seconds\nexport var DEFAULT_DEADLINE_FROM_NOW=60*20;// one basis point\nexport var ONE_BIPS=new Percent(JSBI.BigInt(1),JSBI.BigInt(10000));export var BIPS_BASE=JSBI.BigInt(10000);// used for warning states\nexport var ALLOWED_PRICE_IMPACT_LOW=new Percent(JSBI.BigInt(100),BIPS_BASE);// 1%\nexport var ALLOWED_PRICE_IMPACT_MEDIUM=new Percent(JSBI.BigInt(300),BIPS_BASE);// 3%\nexport var ALLOWED_PRICE_IMPACT_HIGH=new Percent(JSBI.BigInt(500),BIPS_BASE);// 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport var PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN=new Percent(JSBI.BigInt(1000),BIPS_BASE);// 10%\n// for non expert mode disable swaps above this\nexport var BLOCKED_PRICE_IMPACT_NON_EXPERT=new Percent(JSBI.BigInt(1500),BIPS_BASE);// 15%\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport var MIN_ETH=JSBI.exponentiate(JSBI.BigInt(10),JSBI.BigInt(16));// .01 ETH","map":{"version":3,"sources":["C:/projects/panther-frontend-dex1/src/constants/index.ts"],"names":["ChainId","JSBI","Percent","Token","WETH","ROUTER_ADDRESS","BUSD","MAINNET","USDT","WETH_ONLY","BSCTESTNET","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate"],"mappings":"geAAA,OAASA,OAAT,CAAkBC,IAAlB,CAAwBC,OAAxB,CAAiCC,KAAjC,CAAwCC,IAAxC,KAAoD,uBAApD,CAEA,MAAO,IAAMC,CAAAA,cAAc,CAAG,4CAAvB,CAEP;AAKA,MAAO,IAAMC,CAAAA,IAAI,CAAG,GAAIH,CAAAA,KAAJ,CAAUH,OAAO,CAACO,OAAlB,CAA2B,4CAA3B,CAAyE,EAAzE,CAA6E,MAA7E,CAAqF,aAArF,CAAb,CACP,MAAO,IAAMC,CAAAA,IAAI,CAAG,GAAIL,CAAAA,KAAJ,CAAUH,OAAO,CAACO,OAAlB,CAA2B,4CAA3B,CAAyE,EAAzE,CAA6E,QAA7E,CAAuF,iBAAvF,CAAb,CAEP,GAAME,CAAAA,SAAyB,2CAC5BT,OAAO,CAACO,OADoB,CACV,CAACH,IAAI,CAACJ,OAAO,CAACO,OAAT,CAAL,CADU,6BAE5BP,OAAO,CAACU,UAFoB,CAEP,CAACN,IAAI,CAACJ,OAAO,CAACU,UAAT,CAAL,CAFO,aAA/B,CAKA;AACA,MAAO,IAAMC,CAAAA,6BAA6C,gCACrDF,SADqD,wBAEvDT,OAAO,CAACO,OAF+C,8BAEjCE,SAAS,CAACT,OAAO,CAACO,OAAT,CAFwB,GAELC,IAFK,IAAnD,CAKP;AACA;AACA;AACA,GACA,MAAO,IAAMI,CAAAA,YAA4E,oBACtFZ,OAAO,CAACO,OAD8E,CACpE,EADoE,CAAlF,CAIP;AACA,MAAO,IAAMM,CAAAA,eAA+B,gCACvCJ,SADuC,wBAEzCT,OAAO,CAACO,OAFiC,8BAEnBE,SAAS,CAACT,OAAO,CAACO,OAAT,CAFU,GAESC,IAFT,IAArC,CAKP;AACA,MAAO,IAAMM,CAAAA,4BAA4C,gCACpDL,SADoD,wBAEtDT,OAAO,CAACO,OAF8C,8BAEhCE,SAAS,CAACT,OAAO,CAACO,OAAT,CAFuB,GAEJC,IAFI,IAAlD,CAKP,MAAO,IAAMO,CAAAA,YAAkE,oBAC5Ef,OAAO,CAACO,OADoE,CAC1D,CACjB,CACE,GAAIJ,CAAAA,KAAJ,CAAUH,OAAO,CAACO,OAAlB,CAA2B,4CAA3B,CAAyE,EAAzE,CAA6E,QAA7E,CAAuF,uBAAvF,CADF,CAEE,GAAIJ,CAAAA,KAAJ,CAAUH,OAAO,CAACO,OAAlB,CAA2B,4CAA3B,CAAyE,EAAzE,CAA6E,QAA7E,CAAuF,eAAvF,CAFF,CADiB,CAKjB,CAACD,IAAD,CAAOE,IAAP,CALiB,CAD0D,CAAxE,CAUP,MAAO,IAAMQ,CAAAA,kBAAkB,CAAG,SAA3B,CAEP;AACA,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,GAAjC,CACP;AACA,MAAO,IAAMC,CAAAA,yBAAyB,CAAG,GAAK,EAAvC,CAEP;AACA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,GAAIjB,CAAAA,OAAJ,CAAYD,IAAI,CAACmB,MAAL,CAAY,CAAZ,CAAZ,CAA4BnB,IAAI,CAACmB,MAAL,CAAY,KAAZ,CAA5B,CAAjB,CACP,MAAO,IAAMC,CAAAA,SAAS,CAAGpB,IAAI,CAACmB,MAAL,CAAY,KAAZ,CAAlB,CACP;AACA,MAAO,IAAME,CAAAA,wBAAiC,CAAG,GAAIpB,CAAAA,OAAJ,CAAYD,IAAI,CAACmB,MAAL,CAAY,GAAZ,CAAZ,CAA8BC,SAA9B,CAA1C,CAAmF;AAC1F,MAAO,IAAME,CAAAA,2BAAoC,CAAG,GAAIrB,CAAAA,OAAJ,CAAYD,IAAI,CAACmB,MAAL,CAAY,GAAZ,CAAZ,CAA8BC,SAA9B,CAA7C,CAAsF;AAC7F,MAAO,IAAMG,CAAAA,yBAAkC,CAAG,GAAItB,CAAAA,OAAJ,CAAYD,IAAI,CAACmB,MAAL,CAAY,GAAZ,CAAZ,CAA8BC,SAA9B,CAA3C,CAAoF;AAC3F;AACA,MAAO,IAAMI,CAAAA,oCAA6C,CAAG,GAAIvB,CAAAA,OAAJ,CAAYD,IAAI,CAACmB,MAAL,CAAY,IAAZ,CAAZ,CAA+BC,SAA/B,CAAtD,CAAgG;AACvG;AACA,MAAO,IAAMK,CAAAA,+BAAwC,CAAG,GAAIxB,CAAAA,OAAJ,CAAYD,IAAI,CAACmB,MAAL,CAAY,IAAZ,CAAZ,CAA+BC,SAA/B,CAAjD,CAA2F;AAElG;AACA,MAAO,IAAMM,CAAAA,OAAa,CAAG1B,IAAI,CAAC2B,YAAL,CAAkB3B,IAAI,CAACmB,MAAL,CAAY,EAAZ,CAAlB,CAAmCnB,IAAI,CAACmB,MAAL,CAAY,EAAZ,CAAnC,CAAtB,CAA0E","sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pantherswap-libs/sdk'\r\n\r\nexport const ROUTER_ADDRESS = '0xC6A32f7c1796E699f97D89A75DDD2C0e8Ca8358A'\r\n\r\n// a list of tokens by chain\r\ntype ChainTokenList = {\r\n  readonly [chainId in ChainId]: Token[]\r\n}\r\n\r\nexport const BUSD = new Token(ChainId.MAINNET, '0xe9e7cea3dedca5984780bafc599bd69add087d56', 18, 'BUSD', 'Binance USD')\r\nexport const USDT = new Token(ChainId.MAINNET, '0x73E84bFD35C3f1537A72180D1481E1eABf64B70b', 18, 'USDT-R', 'RedLight USDT-R')\r\n\r\nconst WETH_ONLY: ChainTokenList = {\r\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\r\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]],\r\n}\r\n\r\n// used to construct intermediary pairs for trading\r\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], USDT],\r\n}\r\n\r\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n */\r\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [ChainId.MAINNET]: {},\r\n}\r\n\r\n// used for display in the default list when adding liquidity\r\nexport const SUGGESTED_BASES: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], USDT],\r\n}\r\n\r\n// used to construct the list of all pairs we consider by default in the frontend\r\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], USDT],\r\n}\r\n\r\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\r\n  [ChainId.MAINNET]: [\r\n    [\r\n      new Token(ChainId.MAINNET, '0x93E7ae1eF759Ee2dBEf0F87424b08d7Af7E4BcA5', 18, 'SIRENS', 'Sirens Treasure Token'),\r\n      new Token(ChainId.MAINNET, '0x00F22F97e249B980A1df5A091FcCbd6599600779', 18, 'WREDLC', 'Wrapped REDLC'),\r\n    ],\r\n    [BUSD, USDT],\r\n  ],\r\n}\r\n\r\nexport const NetworkContextName = 'NETWORK'\r\n\r\n// default allowed slippage, in bips\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 650\r\n// 20 minutes, denominated in seconds\r\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\r\n\r\n// one basis point\r\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\r\nexport const BIPS_BASE = JSBI.BigInt(10000)\r\n// used for warning states\r\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\r\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\r\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\r\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\r\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\r\n// for non expert mode disable swaps above this\r\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\r\n\r\n// used to ensure the user doesn't send so much ETH so they end up with <.01\r\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\r\n"]},"metadata":{},"sourceType":"module"}