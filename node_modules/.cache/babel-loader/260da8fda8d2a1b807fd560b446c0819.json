{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport warning from 'tiny-warning';\n\nfunction parseSendReturn(sendReturn) {\n  // eslint-disable-next-line no-prototype-builtins\n  return sendReturn.hasOwnProperty('result') ? sendReturn.result : sendReturn;\n}\n\nexport class NoBscProviderError extends Error {\n  constructor() {\n    super();\n    this.name = this.constructor.name;\n    this.message = 'No BSC provider was found on window.BinanceChain.';\n  }\n\n}\nexport class UserRejectedRequestError extends Error {\n  constructor() {\n    super();\n    this.name = this.constructor.name;\n    this.message = 'The user rejected the request.';\n  }\n\n}\nexport class BscConnector extends AbstractConnector {\n  constructor(kwargs) {\n    super(kwargs);\n    this.handleNetworkChanged = this.handleNetworkChanged.bind(this);\n    this.handleChainChanged = this.handleChainChanged.bind(this);\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleChainChanged(chainId) {\n    this.emitUpdate({\n      chainId,\n      provider: window.BinanceChain\n    });\n  }\n\n  handleAccountsChanged(accounts) {\n    if (accounts.length === 0) {\n      this.emitDeactivate();\n    } else {\n      this.emitUpdate({\n        account: accounts[0]\n      });\n    }\n  }\n\n  handleClose() {\n    this.emitDeactivate();\n  }\n\n  handleNetworkChanged(networkId) {\n    this.emitUpdate({\n      chainId: networkId,\n      provider: window.BinanceChain\n    });\n  }\n\n  async activate() {\n    if (!window.BinanceChain) {\n      throw new NoBscProviderError();\n    }\n\n    if (window.BinanceChain.on) {\n      window.BinanceChain.on('chainChanged', this.handleChainChanged);\n      window.BinanceChain.on('accountsChanged', this.handleAccountsChanged);\n      window.BinanceChain.on('close', this.handleClose);\n      window.BinanceChain.on('networkChanged', this.handleNetworkChanged);\n    }\n\n    if (window.BinanceChain.isMetaMask) {\n      window.BinanceChain.autoRefreshOnNetworkChange = false;\n    } // try to activate + get account via eth_requestAccounts\n\n\n    let account;\n\n    try {\n      account = await window.BinanceChain.send('eth_requestAccounts').then(sendReturn => parseSendReturn(sendReturn)[0]);\n    } catch (error) {\n      if (error.code === 4001) {\n        throw new UserRejectedRequestError();\n      }\n\n      warning(false, 'eth_requestAccounts was unsuccessful, falling back to enable');\n    } // if unsuccessful, try enable\n\n\n    if (!account) {\n      // if enable is successful but doesn't return accounts, fall back to getAccount (not happy i have to do this...)\n      account = await window.BinanceChain.enable().then(sendReturn => sendReturn && parseSendReturn(sendReturn)[0]);\n    }\n\n    return {\n      provider: window.BinanceChain,\n      ...(account ? {\n        account\n      } : {})\n    };\n  }\n\n  async getProvider() {\n    return window.BinanceChain;\n  }\n\n  async getChainId() {\n    if (!window.BinanceChain) {\n      throw new NoBscProviderError();\n    }\n\n    let chainId;\n\n    try {\n      chainId = await window.BinanceChain.send('eth_chainId').then(parseSendReturn);\n    } catch {\n      warning(false, 'eth_chainId was unsuccessful, falling back to net_version');\n    }\n\n    if (!chainId) {\n      try {\n        chainId = await window.BinanceChain.send('net_version').then(parseSendReturn);\n      } catch {\n        warning(false, 'net_version was unsuccessful, falling back to net version v2');\n      }\n    }\n\n    if (!chainId) {\n      try {\n        chainId = parseSendReturn(window.BinanceChain.send({\n          method: 'net_version'\n        }));\n      } catch {\n        warning(false, 'net_version v2 was unsuccessful, falling back to manual matches and static properties');\n      }\n    }\n\n    if (!chainId) {\n      if (window.BinanceChain.isDapper) {\n        chainId = parseSendReturn(window.BinanceChain.cachedResults.net_version);\n      } else {\n        chainId = window.BinanceChain.chainId || window.BinanceChain.netVersion || window.BinanceChain.networkVersion || window.BinanceChain._chainId;\n      }\n    }\n\n    return chainId;\n  }\n\n  async getAccount() {\n    if (!window.BinanceChain) {\n      throw new NoBscProviderError();\n    }\n\n    let account;\n\n    try {\n      account = await window.BinanceChain.send('eth_accounts').then(sendReturn => parseSendReturn(sendReturn)[0]);\n    } catch {\n      warning(false, 'eth_accounts was unsuccessful, falling back to enable');\n    }\n\n    if (!account) {\n      try {\n        account = await window.BinanceChain.enable().then(sendReturn => parseSendReturn(sendReturn)[0]);\n      } catch {\n        warning(false, 'enable was unsuccessful, falling back to eth_accounts v2');\n      }\n    }\n\n    if (!account) {\n      account = parseSendReturn(window.BinanceChain.send({\n        method: 'eth_accounts'\n      }))[0];\n    }\n\n    return account;\n  }\n\n  deactivate() {\n    if (window.BinanceChain && window.BinanceChain.removeListener) {\n      window.BinanceChain.removeListener('chainChanged', this.handleChainChanged);\n      window.BinanceChain.removeListener('accountsChanged', this.handleAccountsChanged);\n      window.BinanceChain.removeListener('close', this.handleClose);\n      window.BinanceChain.removeListener('networkChanged', this.handleNetworkChanged);\n    }\n  }\n\n  async isAuthorized() {\n    if (!window.BinanceChain) {\n      return false;\n    }\n\n    try {\n      return await window.BinanceChain.send('eth_accounts').then(sendReturn => {\n        if (parseSendReturn(sendReturn).length > 0) {\n          return true;\n        }\n\n        return false;\n      });\n    } catch {\n      return false;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/projects/panther-frontend-dex1/src/connectors/bsc/bscConnector.ts"],"names":["AbstractConnector","warning","parseSendReturn","sendReturn","hasOwnProperty","result","NoBscProviderError","Error","constructor","name","message","UserRejectedRequestError","BscConnector","kwargs","handleNetworkChanged","bind","handleChainChanged","handleAccountsChanged","handleClose","chainId","emitUpdate","provider","window","BinanceChain","accounts","length","emitDeactivate","account","networkId","activate","on","isMetaMask","autoRefreshOnNetworkChange","send","then","error","code","enable","getProvider","getChainId","method","isDapper","cachedResults","net_version","netVersion","networkVersion","_chainId","getAccount","deactivate","removeListener","isAuthorized"],"mappings":"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","sourcesContent":["import { AbstractConnectorArguments, ConnectorUpdate } from '@web3-react/types'\r\nimport { AbstractConnector } from '@web3-react/abstract-connector'\r\nimport warning from 'tiny-warning'\r\n\r\nimport { SendReturnResult, SendReturn, Send, SendOld } from './types'\r\n\r\nfunction parseSendReturn(sendReturn: SendReturnResult | SendReturn): any {\r\n  // eslint-disable-next-line no-prototype-builtins\r\n  return sendReturn.hasOwnProperty('result') ? sendReturn.result : sendReturn\r\n}\r\n\r\nexport class NoBscProviderError extends Error {\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    this.message = 'No BSC provider was found on window.BinanceChain.'\r\n  }\r\n}\r\n\r\nexport class UserRejectedRequestError extends Error {\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    this.message = 'The user rejected the request.'\r\n  }\r\n}\r\n\r\nexport class BscConnector extends AbstractConnector {\r\n  constructor(kwargs: AbstractConnectorArguments) {\r\n    super(kwargs)\r\n\r\n    this.handleNetworkChanged = this.handleNetworkChanged.bind(this)\r\n    this.handleChainChanged = this.handleChainChanged.bind(this)\r\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\r\n    this.handleClose = this.handleClose.bind(this)\r\n  }\r\n\r\n  private handleChainChanged(chainId: string | number): void {\r\n    this.emitUpdate({ chainId, provider: window.BinanceChain })\r\n  }\r\n\r\n  private handleAccountsChanged(accounts: string[]): void {\r\n    if (accounts.length === 0) {\r\n      this.emitDeactivate()\r\n    } else {\r\n      this.emitUpdate({ account: accounts[0] })\r\n    }\r\n  }\r\n\r\n  private handleClose(): void {\r\n    this.emitDeactivate()\r\n  }\r\n\r\n  private handleNetworkChanged(networkId: string | number): void {\r\n    this.emitUpdate({ chainId: networkId, provider: window.BinanceChain })\r\n  }\r\n\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    if (!window.BinanceChain) {\r\n      throw new NoBscProviderError()\r\n    }\r\n\r\n    if (window.BinanceChain.on) {\r\n      window.BinanceChain.on('chainChanged', this.handleChainChanged)\r\n      window.BinanceChain.on('accountsChanged', this.handleAccountsChanged)\r\n      window.BinanceChain.on('close', this.handleClose)\r\n      window.BinanceChain.on('networkChanged', this.handleNetworkChanged)\r\n    }\r\n\r\n    if ((window.BinanceChain as any).isMetaMask) {\r\n      (window.BinanceChain as any).autoRefreshOnNetworkChange = false\r\n    }\r\n\r\n    // try to activate + get account via eth_requestAccounts\r\n    let account\r\n    try {\r\n      account = await (window.BinanceChain.send as Send)('eth_requestAccounts').then(\r\n        (sendReturn) => parseSendReturn(sendReturn)[0]\r\n      )\r\n    } catch (error) {\r\n      if ((error as any).code === 4001) {\r\n        throw new UserRejectedRequestError()\r\n      }\r\n      warning(false, 'eth_requestAccounts was unsuccessful, falling back to enable')\r\n    }\r\n\r\n    // if unsuccessful, try enable\r\n    if (!account) {\r\n      // if enable is successful but doesn't return accounts, fall back to getAccount (not happy i have to do this...)\r\n      account = await window.BinanceChain.enable().then((sendReturn) => sendReturn && parseSendReturn(sendReturn)[0])\r\n    }\r\n\r\n    return { provider: window.BinanceChain, ...(account ? { account } : {}) }\r\n  }\r\n\r\n  public async getProvider(): Promise<any> {\r\n    return window.BinanceChain\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    if (!window.BinanceChain) {\r\n      throw new NoBscProviderError()\r\n    }\r\n\r\n    let chainId\r\n    try {\r\n      chainId = await (window.BinanceChain.send as Send)('eth_chainId').then(parseSendReturn)\r\n    } catch {\r\n      warning(false, 'eth_chainId was unsuccessful, falling back to net_version')\r\n    }\r\n\r\n    if (!chainId) {\r\n      try {\r\n        chainId = await (window.BinanceChain.send as Send)('net_version').then(parseSendReturn)\r\n      } catch {\r\n        warning(false, 'net_version was unsuccessful, falling back to net version v2')\r\n      }\r\n    }\r\n\r\n    if (!chainId) {\r\n      try {\r\n        chainId = parseSendReturn((window.BinanceChain.send as SendOld)({ method: 'net_version' }))\r\n      } catch {\r\n        warning(false, 'net_version v2 was unsuccessful, falling back to manual matches and static properties')\r\n      }\r\n    }\r\n\r\n    if (!chainId) {\r\n      if ((window.BinanceChain as any).isDapper) {\r\n        chainId = parseSendReturn((window.BinanceChain as any).cachedResults.net_version)\r\n      } else {\r\n        chainId =\r\n          (window.BinanceChain as any).chainId ||\r\n          (window.BinanceChain as any).netVersion ||\r\n          (window.BinanceChain as any).networkVersion ||\r\n          (window.BinanceChain as any)._chainId\r\n      }\r\n    }\r\n\r\n    return chainId\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    if (!window.BinanceChain) {\r\n      throw new NoBscProviderError()\r\n    }\r\n\r\n    let account\r\n    try {\r\n      account = await (window.BinanceChain.send as Send)('eth_accounts').then(\r\n        (sendReturn) => parseSendReturn(sendReturn)[0]\r\n      )\r\n    } catch {\r\n      warning(false, 'eth_accounts was unsuccessful, falling back to enable')\r\n    }\r\n\r\n    if (!account) {\r\n      try {\r\n        account = await window.BinanceChain.enable().then((sendReturn) => parseSendReturn(sendReturn)[0])\r\n      } catch {\r\n        warning(false, 'enable was unsuccessful, falling back to eth_accounts v2')\r\n      }\r\n    }\r\n\r\n    if (!account) {\r\n      account = parseSendReturn((window.BinanceChain.send as SendOld)({ method: 'eth_accounts' }))[0]\r\n    }\r\n\r\n    return account\r\n  }\r\n\r\n  public deactivate() {\r\n    if (window.BinanceChain && window.BinanceChain.removeListener) {\r\n      window.BinanceChain.removeListener('chainChanged', this.handleChainChanged)\r\n      window.BinanceChain.removeListener('accountsChanged', this.handleAccountsChanged)\r\n      window.BinanceChain.removeListener('close', this.handleClose)\r\n      window.BinanceChain.removeListener('networkChanged', this.handleNetworkChanged)\r\n    }\r\n  }\r\n\r\n  public async isAuthorized(): Promise<boolean> {\r\n    if (!window.BinanceChain) {\r\n      return false\r\n    }\r\n\r\n    try {\r\n      return await (window.BinanceChain.send as Send)('eth_accounts').then((sendReturn) => {\r\n        if (parseSendReturn(sendReturn).length > 0) {\r\n          return true\r\n        }\r\n        return false\r\n      })\r\n    } catch {\r\n      return false\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}