{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nvar chainIdToNetwork = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n};\nvar FortmaticConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(FortmaticConnector, _AbstractConnector);\n  function FortmaticConnector(_ref) {\n    var _this;\n    var apiKey = _ref.apiKey,\n      chainId = _ref.chainId;\n    !Object.keys(chainIdToNetwork).includes(chainId.toString()) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Unsupported chainId \" + chainId) : invariant(false) : void 0;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.apiKey = apiKey;\n    _this.chainId = chainId;\n    return _this;\n  }\n  var _proto = FortmaticConnector.prototype;\n  _proto.activate = function activate() {\n    try {\n      var _temp3 = function _temp3() {\n        return Promise.resolve(_this3.fortmatic.getProvider().enable().then(function (accounts) {\n          return accounts[0];\n        })).then(function (account) {\n          return {\n            provider: _this3.fortmatic.getProvider(),\n            chainId: _this3.chainId,\n            account: account\n          };\n        });\n      };\n      var _this3 = this;\n      var _temp4 = function () {\n        if (!_this3.fortmatic) {\n          return Promise.resolve(import('fortmatic').then(function (m) {\n            var _m$default;\n            return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n          })).then(function (Fortmatic) {\n            _this3.fortmatic = new Fortmatic(_this3.apiKey, _this3.chainId === 1 || _this3.chainId === 4 ? undefined : chainIdToNetwork[_this3.chainId]);\n          });\n        }\n      }();\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n      return Promise.resolve(_this5.fortmatic.getProvider());\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n      return Promise.resolve(_this9.fortmatic.getProvider().send('eth_accounts').then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  _proto.deactivate = function deactivate() {};\n  _proto.close = function close() {\n    try {\n      var _this11 = this;\n      return Promise.resolve(_this11.fortmatic.user.logout()).then(function () {\n        _this11.emitDeactivate();\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n  return FortmaticConnector;\n}(AbstractConnector);\nexport { FortmaticConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["chainIdToNetwork","FortmaticConnector","AbstractConnector","apiKey","chainId","Object","keys","includes","toString","supportedChainIds","activate","fortmatic","Fortmatic","then","m","undefined","account","getProvider","enable","accounts","provider","getChainId","getAccount","send","deactivate","close","user","logout","emitDeactivate"],"mappings":"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","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}