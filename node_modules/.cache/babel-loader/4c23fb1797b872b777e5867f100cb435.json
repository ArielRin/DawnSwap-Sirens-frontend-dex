{"ast":null,"code":"var _s = $RefreshSig$();\nimport { nanoid } from '@reduxjs/toolkit';\nimport { ChainId } from '@pantherswap-libs/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors';\nimport { fetchTokenList } from '../state/lists/actions';\nimport getTokenList from '../utils/getTokenList';\nimport resolveENSContentHash from '../utils/resolveENSContentHash';\nimport { useActiveWeb3React } from './index';\nexport function useFetchListCallback() {\n  _s();\n  const {\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const ensResolver = useCallback(ensName => {\n    if (!library || chainId !== ChainId.MAINNET) {\n      if (NETWORK_CHAIN_ID === ChainId.MAINNET) {\n        const networkLibrary = getNetworkLibrary();\n        if (networkLibrary) {\n          return resolveENSContentHash(ensName, networkLibrary);\n        }\n      }\n      throw new Error('Could not construct mainnet ENS resolver');\n    }\n    return resolveENSContentHash(ensName, library);\n  }, [chainId, library]);\n  return useCallback(async listUrl => {\n    const requestId = nanoid();\n    dispatch(fetchTokenList.pending({\n      requestId,\n      url: listUrl\n    }));\n    return getTokenList(listUrl, ensResolver).then(tokenList => {\n      dispatch(fetchTokenList.fulfilled({\n        url: listUrl,\n        tokenList,\n        requestId\n      }));\n      return tokenList;\n    }).catch(error => {\n      console.error(`Failed to get list at url ${listUrl}`, error);\n      dispatch(fetchTokenList.rejected({\n        url: listUrl,\n        requestId,\n        errorMessage: error.message\n      }));\n      throw error;\n    });\n  }, [dispatch, ensResolver]);\n}\n_s(useFetchListCallback, \"bPF8hnilu9tIi3RDorgSSluO4uI=\", false, function () {\n  return [useActiveWeb3React, useDispatch];\n});\nexport default useFetchListCallback;","map":{"version":3,"names":["nanoid","ChainId","useCallback","useDispatch","getNetworkLibrary","NETWORK_CHAIN_ID","fetchTokenList","getTokenList","resolveENSContentHash","useActiveWeb3React","useFetchListCallback","_s","chainId","library","dispatch","ensResolver","ensName","MAINNET","networkLibrary","Error","listUrl","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","rejected","errorMessage","message"],"sources":["C:/projects/panther-frontend-dex1/src/hooks/useFetchListCallback.ts"],"sourcesContent":["import { nanoid } from '@reduxjs/toolkit'\r\nimport { ChainId } from '@pantherswap-libs/sdk'\r\nimport { TokenList } from '@uniswap/token-lists'\r\nimport { useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getNetworkLibrary, NETWORK_CHAIN_ID } from '../connectors'\r\nimport { AppDispatch } from '../state'\r\nimport { fetchTokenList } from '../state/lists/actions'\r\nimport getTokenList from '../utils/getTokenList'\r\nimport resolveENSContentHash from '../utils/resolveENSContentHash'\r\nimport { useActiveWeb3React } from './index'\r\n\r\nexport function useFetchListCallback(): (listUrl: string) => Promise<TokenList> {\r\n  const { chainId, library } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const ensResolver = useCallback(\r\n    (ensName: string) => {\r\n      if (!library || chainId !== ChainId.MAINNET) {\r\n        if (NETWORK_CHAIN_ID === ChainId.MAINNET) {\r\n          const networkLibrary = getNetworkLibrary()\r\n          if (networkLibrary) {\r\n            return resolveENSContentHash(ensName, networkLibrary)\r\n          }\r\n        }\r\n        throw new Error('Could not construct mainnet ENS resolver')\r\n      }\r\n      return resolveENSContentHash(ensName, library)\r\n    },\r\n    [chainId, library]\r\n  )\r\n\r\n  return useCallback(\r\n    async (listUrl: string) => {\r\n      const requestId = nanoid()\r\n      dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\r\n      return getTokenList(listUrl, ensResolver)\r\n        .then((tokenList) => {\r\n          dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\r\n          return tokenList\r\n        })\r\n        .catch((error) => {\r\n          console.error(`Failed to get list at url ${listUrl}`, error)\r\n          dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\r\n          throw error\r\n        })\r\n    },\r\n    [dispatch, ensResolver]\r\n  )\r\n}\r\n\r\nexport default useFetchListCallback\r\n"],"mappings":";AAAA,SAASA,MAAM,QAAQ,kBAAkB;AACzC,SAASC,OAAO,QAAQ,uBAAuB;AAE/C,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,iBAAiB,EAAEC,gBAAgB,QAAQ,eAAe;AAEnE,SAASC,cAAc,QAAQ,wBAAwB;AACvD,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,qBAAqB,MAAM,gCAAgC;AAClE,SAASC,kBAAkB,QAAQ,SAAS;AAE5C,OAAO,SAASC,oBAAoBA,CAAA,EAA4C;EAAAC,EAAA;EAC9E,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGJ,kBAAkB,CAAC,CAAC;EACjD,MAAMK,QAAQ,GAAGX,WAAW,CAAc,CAAC;EAE3C,MAAMY,WAAW,GAAGb,WAAW,CAC5Bc,OAAe,IAAK;IACnB,IAAI,CAACH,OAAO,IAAID,OAAO,KAAKX,OAAO,CAACgB,OAAO,EAAE;MAC3C,IAAIZ,gBAAgB,KAAKJ,OAAO,CAACgB,OAAO,EAAE;QACxC,MAAMC,cAAc,GAAGd,iBAAiB,CAAC,CAAC;QAC1C,IAAIc,cAAc,EAAE;UAClB,OAAOV,qBAAqB,CAACQ,OAAO,EAAEE,cAAc,CAAC;QACvD;MACF;MACA,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;IAC7D;IACA,OAAOX,qBAAqB,CAACQ,OAAO,EAAEH,OAAO,CAAC;EAChD,CAAC,EACD,CAACD,OAAO,EAAEC,OAAO,CACnB,CAAC;EAED,OAAOX,WAAW,CAChB,MAAOkB,OAAe,IAAK;IACzB,MAAMC,SAAS,GAAGrB,MAAM,CAAC,CAAC;IAC1Bc,QAAQ,CAACR,cAAc,CAACgB,OAAO,CAAC;MAAED,SAAS;MAAEE,GAAG,EAAEH;IAAQ,CAAC,CAAC,CAAC;IAC7D,OAAOb,YAAY,CAACa,OAAO,EAAEL,WAAW,CAAC,CACtCS,IAAI,CAAEC,SAAS,IAAK;MACnBX,QAAQ,CAACR,cAAc,CAACoB,SAAS,CAAC;QAAEH,GAAG,EAAEH,OAAO;QAAEK,SAAS;QAAEJ;MAAU,CAAC,CAAC,CAAC;MAC1E,OAAOI,SAAS;IAClB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAE,6BAA4BR,OAAQ,EAAC,EAAEQ,KAAK,CAAC;MAC5Dd,QAAQ,CAACR,cAAc,CAACwB,QAAQ,CAAC;QAAEP,GAAG,EAAEH,OAAO;QAAEC,SAAS;QAAEU,YAAY,EAAEH,KAAK,CAACI;MAAQ,CAAC,CAAC,CAAC;MAC3F,MAAMJ,KAAK;IACb,CAAC,CAAC;EACN,CAAC,EACD,CAACd,QAAQ,EAAEC,WAAW,CACxB,CAAC;AACH;AAACJ,EAAA,CArCeD,oBAAoB;EAAA,QACLD,kBAAkB,EAC9BN,WAAW;AAAA;AAqC9B,eAAeO,oBAAoB"},"metadata":{},"sourceType":"module"}