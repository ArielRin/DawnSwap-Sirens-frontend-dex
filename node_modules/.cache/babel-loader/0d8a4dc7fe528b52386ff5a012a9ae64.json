{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\panther-frontend-dex1\\\\src\\\\components\\\\NumericalInput\\\\index.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { escapeRegExp } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledInput = styled.input`\n  color: ${_ref => {\n  let {\n    error,\n    theme\n  } = _ref;\n  return error ? theme.colors.failure : theme.colors.text;\n}};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: 16px;\n  text-align: ${_ref2 => {\n  let {\n    align\n  } = _ref2;\n  return align && align;\n}};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${_ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return theme.colors.textSubtle;\n}};\n  }\n`;\n_c = StyledInput;\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`); // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = /*#__PURE__*/React.memo(_c2 = function InnerInput(_ref4) {\n  let {\n    value,\n    onUserInput,\n    placeholder,\n    ...rest\n  } = _ref4;\n  const enforcer = nextUserInput => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(StyledInput, {\n    ...rest,\n    value: value,\n    onChange: event => {\n      // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n      enforcer(event.target.value.replace(/,/g, '.'));\n    }\n    // universal input options\n    ,\n    inputMode: \"decimal\",\n    title: \"Token Amount\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\"\n    // text-specific options\n    ,\n    type: \"text\",\n    pattern: \"^[0-9]*[.,]?[0-9]*$\",\n    placeholder: placeholder || '0.0',\n    minLength: 1,\n    maxLength: 79,\n    spellCheck: \"false\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n});\n_c3 = Input;\nexport default Input;\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"StyledInput\");\n$RefreshReg$(_c2, \"Input$React.memo\");\n$RefreshReg$(_c3, \"Input\");","map":{"version":3,"names":["React","styled","escapeRegExp","jsxDEV","_jsxDEV","StyledInput","input","_ref","error","theme","colors","failure","text","_ref2","align","_ref3","textSubtle","_c","inputRegex","RegExp","Input","memo","_c2","InnerInput","_ref4","value","onUserInput","placeholder","rest","enforcer","nextUserInput","test","onChange","event","target","replace","inputMode","title","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["C:/projects/panther-frontend-dex1/src/components/NumericalInput/index.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { escapeRegExp } from '../../utils'\r\n\r\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\r\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\r\n  width: 0;\r\n  position: relative;\r\n  font-weight: 500;\r\n  outline: none;\r\n  border: none;\r\n  flex: 1 1 auto;\r\n  background-color: transparent;\r\n  font-size: 16px;\r\n  text-align: ${({ align }) => align && align};\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  padding: 0px;\r\n  -webkit-appearance: textfield;\r\n\r\n  ::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  [type='number'] {\r\n    -moz-appearance: textfield;\r\n  }\r\n\r\n  ::-webkit-outer-spin-button,\r\n  ::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  ::placeholder {\r\n    color: ${({ theme }) => theme.colors.textSubtle};\r\n  }\r\n`\r\n\r\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\r\n\r\nexport const Input = React.memo(function InnerInput({\r\n  value,\r\n  onUserInput,\r\n  placeholder,\r\n  ...rest\r\n}: {\r\n  value: string | number\r\n  onUserInput: (input: string) => void\r\n  error?: boolean\r\n  fontSize?: string\r\n  align?: 'right' | 'left'\r\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\r\n  const enforcer = (nextUserInput: string) => {\r\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\r\n      onUserInput(nextUserInput)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledInput\r\n      {...rest}\r\n      value={value}\r\n      onChange={event => {\r\n        // replace commas with periods, because uniswap exclusively uses period as the decimal separator\r\n        enforcer(event.target.value.replace(/,/g, '.'))\r\n      }}\r\n      // universal input options\r\n      inputMode=\"decimal\"\r\n      title=\"Token Amount\"\r\n      autoComplete=\"off\"\r\n      autoCorrect=\"off\"\r\n      // text-specific options\r\n      type=\"text\"\r\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n      placeholder={placeholder || '0.0'}\r\n      minLength={1}\r\n      maxLength={79}\r\n      spellCheck=\"false\"\r\n    />\r\n  )\r\n})\r\n\r\nexport default Input\r\n\r\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,YAAY,QAAQ,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,WAAW,GAAGJ,MAAM,CAACK,KAA8D;AACzF,WAAWC,IAAA;EAAA,IAAC;IAAEC,KAAK;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAAA,OAAMC,KAAK,GAAGC,KAAK,CAACC,MAAM,CAACC,OAAO,GAAGF,KAAK,CAACC,MAAM,CAACE,IAAI;AAAA,CAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgBC,KAAA;EAAA,IAAC;IAAEC;EAAM,CAAC,GAAAD,KAAA;EAAA,OAAKC,KAAK,IAAIA,KAAK;AAAA,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAaC,KAAA;EAAA,IAAC;IAAEN;EAAM,CAAC,GAAAM,KAAA;EAAA,OAAKN,KAAK,CAACC,MAAM,CAACM,UAAU;AAAA,CAAC;AACpD;AACA,CAAC;AAAAC,EAAA,GAjCKZ,WAAW;AAmCjB,MAAMa,UAAU,GAAGC,MAAM,CAAE,wBAAuB,CAAC,EAAC;;AAEpD,OAAO,MAAMC,KAAK,gBAAGpB,KAAK,CAACqB,IAAI,CAAAC,GAAA,GAAC,SAASC,UAAUA,CAAAC,KAAA,EAWqB;EAAA,IAXpB;IAClDC,KAAK;IACLC,WAAW;IACXC,WAAW;IACX,GAAGC;EAOgE,CAAC,GAAAJ,KAAA;EACpE,MAAMK,QAAQ,GAAIC,aAAqB,IAAK;IAC1C,IAAIA,aAAa,KAAK,EAAE,IAAIZ,UAAU,CAACa,IAAI,CAAC7B,YAAY,CAAC4B,aAAa,CAAC,CAAC,EAAE;MACxEJ,WAAW,CAACI,aAAa,CAAC;IAC5B;EACF,CAAC;EAED,oBACE1B,OAAA,CAACC,WAAW;IAAA,GACNuB,IAAI;IACRH,KAAK,EAAEA,KAAM;IACbO,QAAQ,EAAEC,KAAK,IAAI;MACjB;MACAJ,QAAQ,CAACI,KAAK,CAACC,MAAM,CAACT,KAAK,CAACU,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACjD;IACA;IAAA;IACAC,SAAS,EAAC,SAAS;IACnBC,KAAK,EAAC,cAAc;IACpBC,YAAY,EAAC,KAAK;IAClBC,WAAW,EAAC;IACZ;IAAA;IACAC,IAAI,EAAC,MAAM;IACXC,OAAO,EAAC,qBAAqB;IAC7Bd,WAAW,EAAEA,WAAW,IAAI,KAAM;IAClCe,SAAS,EAAE,CAAE;IACbC,SAAS,EAAE,EAAG;IACdC,UAAU,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnB,CAAC;AAEN,CAAC,CAAC;AAAAC,GAAA,GAxCW7B,KAAK;AA0ClB,eAAeA,KAAK;;AAEpB;AAAA,IAAAH,EAAA,EAAAK,GAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAAjC,EAAA;AAAAiC,YAAA,CAAA5B,GAAA;AAAA4B,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module"}