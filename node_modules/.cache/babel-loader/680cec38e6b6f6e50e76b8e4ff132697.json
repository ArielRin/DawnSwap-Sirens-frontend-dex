{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport application from './application/reducer';\nimport { updateVersion } from './global/actions';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport swap from './swap/reducer';\nimport mint from './mint/reducer';\nimport lists from './lists/reducer';\nimport burn from './burn/reducer';\nimport multicall from './multicall/reducer';\nimport { getThemeCache } from '../utils/theme';\nconst PERSISTED_KEYS = ['user', 'transactions'];\nconst loadedState = load({\n  states: PERSISTED_KEYS\n});\nif (loadedState.user) {\n  loadedState.user.userDarkMode = getThemeCache();\n}\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists\n  },\n  middleware: [...getDefaultMiddleware({\n    thunk: false\n  }), save({\n    states: PERSISTED_KEYS\n  })],\n  preloadedState: loadedState\n});\nstore.dispatch(updateVersion());\nexport default store;","map":{"version":3,"names":["configureStore","getDefaultMiddleware","save","load","application","updateVersion","user","transactions","swap","mint","lists","burn","multicall","getThemeCache","PERSISTED_KEYS","loadedState","states","userDarkMode","store","reducer","middleware","thunk","preloadedState","dispatch"],"sources":["C:/projects/panther-frontend-dex1/src/state/index.ts"],"sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport { save, load } from 'redux-localstorage-simple'\r\n\r\nimport application from './application/reducer'\r\nimport { updateVersion } from './global/actions'\r\nimport user from './user/reducer'\r\nimport transactions from './transactions/reducer'\r\nimport swap from './swap/reducer'\r\nimport mint from './mint/reducer'\r\nimport lists from './lists/reducer'\r\nimport burn from './burn/reducer'\r\nimport multicall from './multicall/reducer'\r\nimport { getThemeCache } from '../utils/theme'\r\n\r\ntype MergedState = {\r\n  user: {\r\n    [key: string]: any\r\n  }\r\n  transactions: {\r\n    [key: string]: any\r\n  }\r\n}\r\nconst PERSISTED_KEYS: string[] = ['user', 'transactions']\r\nconst loadedState = load({ states: PERSISTED_KEYS }) as MergedState\r\nif (loadedState.user) {\r\n  loadedState.user.userDarkMode = getThemeCache()\r\n}\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    user,\r\n    transactions,\r\n    swap,\r\n    mint,\r\n    burn,\r\n    multicall,\r\n    lists,\r\n  },\r\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\r\n  preloadedState: loadedState,\r\n})\r\n\r\nstore.dispatch(updateVersion())\r\n\r\nexport default store\r\n\r\nexport type AppState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,oBAAoB,QAAQ,kBAAkB;AACvE,SAASC,IAAI,EAAEC,IAAI,QAAQ,2BAA2B;AAEtD,OAAOC,WAAW,MAAM,uBAAuB;AAC/C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,KAAK,MAAM,iBAAiB;AACnC,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,SAAS,MAAM,qBAAqB;AAC3C,SAASC,aAAa,QAAQ,gBAAgB;AAU9C,MAAMC,cAAwB,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC;AACzD,MAAMC,WAAW,GAAGZ,IAAI,CAAC;EAAEa,MAAM,EAAEF;AAAe,CAAC,CAAgB;AACnE,IAAIC,WAAW,CAACT,IAAI,EAAE;EACpBS,WAAW,CAACT,IAAI,CAACW,YAAY,GAAGJ,aAAa,CAAC,CAAC;AACjD;AAEA,MAAMK,KAAK,GAAGlB,cAAc,CAAC;EAC3BmB,OAAO,EAAE;IACPf,WAAW;IACXE,IAAI;IACJC,YAAY;IACZC,IAAI;IACJC,IAAI;IACJE,IAAI;IACJC,SAAS;IACTF;EACF,CAAC;EACDU,UAAU,EAAE,CAAC,GAAGnB,oBAAoB,CAAC;IAAEoB,KAAK,EAAE;EAAM,CAAC,CAAC,EAAEnB,IAAI,CAAC;IAAEc,MAAM,EAAEF;EAAe,CAAC,CAAC,CAAC;EACzFQ,cAAc,EAAEP;AAClB,CAAC,CAAC;AAEFG,KAAK,CAACK,QAAQ,CAAClB,aAAa,CAAC,CAAC,CAAC;AAE/B,eAAea,KAAK"},"metadata":{},"sourceType":"module"}