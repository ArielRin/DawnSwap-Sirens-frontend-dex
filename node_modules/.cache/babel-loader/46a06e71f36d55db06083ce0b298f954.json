{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { Trade } from '@pantherswap-libs/sdk';\nimport flatMap from 'lodash.flatmap';\nimport { useMemo } from 'react';\nimport { BASES_TO_CHECK_TRADES_AGAINST, CUSTOM_BASES } from '../constants';\nimport { PairState, usePairs } from '../data/Reserves';\nimport { wrappedCurrency } from '../utils/wrappedCurrency';\nimport { useActiveWeb3React } from './index';\nfunction useAllCommonPairs(currencyA, currencyB) {\n  _s();\n  const {\n    chainId\n  } = useActiveWeb3React();\n\n  // Base tokens for building intermediary trading routes\n  const bases = useMemo(() => chainId ? BASES_TO_CHECK_TRADES_AGAINST[chainId] : [], [chainId]);\n\n  // All pairs from base tokens\n  const basePairs = useMemo(() => flatMap(bases, base => bases.map(otherBase => [base, otherBase])).filter(_ref => {\n    let [t0, t1] = _ref;\n    return t0.address !== t1.address;\n  }), [bases]);\n  const [tokenA, tokenB] = chainId ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)] : [undefined, undefined];\n  const allPairCombinations = useMemo(() => tokenA && tokenB ? [\n  // the direct pair\n  [tokenA, tokenB],\n  // token A against all bases\n  ...bases.map(base => [tokenA, base]),\n  // token B against all bases\n  ...bases.map(base => [tokenB, base]),\n  // each base against all bases\n  ...basePairs].filter(tokens => Boolean(tokens[0] && tokens[1])).filter(_ref2 => {\n    let [t0, t1] = _ref2;\n    return t0.address !== t1.address;\n  })\n  // This filter will remove all the pairs that are not supported by the CUSTOM_BASES settings\n  // This option is currently not used on Pancake swap\n  .filter(_ref3 => {\n    let [t0, t1] = _ref3;\n    if (!chainId) return true;\n    const customBases = CUSTOM_BASES[chainId];\n    if (!customBases) return true;\n    const customBasesA = customBases[t0.address];\n    const customBasesB = customBases[t1.address];\n    if (!customBasesA && !customBasesB) return true;\n    if (customBasesA && !customBasesA.find(base => t1.equals(base))) return false;\n    if (customBasesB && !customBasesB.find(base => t0.equals(base))) return false;\n    return true;\n  }) : [], [tokenA, tokenB, bases, basePairs, chainId]);\n  const allPairs = usePairs(allPairCombinations);\n\n  // only pass along valid pairs, non-duplicated pairs\n  return useMemo(() => Object.values(allPairs\n  // filter out invalid pairs\n  .filter(result => Boolean(result[0] === PairState.EXISTS && result[1]))\n  // filter out duplicated pairs\n  .reduce((memo, _ref4) => {\n    var _memo$curr$liquidityT;\n    let [, curr] = _ref4;\n    memo[curr.liquidityToken.address] = (_memo$curr$liquidityT = memo[curr.liquidityToken.address]) !== null && _memo$curr$liquidityT !== void 0 ? _memo$curr$liquidityT : curr;\n    return memo;\n  }, {})), [allPairs]);\n}\n\n/**\r\n * Returns the best trade for the exact amount of tokens in to the given token out\r\n */\n_s(useAllCommonPairs, \"yOlOGLSe6CG5zU7a8alITxmtf8s=\", false, function () {\n  return [useActiveWeb3React, usePairs];\n});\nexport function useTradeExactIn(currencyAmountIn, currencyOut) {\n  _s2();\n  const allowedPairs = useAllCommonPairs(currencyAmountIn === null || currencyAmountIn === void 0 ? void 0 : currencyAmountIn.currency, currencyOut);\n  return useMemo(() => {\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n      var _Trade$bestTradeExact;\n      return (_Trade$bestTradeExact = Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, {\n        maxHops: 3,\n        maxNumResults: 1\n      })[0]) !== null && _Trade$bestTradeExact !== void 0 ? _Trade$bestTradeExact : null;\n    }\n    return null;\n  }, [allowedPairs, currencyAmountIn, currencyOut]);\n}\n\n/**\r\n * Returns the best trade for the token in to the exact amount of token out\r\n */\n_s2(useTradeExactIn, \"VKnNShbqc2Xh9bmx09RrKz6CRDo=\", false, function () {\n  return [useAllCommonPairs];\n});\nexport function useTradeExactOut(currencyIn, currencyAmountOut) {\n  _s3();\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut === null || currencyAmountOut === void 0 ? void 0 : currencyAmountOut.currency);\n  return useMemo(() => {\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\n      var _Trade$bestTradeExact2;\n      return (_Trade$bestTradeExact2 = Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, {\n        maxHops: 3,\n        maxNumResults: 1\n      })[0]) !== null && _Trade$bestTradeExact2 !== void 0 ? _Trade$bestTradeExact2 : null;\n    }\n    return null;\n  }, [allowedPairs, currencyIn, currencyAmountOut]);\n}\n_s3(useTradeExactOut, \"VKnNShbqc2Xh9bmx09RrKz6CRDo=\", false, function () {\n  return [useAllCommonPairs];\n});","map":{"version":3,"names":["Trade","flatMap","useMemo","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","PairState","usePairs","wrappedCurrency","useActiveWeb3React","useAllCommonPairs","currencyA","currencyB","_s","chainId","bases","basePairs","base","map","otherBase","filter","_ref","t0","t1","address","tokenA","tokenB","undefined","allPairCombinations","tokens","Boolean","_ref2","_ref3","customBases","customBasesA","customBasesB","find","equals","allPairs","Object","values","result","EXISTS","reduce","memo","_ref4","_memo$curr$liquidityT","curr","liquidityToken","useTradeExactIn","currencyAmountIn","currencyOut","_s2","allowedPairs","currency","length","_Trade$bestTradeExact","bestTradeExactIn","maxHops","maxNumResults","useTradeExactOut","currencyIn","currencyAmountOut","_s3","_Trade$bestTradeExact2","bestTradeExactOut"],"sources":["C:/projects/panther-frontend-dex1/src/hooks/Trades.ts"],"sourcesContent":["import { Currency, CurrencyAmount, Pair, Token, Trade } from '@pantherswap-libs/sdk'\r\nimport flatMap from 'lodash.flatmap'\r\nimport { useMemo } from 'react'\r\n\r\nimport { BASES_TO_CHECK_TRADES_AGAINST, CUSTOM_BASES } from '../constants'\r\nimport { PairState, usePairs } from '../data/Reserves'\r\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\r\n\r\nimport { useActiveWeb3React } from './index'\r\n\r\nfunction useAllCommonPairs(currencyA?: Currency, currencyB?: Currency): Pair[] {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  // Base tokens for building intermediary trading routes\r\n  const bases: Token[] = useMemo(() => (chainId ? BASES_TO_CHECK_TRADES_AGAINST[chainId] : []), [chainId])\r\n\r\n  // All pairs from base tokens\r\n  const basePairs: [Token, Token][] = useMemo(\r\n    () =>\r\n      flatMap(bases, (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])).filter(\r\n        ([t0, t1]) => t0.address !== t1.address\r\n      ),\r\n    [bases]\r\n  )\r\n\r\n  const [tokenA, tokenB] = chainId\r\n    ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n    : [undefined, undefined]\r\n\r\n  const allPairCombinations: [Token, Token][] = useMemo(\r\n    () =>\r\n      tokenA && tokenB\r\n        ? [\r\n            // the direct pair\r\n            [tokenA, tokenB],\r\n            // token A against all bases\r\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\r\n            // token B against all bases\r\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\r\n            // each base against all bases\r\n            ...basePairs,\r\n          ]\r\n            .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\r\n            .filter(([t0, t1]) => t0.address !== t1.address)\r\n            // This filter will remove all the pairs that are not supported by the CUSTOM_BASES settings\r\n            // This option is currently not used on Pancake swap\r\n            .filter(([t0, t1]) => {\r\n              if (!chainId) return true\r\n              const customBases = CUSTOM_BASES[chainId]\r\n              if (!customBases) return true\r\n\r\n              const customBasesA: Token[] | undefined = customBases[t0.address]\r\n              const customBasesB: Token[] | undefined = customBases[t1.address]\r\n\r\n              if (!customBasesA && !customBasesB) return true\r\n              if (customBasesA && !customBasesA.find((base) => t1.equals(base))) return false\r\n              if (customBasesB && !customBasesB.find((base) => t0.equals(base))) return false\r\n\r\n              return true\r\n            })\r\n        : [],\r\n    [tokenA, tokenB, bases, basePairs, chainId]\r\n  )\r\n\r\n  const allPairs = usePairs(allPairCombinations)\r\n\r\n  // only pass along valid pairs, non-duplicated pairs\r\n  return useMemo(\r\n    () =>\r\n      Object.values(\r\n        allPairs\r\n          // filter out invalid pairs\r\n          .filter((result): result is [PairState.EXISTS, Pair] => Boolean(result[0] === PairState.EXISTS && result[1]))\r\n          // filter out duplicated pairs\r\n          .reduce<{ [pairAddress: string]: Pair }>((memo, [, curr]) => {\r\n            memo[curr.liquidityToken.address] = memo[curr.liquidityToken.address] ?? curr\r\n            return memo\r\n          }, {})\r\n      ),\r\n    [allPairs]\r\n  )\r\n}\r\n\r\n/**\r\n * Returns the best trade for the exact amount of tokens in to the given token out\r\n */\r\nexport function useTradeExactIn(currencyAmountIn?: CurrencyAmount, currencyOut?: Currency): Trade | null {\r\n  const allowedPairs = useAllCommonPairs(currencyAmountIn?.currency, currencyOut)\r\n\r\n  return useMemo(() => {\r\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\r\n      return (\r\n        Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: 3, maxNumResults: 1 })[0] ?? null\r\n      )\r\n    }\r\n    return null\r\n  }, [allowedPairs, currencyAmountIn, currencyOut])\r\n}\r\n\r\n/**\r\n * Returns the best trade for the token in to the exact amount of token out\r\n */\r\nexport function useTradeExactOut(currencyIn?: Currency, currencyAmountOut?: CurrencyAmount): Trade | null {\r\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut?.currency)\r\n\r\n  return useMemo(() => {\r\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\r\n      return (\r\n        Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: 3, maxNumResults: 1 })[0] ??\r\n        null\r\n      )\r\n    }\r\n    return null\r\n  }, [allowedPairs, currencyIn, currencyAmountOut])\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}