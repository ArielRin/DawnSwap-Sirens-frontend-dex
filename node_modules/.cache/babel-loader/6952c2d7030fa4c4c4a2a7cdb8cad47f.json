{"ast":null,"code":"import { ChainId } from '@pantherswap-libs/sdk';\nimport { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector';\nexport const OVERLAY_READY = 'OVERLAY_READY';\nconst CHAIN_ID_NETWORK_ARGUMENT = {\n  [ChainId.MAINNET]: undefined,\n  [ChainId.BSCTESTNET]: 'Bsc-testnet'\n};\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const {\n        default: Fortmatic\n      } = await import('fortmatic');\n      const {\n        apiKey,\n        chainId\n      } = this;\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId]);\n      } else {\n        throw new Error(`Unsupported network ID: ${chainId}`);\n      }\n    }\n    const provider = this.fortmatic.getProvider();\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve();\n        }\n      }, 200);\n    });\n    const [account] = await Promise.all([provider.enable().then(accounts => accounts[0]), pollForOverlayReady]);\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: this.chainId,\n      account\n    };\n  }\n}","map":{"version":3,"names":["ChainId","FortmaticConnector","FortmaticConnectorCore","OVERLAY_READY","CHAIN_ID_NETWORK_ARGUMENT","MAINNET","undefined","BSCTESTNET","activate","fortmatic","default","Fortmatic","apiKey","chainId","Error","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlayReady","clearInterval","emit","account","all","enable","then","accounts"],"sources":["C:/projects/panther-frontend-dex1/src/connectors/Fortmatic.ts"],"sourcesContent":["import { ChainId } from '@pantherswap-libs/sdk'\r\nimport { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector'\r\n\r\nexport const OVERLAY_READY = 'OVERLAY_READY'\r\n\r\ntype FormaticSupportedChains = Extract<ChainId, ChainId.MAINNET | ChainId.BSCTESTNET>\r\n\r\nconst CHAIN_ID_NETWORK_ARGUMENT: { readonly [chainId in FormaticSupportedChains]: string | undefined } = {\r\n  [ChainId.MAINNET]: undefined,\r\n  [ChainId.BSCTESTNET]: 'Bsc-testnet'\r\n}\r\n\r\nexport class FortmaticConnector extends FortmaticConnectorCore {\r\n  async activate() {\r\n    if (!this.fortmatic) {\r\n      const { default: Fortmatic } = await import('fortmatic')\r\n\r\n      const { apiKey, chainId } = this as any\r\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\r\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId as FormaticSupportedChains])\r\n      } else {\r\n        throw new Error(`Unsupported network ID: ${chainId}`)\r\n      }\r\n    }\r\n\r\n    const provider = this.fortmatic.getProvider()\r\n\r\n    const pollForOverlayReady: Promise<void> = new Promise(resolve => {\r\n      const interval = setInterval(() => {\r\n        if (provider.overlayReady) {\r\n          clearInterval(interval)\r\n          this.emit(OVERLAY_READY)\r\n          resolve()\r\n        }\r\n      }, 200)\r\n    })\r\n\r\n    const [account] = await Promise.all([\r\n      provider.enable().then((accounts: string[]) => accounts[0]),\r\n      pollForOverlayReady\r\n    ])\r\n\r\n    return { provider: this.fortmatic.getProvider(), chainId: (this as any).chainId, account }\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,kBAAkB,IAAIC,sBAAsB,QAAQ,iCAAiC;AAE9F,OAAO,MAAMC,aAAa,GAAG,eAAe;AAI5C,MAAMC,yBAAgG,GAAG;EACvG,CAACJ,OAAO,CAACK,OAAO,GAAGC,SAAS;EAC5B,CAACN,OAAO,CAACO,UAAU,GAAG;AACxB,CAAC;AAED,OAAO,MAAMN,kBAAkB,SAASC,sBAAsB,CAAC;EAC7D,MAAMM,QAAQA,CAAA,EAAG;IACf,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,MAAM;QAAEC,OAAO,EAAEC;MAAU,CAAC,GAAG,MAAM,MAAM,CAAC,WAAW,CAAC;MAExD,MAAM;QAAEC,MAAM;QAAEC;MAAQ,CAAC,GAAG,IAAW;MACvC,IAAIA,OAAO,IAAIT,yBAAyB,EAAE;QACxC,IAAI,CAACK,SAAS,GAAG,IAAIE,SAAS,CAACC,MAAM,EAAER,yBAAyB,CAACS,OAAO,CAA4B,CAAC;MACvG,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAE,2BAA0BD,OAAQ,EAAC,CAAC;MACvD;IACF;IAEA,MAAME,QAAQ,GAAG,IAAI,CAACN,SAAS,CAACO,WAAW,CAAC,CAAC;IAE7C,MAAMC,mBAAkC,GAAG,IAAIC,OAAO,CAACC,OAAO,IAAI;MAChE,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjC,IAAIN,QAAQ,CAACO,YAAY,EAAE;UACzBC,aAAa,CAACH,QAAQ,CAAC;UACvB,IAAI,CAACI,IAAI,CAACrB,aAAa,CAAC;UACxBgB,OAAO,CAAC,CAAC;QACX;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;IAEF,MAAM,CAACM,OAAO,CAAC,GAAG,MAAMP,OAAO,CAACQ,GAAG,CAAC,CAClCX,QAAQ,CAACY,MAAM,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAkB,IAAKA,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC3DZ,mBAAmB,CACpB,CAAC;IAEF,OAAO;MAAEF,QAAQ,EAAE,IAAI,CAACN,SAAS,CAACO,WAAW,CAAC,CAAC;MAAEH,OAAO,EAAG,IAAI,CAASA,OAAO;MAAEY;IAAQ,CAAC;EAC5F;AACF"},"metadata":{},"sourceType":"module"}