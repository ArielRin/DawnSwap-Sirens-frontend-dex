{"ast":null,"code":"import _regeneratorRuntime from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _defineProperty from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _CHAIN_ID_NETWORK_ARG;import{ChainId}from'@pantherswap-libs/sdk';import{FortmaticConnector as FortmaticConnectorCore}from'@web3-react/fortmatic-connector';export var OVERLAY_READY='OVERLAY_READY';var CHAIN_ID_NETWORK_ARGUMENT=(_CHAIN_ID_NETWORK_ARG={},_defineProperty(_CHAIN_ID_NETWORK_ARG,ChainId.MAINNET,undefined),_defineProperty(_CHAIN_ID_NETWORK_ARG,ChainId.BSCTESTNET,'Bsc-testnet'),_CHAIN_ID_NETWORK_ARG);export var FortmaticConnector=/*#__PURE__*/function(_FortmaticConnectorCo){_inherits(FortmaticConnector,_FortmaticConnectorCo);var _super=_createSuper(FortmaticConnector);function FortmaticConnector(){_classCallCheck(this,FortmaticConnector);return _super.apply(this,arguments);}_createClass(FortmaticConnector,[{key:\"activate\",value:function(){var _activate=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _this=this;var _yield$import,Fortmatic,_ref,apiKey,chainId,provider,pollForOverlayReady,_yield$Promise$all,_yield$Promise$all2,account;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(this.fortmatic){_context.next=11;break;}_context.next=3;return import('fortmatic');case 3:_yield$import=_context.sent;Fortmatic=_yield$import.default;_ref=this,apiKey=_ref.apiKey,chainId=_ref.chainId;if(!(chainId in CHAIN_ID_NETWORK_ARGUMENT)){_context.next=10;break;}this.fortmatic=new Fortmatic(apiKey,CHAIN_ID_NETWORK_ARGUMENT[chainId]);_context.next=11;break;case 10:throw new Error(\"Unsupported network ID: \".concat(chainId));case 11:provider=this.fortmatic.getProvider();pollForOverlayReady=new Promise(function(resolve){var interval=setInterval(function(){if(provider.overlayReady){clearInterval(interval);_this.emit(OVERLAY_READY);resolve();}},200);});_context.next=15;return Promise.all([provider.enable().then(function(accounts){return accounts[0];}),pollForOverlayReady]);case 15:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,1);account=_yield$Promise$all2[0];return _context.abrupt(\"return\",{provider:this.fortmatic.getProvider(),chainId:this.chainId,account:account});case 19:case\"end\":return _context.stop();}}},_callee,this);}));function activate(){return _activate.apply(this,arguments);}return activate;}()}]);return FortmaticConnector;}(FortmaticConnectorCore);","map":{"version":3,"sources":["C:/projects/panther-frontend-dex1/src/connectors/Fortmatic.ts"],"names":["ChainId","FortmaticConnector","FortmaticConnectorCore","OVERLAY_READY","CHAIN_ID_NETWORK_ARGUMENT","MAINNET","undefined","BSCTESTNET","fortmatic","Fortmatic","default","apiKey","chainId","Error","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlayReady","clearInterval","emit","all","enable","then","accounts","account"],"mappings":"ysCAAA,OAASA,OAAT,KAAwB,uBAAxB,CACA,OAASC,kBAAkB,GAAIC,CAAAA,sBAA/B,KAA6D,iCAA7D,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,eAAtB,CAIP,GAAMC,CAAAA,yBAAgG,iEACnGJ,OAAO,CAACK,OAD2F,CACjFC,SADiF,wCAEnGN,OAAO,CAACO,UAF2F,CAE9E,aAF8E,wBAAtG,CAKA,UAAaN,CAAAA,kBAAb,mpBAES,KAAKO,SAFd,gDAG2C,QAAO,WAAP,CAH3C,oCAGuBC,SAHvB,eAGcC,OAHd,MAKkC,IALlC,CAKcC,MALd,MAKcA,MALd,CAKsBC,OALtB,MAKsBA,OALtB,MAMUA,OAAO,GAAIR,CAAAA,yBANrB,2BAOQ,KAAKI,SAAL,CAAiB,GAAIC,CAAAA,SAAJ,CAAcE,MAAd,CAAsBP,yBAAyB,CAACQ,OAAD,CAA/C,CAAjB,CAPR,oCASc,IAAIC,CAAAA,KAAJ,mCAAqCD,OAArC,EATd,SAaUE,QAbV,CAaqB,KAAKN,SAAL,CAAeO,WAAf,EAbrB,CAeUC,mBAfV,CAe+C,GAAIC,CAAAA,OAAJ,CAAY,SAAAC,OAAO,CAAI,CAChE,GAAMC,CAAAA,QAAQ,CAAGC,WAAW,CAAC,UAAM,CACjC,GAAIN,QAAQ,CAACO,YAAb,CAA2B,CACzBC,aAAa,CAACH,QAAD,CAAb,CACA,KAAI,CAACI,IAAL,CAAUpB,aAAV,EACAe,OAAO,GACR,CACF,CAN2B,CAMzB,GANyB,CAA5B,CAOD,CAR0C,CAf/C,wBAyB4BD,CAAAA,OAAO,CAACO,GAAR,CAAY,CAClCV,QAAQ,CAACW,MAAT,GAAkBC,IAAlB,CAAuB,SAACC,QAAD,QAAwBA,CAAAA,QAAQ,CAAC,CAAD,CAAhC,EAAvB,CADkC,CAElCX,mBAFkC,CAAZ,CAzB5B,mGAyBWY,OAzBX,wDA8BW,CAAEd,QAAQ,CAAE,KAAKN,SAAL,CAAeO,WAAf,EAAZ,CAA0CH,OAAO,CAAG,IAAD,CAAcA,OAAjE,CAA0EgB,OAAO,CAAPA,OAA1E,CA9BX,gLAAwC1B,sBAAxC","sourcesContent":["import { ChainId } from '@pantherswap-libs/sdk'\r\nimport { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector'\r\n\r\nexport const OVERLAY_READY = 'OVERLAY_READY'\r\n\r\ntype FormaticSupportedChains = Extract<ChainId, ChainId.MAINNET | ChainId.BSCTESTNET>\r\n\r\nconst CHAIN_ID_NETWORK_ARGUMENT: { readonly [chainId in FormaticSupportedChains]: string | undefined } = {\r\n  [ChainId.MAINNET]: undefined,\r\n  [ChainId.BSCTESTNET]: 'Bsc-testnet'\r\n}\r\n\r\nexport class FortmaticConnector extends FortmaticConnectorCore {\r\n  async activate() {\r\n    if (!this.fortmatic) {\r\n      const { default: Fortmatic } = await import('fortmatic')\r\n\r\n      const { apiKey, chainId } = this as any\r\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\r\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId as FormaticSupportedChains])\r\n      } else {\r\n        throw new Error(`Unsupported network ID: ${chainId}`)\r\n      }\r\n    }\r\n\r\n    const provider = this.fortmatic.getProvider()\r\n\r\n    const pollForOverlayReady: Promise<void> = new Promise(resolve => {\r\n      const interval = setInterval(() => {\r\n        if (provider.overlayReady) {\r\n          clearInterval(interval)\r\n          this.emit(OVERLAY_READY)\r\n          resolve()\r\n        }\r\n      }, 200)\r\n    })\r\n\r\n    const [account] = await Promise.all([\r\n      provider.enable().then((accounts: string[]) => accounts[0]),\r\n      pollForOverlayReady\r\n    ])\r\n\r\n    return { provider: this.fortmatic.getProvider(), chainId: (this as any).chainId, account }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}