{"ast":null,"code":"import { ChainId } from '@pantherswap-libs/sdk';\nimport { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector';\nexport const OVERLAY_READY = 'OVERLAY_READY';\nconst CHAIN_ID_NETWORK_ARGUMENT = {\n  [ChainId.MAINNET]: undefined,\n  [ChainId.BSCTESTNET]: 'Bsc-testnet'\n};\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const {\n        default: Fortmatic\n      } = await import('fortmatic');\n      const {\n        apiKey,\n        chainId\n      } = this;\n\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId]);\n      } else {\n        throw new Error(`Unsupported network ID: ${chainId}`);\n      }\n    }\n\n    const provider = this.fortmatic.getProvider();\n    const pollForOverlayReady = new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval);\n          this.emit(OVERLAY_READY);\n          resolve();\n        }\n      }, 200);\n    });\n    const [account] = await Promise.all([provider.enable().then(accounts => accounts[0]), pollForOverlayReady]);\n    return {\n      provider: this.fortmatic.getProvider(),\n      chainId: this.chainId,\n      account\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/projects/panther-frontend-dex1/src/connectors/Fortmatic.ts"],"names":["ChainId","FortmaticConnector","FortmaticConnectorCore","OVERLAY_READY","CHAIN_ID_NETWORK_ARGUMENT","MAINNET","undefined","BSCTESTNET","activate","fortmatic","default","Fortmatic","apiKey","chainId","Error","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlayReady","clearInterval","emit","account","all","enable","then","accounts"],"mappings":"AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,kBAAkB,IAAIC,sBAA/B,QAA6D,iCAA7D;AAEA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAIP,MAAMC,yBAAgG,GAAG;AACvG,GAACJ,OAAO,CAACK,OAAT,GAAmBC,SADoF;AAEvG,GAACN,OAAO,CAACO,UAAT,GAAsB;AAFiF,CAAzG;AAKA,OAAO,MAAMN,kBAAN,SAAiCC,sBAAjC,CAAwD;AAC7D,QAAMM,QAAN,GAAiB;AACf,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,YAAM;AAAEC,QAAAA,OAAO,EAAEC;AAAX,UAAyB,MAAM,OAAO,WAAP,CAArC;AAEA,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAsB,IAA5B;;AACA,UAAIA,OAAO,IAAIT,yBAAf,EAA0C;AACxC,aAAKK,SAAL,GAAiB,IAAIE,SAAJ,CAAcC,MAAd,EAAsBR,yBAAyB,CAACS,OAAD,CAA/C,CAAjB;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAW,2BAA0BD,OAAQ,EAA7C,CAAN;AACD;AACF;;AAED,UAAME,QAAQ,GAAG,KAAKN,SAAL,CAAeO,WAAf,EAAjB;AAEA,UAAMC,mBAAkC,GAAG,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAChE,YAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjC,YAAIN,QAAQ,CAACO,YAAb,EAA2B;AACzBC,UAAAA,aAAa,CAACH,QAAD,CAAb;AACA,eAAKI,IAAL,CAAUrB,aAAV;AACAgB,UAAAA,OAAO;AACR;AACF,OAN2B,EAMzB,GANyB,CAA5B;AAOD,KAR0C,CAA3C;AAUA,UAAM,CAACM,OAAD,IAAY,MAAMP,OAAO,CAACQ,GAAR,CAAY,CAClCX,QAAQ,CAACY,MAAT,GAAkBC,IAAlB,CAAwBC,QAAD,IAAwBA,QAAQ,CAAC,CAAD,CAAvD,CADkC,EAElCZ,mBAFkC,CAAZ,CAAxB;AAKA,WAAO;AAAEF,MAAAA,QAAQ,EAAE,KAAKN,SAAL,CAAeO,WAAf,EAAZ;AAA0CH,MAAAA,OAAO,EAAG,IAAD,CAAcA,OAAjE;AAA0EY,MAAAA;AAA1E,KAAP;AACD;;AA/B4D","sourcesContent":["import { ChainId } from '@pantherswap-libs/sdk'\r\nimport { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector'\r\n\r\nexport const OVERLAY_READY = 'OVERLAY_READY'\r\n\r\ntype FormaticSupportedChains = Extract<ChainId, ChainId.MAINNET | ChainId.BSCTESTNET>\r\n\r\nconst CHAIN_ID_NETWORK_ARGUMENT: { readonly [chainId in FormaticSupportedChains]: string | undefined } = {\r\n  [ChainId.MAINNET]: undefined,\r\n  [ChainId.BSCTESTNET]: 'Bsc-testnet'\r\n}\r\n\r\nexport class FortmaticConnector extends FortmaticConnectorCore {\r\n  async activate() {\r\n    if (!this.fortmatic) {\r\n      const { default: Fortmatic } = await import('fortmatic')\r\n\r\n      const { apiKey, chainId } = this as any\r\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\r\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId as FormaticSupportedChains])\r\n      } else {\r\n        throw new Error(`Unsupported network ID: ${chainId}`)\r\n      }\r\n    }\r\n\r\n    const provider = this.fortmatic.getProvider()\r\n\r\n    const pollForOverlayReady: Promise<void> = new Promise(resolve => {\r\n      const interval = setInterval(() => {\r\n        if (provider.overlayReady) {\r\n          clearInterval(interval)\r\n          this.emit(OVERLAY_READY)\r\n          resolve()\r\n        }\r\n      }, 200)\r\n    })\r\n\r\n    const [account] = await Promise.all([\r\n      provider.enable().then((accounts: string[]) => accounts[0]),\r\n      pollForOverlayReady\r\n    ])\r\n\r\n    return { provider: this.fortmatic.getProvider(), chainId: (this as any).chainId, account }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}