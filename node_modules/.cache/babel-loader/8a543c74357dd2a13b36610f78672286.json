{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Glossaries = void 0;\nconst core_1 = require(\"../core\");\n/**\n * Glossaries help to explain some specific terms or the ones often used in the project so that they can be properly and consistently translated.\n *\n * Use API to manage glossaries or specific terms.\n * Glossary export and import are asynchronous operations and shall be completed with sequence of API methods.\n */\nclass Glossaries extends core_1.CrowdinApi {\n  listGlossaries(options, deprecatedLimit, deprecatedOffset) {\n    if ((0, core_1.isOptionalNumber)(options, '0' in arguments)) {\n      options = {\n        groupId: options,\n        limit: deprecatedLimit,\n        offset: deprecatedOffset\n      };\n    }\n    let url = `${this.url}/glossaries`;\n    url = this.addQueryParam(url, 'groupId', options.groupId);\n    return this.getList(url, options.limit, options.offset);\n  }\n  /**\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.post\n   */\n  addGlossary(request) {\n    const url = `${this.url}/glossaries`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.get\n   */\n  getGlossary(glossaryId) {\n    const url = `${this.url}/glossaries/${glossaryId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.delete\n   */\n  deleteGlossary(glossaryId) {\n    const url = `${this.url}/glossaries/${glossaryId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.patch\n   */\n  editGlossary(glossaryId, request) {\n    const url = `${this.url}/glossaries/${glossaryId}`;\n    return this.patch(url, request, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.exports.post\n   */\n  exportGlossary(glossaryId, request) {\n    const url = `${this.url}/glossaries/${glossaryId}/exports`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param exportId export identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.exports.get\n   */\n  checkGlossaryExportStatus(glossaryId, exportId) {\n    const url = `${this.url}/glossaries/${glossaryId}/exports/${exportId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param exportId export identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.exports.download.download\n   */\n  downloadGlossary(glossaryId, exportId) {\n    const url = `${this.url}/glossaries/${glossaryId}/exports/${exportId}/download`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.imports.post\n   */\n  importGlossaryFile(glossaryId, request) {\n    const url = `${this.url}/glossaries/${glossaryId}/imports`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param importId import identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.imports.get\n   */\n  checkGlossaryImportStatus(glossaryId, importId) {\n    const url = `${this.url}/glossaries/${glossaryId}/imports/${importId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  listTerms(glossaryId, options, deprecatedLimit, deprecatedOffset, deprecatedLanguageId, deprecatedTranslationOfTermId, deprecatedConceptId) {\n    let url = `${this.url}/glossaries/${glossaryId}/terms`;\n    if ((0, core_1.isOptionalNumber)(options, '1' in arguments)) {\n      options = {\n        userId: options,\n        limit: deprecatedLimit,\n        offset: deprecatedOffset,\n        languageId: deprecatedLanguageId,\n        translationOfTermId: deprecatedTranslationOfTermId,\n        conceptId: deprecatedConceptId\n      };\n    }\n    url = this.addQueryParam(url, 'userId', options.userId);\n    url = this.addQueryParam(url, 'languageId', options.languageId);\n    url = this.addQueryParam(url, 'translationOfTermId', options.translationOfTermId);\n    url = this.addQueryParam(url, 'conceptId', options.conceptId);\n    return this.getList(url, options.limit, options.offset);\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.terms.post\n   */\n  addTerm(glossaryId, request) {\n    const url = `${this.url}/glossaries/${glossaryId}/terms`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  clearGlossary(glossaryId, options, deprecatedTranslationOfTermId, deprecatedConceptId) {\n    if ((0, core_1.isOptionalNumber)(options, '1' in arguments)) {\n      options = {\n        languageId: options,\n        translationOfTermId: deprecatedTranslationOfTermId,\n        conceptId: deprecatedConceptId\n      };\n    }\n    let url = `${this.url}/glossaries/${glossaryId}/terms`;\n    url = this.addQueryParam(url, 'languageId', options.languageId);\n    url = this.addQueryParam(url, 'translationOfTermId', options.translationOfTermId);\n    url = this.addQueryParam(url, 'conceptId', options.conceptId);\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param termId term identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.terms.get\n   */\n  getTerm(glossaryId, termId) {\n    const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param termId term identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.terms.delete\n   */\n  deleteTerm(glossaryId, termId) {\n    const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param termId term identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.terms.patch\n   */\n  editTerm(glossaryId, termId, request) {\n    const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n    return this.patch(url, request, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param options optional parameters for the request\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.concepts.getMany\n   */\n  listConcepts(glossaryId, options) {\n    const url = `${this.url}/glossaries/${glossaryId}/concepts`;\n    return this.getList(url, options === null || options === void 0 ? void 0 : options.limit, options === null || options === void 0 ? void 0 : options.offset);\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param conceptId concept identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.concepts.get\n   */\n  getConcept(glossaryId, conceptId) {\n    const url = `${this.url}/glossaries/${glossaryId}/concepts/${conceptId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param conceptId concept identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.concepts.put\n   */\n  updateConcept(glossaryId, conceptId, request) {\n    const url = `${this.url}/glossaries/${glossaryId}/concepts/${conceptId}`;\n    return this.put(url, request, this.defaultConfig());\n  }\n  /**\n   * @param glossaryId glossary identifier\n   * @param conceptId concept identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.concepts.delete\n   */\n  deleteConcept(glossaryId, conceptId) {\n    const url = `${this.url}/glossaries/${glossaryId}/concepts/${conceptId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.glossaries.concordance.post\n   */\n  concordanceSearch(projectId, request) {\n    const url = `${this.url}/projects/${projectId}/glossaries/concordance`;\n    return this.post(url, request, this.defaultConfig());\n  }\n}\nexports.Glossaries = Glossaries;","map":{"version":3,"names":["Object","defineProperty","exports","value","Glossaries","core_1","require","CrowdinApi","listGlossaries","options","deprecatedLimit","deprecatedOffset","isOptionalNumber","arguments","groupId","limit","offset","url","addQueryParam","getList","addGlossary","request","post","defaultConfig","getGlossary","glossaryId","get","deleteGlossary","delete","editGlossary","patch","exportGlossary","checkGlossaryExportStatus","exportId","downloadGlossary","importGlossaryFile","checkGlossaryImportStatus","importId","listTerms","deprecatedLanguageId","deprecatedTranslationOfTermId","deprecatedConceptId","userId","languageId","translationOfTermId","conceptId","addTerm","clearGlossary","getTerm","termId","deleteTerm","editTerm","listConcepts","getConcept","updateConcept","put","deleteConcept","concordanceSearch","projectId"],"sources":["C:/projects/panther-frontend-dex1/node_modules/@crowdin/crowdin-api-client/out/glossaries/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Glossaries = void 0;\nconst core_1 = require(\"../core\");\n/**\n * Glossaries help to explain some specific terms or the ones often used in the project so that they can be properly and consistently translated.\n *\n * Use API to manage glossaries or specific terms.\n * Glossary export and import are asynchronous operations and shall be completed with sequence of API methods.\n */\nclass Glossaries extends core_1.CrowdinApi {\n    listGlossaries(options, deprecatedLimit, deprecatedOffset) {\n        if ((0, core_1.isOptionalNumber)(options, '0' in arguments)) {\n            options = { groupId: options, limit: deprecatedLimit, offset: deprecatedOffset };\n        }\n        let url = `${this.url}/glossaries`;\n        url = this.addQueryParam(url, 'groupId', options.groupId);\n        return this.getList(url, options.limit, options.offset);\n    }\n    /**\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.post\n     */\n    addGlossary(request) {\n        const url = `${this.url}/glossaries`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.get\n     */\n    getGlossary(glossaryId) {\n        const url = `${this.url}/glossaries/${glossaryId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.delete\n     */\n    deleteGlossary(glossaryId) {\n        const url = `${this.url}/glossaries/${glossaryId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.patch\n     */\n    editGlossary(glossaryId, request) {\n        const url = `${this.url}/glossaries/${glossaryId}`;\n        return this.patch(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.exports.post\n     */\n    exportGlossary(glossaryId, request) {\n        const url = `${this.url}/glossaries/${glossaryId}/exports`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param exportId export identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.exports.get\n     */\n    checkGlossaryExportStatus(glossaryId, exportId) {\n        const url = `${this.url}/glossaries/${glossaryId}/exports/${exportId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param exportId export identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.exports.download.download\n     */\n    downloadGlossary(glossaryId, exportId) {\n        const url = `${this.url}/glossaries/${glossaryId}/exports/${exportId}/download`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.imports.post\n     */\n    importGlossaryFile(glossaryId, request) {\n        const url = `${this.url}/glossaries/${glossaryId}/imports`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param importId import identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.imports.get\n     */\n    checkGlossaryImportStatus(glossaryId, importId) {\n        const url = `${this.url}/glossaries/${glossaryId}/imports/${importId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    listTerms(glossaryId, options, deprecatedLimit, deprecatedOffset, deprecatedLanguageId, deprecatedTranslationOfTermId, deprecatedConceptId) {\n        let url = `${this.url}/glossaries/${glossaryId}/terms`;\n        if ((0, core_1.isOptionalNumber)(options, '1' in arguments)) {\n            options = {\n                userId: options,\n                limit: deprecatedLimit,\n                offset: deprecatedOffset,\n                languageId: deprecatedLanguageId,\n                translationOfTermId: deprecatedTranslationOfTermId,\n                conceptId: deprecatedConceptId,\n            };\n        }\n        url = this.addQueryParam(url, 'userId', options.userId);\n        url = this.addQueryParam(url, 'languageId', options.languageId);\n        url = this.addQueryParam(url, 'translationOfTermId', options.translationOfTermId);\n        url = this.addQueryParam(url, 'conceptId', options.conceptId);\n        return this.getList(url, options.limit, options.offset);\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.terms.post\n     */\n    addTerm(glossaryId, request) {\n        const url = `${this.url}/glossaries/${glossaryId}/terms`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    clearGlossary(glossaryId, options, deprecatedTranslationOfTermId, deprecatedConceptId) {\n        if ((0, core_1.isOptionalNumber)(options, '1' in arguments)) {\n            options = {\n                languageId: options,\n                translationOfTermId: deprecatedTranslationOfTermId,\n                conceptId: deprecatedConceptId,\n            };\n        }\n        let url = `${this.url}/glossaries/${glossaryId}/terms`;\n        url = this.addQueryParam(url, 'languageId', options.languageId);\n        url = this.addQueryParam(url, 'translationOfTermId', options.translationOfTermId);\n        url = this.addQueryParam(url, 'conceptId', options.conceptId);\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param termId term identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.terms.get\n     */\n    getTerm(glossaryId, termId) {\n        const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param termId term identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.terms.delete\n     */\n    deleteTerm(glossaryId, termId) {\n        const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param termId term identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.terms.patch\n     */\n    editTerm(glossaryId, termId, request) {\n        const url = `${this.url}/glossaries/${glossaryId}/terms/${termId}`;\n        return this.patch(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param options optional parameters for the request\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.concepts.getMany\n     */\n    listConcepts(glossaryId, options) {\n        const url = `${this.url}/glossaries/${glossaryId}/concepts`;\n        return this.getList(url, options === null || options === void 0 ? void 0 : options.limit, options === null || options === void 0 ? void 0 : options.offset);\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param conceptId concept identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.concepts.get\n     */\n    getConcept(glossaryId, conceptId) {\n        const url = `${this.url}/glossaries/${glossaryId}/concepts/${conceptId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param conceptId concept identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.concepts.put\n     */\n    updateConcept(glossaryId, conceptId, request) {\n        const url = `${this.url}/glossaries/${glossaryId}/concepts/${conceptId}`;\n        return this.put(url, request, this.defaultConfig());\n    }\n    /**\n     * @param glossaryId glossary identifier\n     * @param conceptId concept identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.glossaries.concepts.delete\n     */\n    deleteConcept(glossaryId, conceptId) {\n        const url = `${this.url}/glossaries/${glossaryId}/concepts/${conceptId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.glossaries.concordance.post\n     */\n    concordanceSearch(projectId, request) {\n        const url = `${this.url}/projects/${projectId}/glossaries/concordance`;\n        return this.post(url, request, this.defaultConfig());\n    }\n}\nexports.Glossaries = Glossaries;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}