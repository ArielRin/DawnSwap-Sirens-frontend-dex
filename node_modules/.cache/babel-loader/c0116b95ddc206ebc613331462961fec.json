{"ast":null,"code":"import{Fragment as _Fragment}from\"react/jsx-runtime\";import _slicedToArray from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from'react';import{TradeType}from'@pantherswap-libs/sdk';import{Card,CardBody,Text}from'@pantherswap-libs/uikit';import{Field}from'../../state/swap/actions';import{useUserSlippageTolerance}from'../../state/user/hooks';import{computeSlippageAdjustedAmounts,computeTradePriceBreakdown}from'../../utils/prices';import{AutoColumn}from'../Column';import QuestionHelper from'../QuestionHelper';import{RowBetween,RowFixed}from'../Row';import FormattedPriceImpact from'./FormattedPriceImpact';import{SectionBreak}from'./styleds';import SwapRoute from'./SwapRoute';function TradeSummary(_ref){var _ref2,_slippageAdjustedAmou,_ref3,_slippageAdjustedAmou2;var trade=_ref.trade,allowedSlippage=_ref.allowedSlippage;var _computeTradePriceBre=computeTradePriceBreakdown(trade),priceImpactWithoutFee=_computeTradePriceBre.priceImpactWithoutFee,realizedLPFee=_computeTradePriceBre.realizedLPFee;var isExactIn=trade.tradeType===TradeType.EXACT_INPUT;var slippageAdjustedAmounts=computeSlippageAdjustedAmounts(trade,allowedSlippage);return/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsxs(RowBetween,{children:[/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:isExactIn?'Minimum received':'Maximum sold'}),/*#__PURE__*/_jsx(QuestionHelper,{text:\"Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.\"})]}),/*#__PURE__*/_jsx(RowFixed,{children:/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:isExactIn?(_ref2=\"\".concat((_slippageAdjustedAmou=slippageAdjustedAmounts[Field.OUTPUT])===null||_slippageAdjustedAmou===void 0?void 0:_slippageAdjustedAmou.toSignificant(4),\" \").concat(trade.outputAmount.currency.symbol))!==null&&_ref2!==void 0?_ref2:'-':(_ref3=\"\".concat((_slippageAdjustedAmou2=slippageAdjustedAmounts[Field.INPUT])===null||_slippageAdjustedAmou2===void 0?void 0:_slippageAdjustedAmou2.toSignificant(4),\" \").concat(trade.inputAmount.currency.symbol))!==null&&_ref3!==void 0?_ref3:'-'})})]}),/*#__PURE__*/_jsxs(RowBetween,{children:[/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:\"Price Impact\"}),/*#__PURE__*/_jsx(QuestionHelper,{text:\"The difference between the market price and estimated price due to trade size.\"})]}),/*#__PURE__*/_jsx(FormattedPriceImpact,{priceImpact:priceImpactWithoutFee})]}),/*#__PURE__*/_jsxs(RowBetween,{children:[/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:\"Liquidity Provider Fee\"}),/*#__PURE__*/_jsx(QuestionHelper,{text:\"For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the Treasure-eeey!\"})]}),/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:realizedLPFee?\"\".concat(realizedLPFee.toSignificant(4),\" \").concat(trade.inputAmount.currency.symbol):'-'})]})]})});}export function AdvancedSwapDetails(_ref4){var trade=_ref4.trade;var _useUserSlippageToler=useUserSlippageTolerance(),_useUserSlippageToler2=_slicedToArray(_useUserSlippageToler,1),allowedSlippage=_useUserSlippageToler2[0];var showRoute=Boolean(trade&&trade.route.path.length>2);return/*#__PURE__*/_jsx(AutoColumn,{gap:\"md\",children:trade&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(TradeSummary,{trade:trade,allowedSlippage:allowedSlippage}),showRoute&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(SectionBreak,{style:{margin:'0 8px',maxWidth:'100%',width:'auto',marginTop:'16px'}}),/*#__PURE__*/_jsxs(AutoColumn,{style:{padding:'0 8px'},children:[/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:\"Route\"}),/*#__PURE__*/_jsx(QuestionHelper,{text:\"Routing through these tokens resulted in the best price for your trade.\"})]}),/*#__PURE__*/_jsx(SwapRoute,{trade:trade})]})]})]})});}","map":{"version":3,"sources":["C:/projects/panther-frontend-dex1/src/components/swap/AdvancedSwapDetails.tsx"],"names":["React","TradeType","Card","CardBody","Text","Field","useUserSlippageTolerance","computeSlippageAdjustedAmounts","computeTradePriceBreakdown","AutoColumn","QuestionHelper","RowBetween","RowFixed","FormattedPriceImpact","SectionBreak","SwapRoute","TradeSummary","trade","allowedSlippage","priceImpactWithoutFee","realizedLPFee","isExactIn","tradeType","EXACT_INPUT","slippageAdjustedAmounts","OUTPUT","toSignificant","outputAmount","currency","symbol","INPUT","inputAmount","AdvancedSwapDetails","showRoute","Boolean","route","path","length","margin","maxWidth","width","marginTop","padding"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Trade, TradeType } from '@pantherswap-libs/sdk'\r\nimport { Card, CardBody, Text } from '@pantherswap-libs/uikit'\r\nimport { Field } from '../../state/swap/actions'\r\nimport { useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown } from '../../utils/prices'\r\nimport { AutoColumn } from '../Column'\r\nimport QuestionHelper from '../QuestionHelper'\r\nimport { RowBetween, RowFixed } from '../Row'\r\nimport FormattedPriceImpact from './FormattedPriceImpact'\r\nimport { SectionBreak } from './styleds'\r\nimport SwapRoute from './SwapRoute'\r\n\r\nfunction TradeSummary({ trade, allowedSlippage }: { trade: Trade; allowedSlippage: number }) {\r\n  const { priceImpactWithoutFee, realizedLPFee } = computeTradePriceBreakdown(trade)\r\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT\r\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage)\r\n\r\n  return (\r\n    <Card>\r\n      <CardBody>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">{isExactIn ? 'Minimum received' : 'Maximum sold'}</Text>\r\n            <QuestionHelper text=\"Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.\" />\r\n          </RowFixed>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">\r\n              {isExactIn\r\n                ? `${slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4)} ${trade.outputAmount.currency.symbol}` ??\r\n                  '-'\r\n                : `${slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4)} ${trade.inputAmount.currency.symbol}` ??\r\n                  '-'}\r\n            </Text>\r\n          </RowFixed>\r\n        </RowBetween>\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">Price Impact</Text>\r\n            <QuestionHelper text=\"The difference between the market price and estimated price due to trade size.\" />\r\n          </RowFixed>\r\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\r\n        </RowBetween>\r\n\r\n        <RowBetween>\r\n          <RowFixed>\r\n            <Text fontSize=\"14px\">Liquidity Provider Fee</Text>\r\n            <QuestionHelper text=\"For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the Treasure-eeey!\" />\r\n          </RowFixed>\r\n          <Text fontSize=\"14px\">\r\n            {realizedLPFee ? `${realizedLPFee.toSignificant(4)} ${trade.inputAmount.currency.symbol}` : '-'}\r\n          </Text>\r\n        </RowBetween>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport interface AdvancedSwapDetailsProps {\r\n  trade?: Trade\r\n}\r\n\r\nexport function AdvancedSwapDetails({ trade }: AdvancedSwapDetailsProps) {\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const showRoute = Boolean(trade && trade.route.path.length > 2)\r\n\r\n  return (\r\n    <AutoColumn gap=\"md\">\r\n      {trade && (\r\n        <>\r\n          <TradeSummary trade={trade} allowedSlippage={allowedSlippage} />\r\n          {showRoute && (\r\n            <>\r\n              <SectionBreak style={{ margin: '0 8px', maxWidth: '100%', width: 'auto', marginTop: '16px' }} />\r\n              <AutoColumn style={{ padding: '0 8px' }}>\r\n                <RowFixed>\r\n                  <Text fontSize=\"14px\">Route</Text>\r\n                  <QuestionHelper text=\"Routing through these tokens resulted in the best price for your trade.\" />\r\n                </RowFixed>\r\n                <SwapRoute trade={trade} />\r\n              </AutoColumn>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </AutoColumn>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}