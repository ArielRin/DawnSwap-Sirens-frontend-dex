{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\n// eslint-disable-next-line import/no-unresolved\n\nimport { useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { injected } from '../connectors';\nimport { NetworkContextName } from '../constants';\nexport function useActiveWeb3React() {\n  _s();\n  const context = useWeb3ReactCore();\n  const contextNetwork = useWeb3ReactCore(NetworkContextName);\n  return context.active ? context : contextNetwork;\n}\n_s(useActiveWeb3React, \"WFPFKE/y5H/nwl1Zbqr6M/3MM8c=\", false, function () {\n  return [useWeb3ReactCore, useWeb3ReactCore];\n});\nexport function useEagerConnect() {\n  _s2();\n  const {\n    activate,\n    active\n  } = useWeb3ReactCore(); // specifically using useWeb3ReactCore because of what this hook does\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      const hasSignedIn = window.localStorage.getItem('accountStatus');\n      if (isAuthorized && hasSignedIn) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else if (isMobile && window.ethereum && hasSignedIn) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n\n/**\r\n * Use for network and injected - logs user in\r\n * and out after checking what network theyre on\r\n */\n_s2(useEagerConnect, \"Bhmb87TsYv+f2WbPhdXmj7sGsFM=\", false, function () {\n  return [useWeb3ReactCore];\n});\nexport function useInactiveListener() {\n  _s3();\n  let suppress = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3ReactCore(); // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch(e => {\n          console.error('Failed to activate after chain changed', e);\n        });\n      };\n      const handleAccountsChanged = accounts => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(e => {\n            console.error('Failed to activate after accounts changed', e);\n          });\n        }\n      };\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        }\n      };\n    }\n    return undefined;\n  }, [active, error, suppress, activate]);\n}\n_s3(useInactiveListener, \"jN4RZ0OvqgaQw3T0lu1/qJ1z0K8=\", false, function () {\n  return [useWeb3ReactCore];\n});","map":{"version":3,"names":["useWeb3React","useWeb3ReactCore","useEffect","useState","isMobile","injected","NetworkContextName","useActiveWeb3React","_s","context","contextNetwork","active","useEagerConnect","_s2","activate","tried","setTried","isAuthorized","then","hasSignedIn","window","localStorage","getItem","undefined","catch","ethereum","useInactiveListener","_s3","suppress","arguments","length","error","on","handleChainChanged","e","console","handleAccountsChanged","accounts","removeListener"],"sources":["C:/projects/panther-frontend-dex1/src/hooks/index.ts"],"sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\r\nimport { ChainId } from '@pantherswap-libs/sdk'\r\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\r\nimport { useEffect, useState } from 'react'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { injected } from '../connectors'\r\nimport { NetworkContextName } from '../constants'\r\n\r\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\r\n  const context = useWeb3ReactCore<Web3Provider>()\r\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName)\r\n  return context.active ? context : contextNetwork\r\n}\r\n\r\nexport function useEagerConnect() {\r\n  const { activate, active } = useWeb3ReactCore() // specifically using useWeb3ReactCore because of what this hook does\r\n  const [tried, setTried] = useState(false)\r\n\r\n  useEffect(() => {\r\n    injected.isAuthorized().then((isAuthorized) => {\r\n      const hasSignedIn = window.localStorage.getItem('accountStatus')\r\n      if (isAuthorized && hasSignedIn) {\r\n        activate(injected, undefined, true).catch(() => {\r\n          setTried(true)\r\n        })\r\n      } else if (isMobile && window.ethereum && hasSignedIn) {\r\n        activate(injected, undefined, true).catch(() => {\r\n          setTried(true)\r\n        })\r\n      } else {\r\n        setTried(true)\r\n      }\r\n    })\r\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\r\n\r\n  // if the connection worked, wait until we get confirmation of that to flip the flag\r\n  useEffect(() => {\r\n    if (active) {\r\n      setTried(true)\r\n    }\r\n  }, [active])\r\n\r\n  return tried\r\n}\r\n\r\n/**\r\n * Use for network and injected - logs user in\r\n * and out after checking what network theyre on\r\n */\r\nexport function useInactiveListener(suppress = false) {\r\n  const { active, error, activate } = useWeb3ReactCore() // specifically using useWeb3React because of what this hook does\r\n\r\n  useEffect(() => {\r\n    const { ethereum } = window\r\n\r\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\r\n      const handleChainChanged = () => {\r\n        // eat errors\r\n        activate(injected, undefined, true).catch((e) => {\r\n          console.error('Failed to activate after chain changed', e)\r\n        })\r\n      }\r\n\r\n      const handleAccountsChanged = (accounts: string[]) => {\r\n        if (accounts.length > 0) {\r\n          // eat errors\r\n          activate(injected, undefined, true).catch((e) => {\r\n            console.error('Failed to activate after accounts changed', e)\r\n          })\r\n        }\r\n      }\r\n\r\n      ethereum.on('chainChanged', handleChainChanged)\r\n      ethereum.on('accountsChanged', handleAccountsChanged)\r\n\r\n      return () => {\r\n        if (ethereum.removeListener) {\r\n          ethereum.removeListener('chainChanged', handleChainChanged)\r\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\r\n        }\r\n      }\r\n    }\r\n    return undefined\r\n  }, [active, error, suppress, activate])\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}