{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport { parseUnits } from '@ethersproject/units';\nimport { CurrencyAmount, ETHER, JSBI, Token, TokenAmount } from '@pantherswap-libs/sdk';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useENS from '../../hooks/useENS';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useCurrency } from '../../hooks/Tokens';\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades';\nimport useParsedQueryString from '../../hooks/useParsedQueryString';\nimport { isAddress } from '../../utils';\nimport { useCurrencyBalances } from '../wallet/hooks';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nimport { useUserSlippageTolerance } from '../user/hooks';\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices';\nexport function useSwapState() {\n  _s();\n  return useSelector(state => state.swap);\n}\n_s(useSwapState, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nexport function useSwapActionHandlers() {\n  _s2();\n  const dispatch = useDispatch();\n  const onCurrencySelection = useCallback((field, currency) => {\n    dispatch(selectCurrency({\n      field,\n      currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'ETH' : ''\n    }));\n  }, [dispatch]);\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies());\n  }, [dispatch]);\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  const onChangeRecipient = useCallback(recipient => {\n    dispatch(setRecipient({\n      recipient\n    }));\n  }, [dispatch]);\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient\n  };\n}\n\n// try to parse a user entered amount for a given token\n_s2(useSwapActionHandlers, \"oIW3xZhV8GZLW5UVB2t9AN9x/ck=\", false, function () {\n  return [useDispatch];\n});\nexport function tryParseAmount(value, currency) {\n  if (!value || !currency) {\n    return undefined;\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString();\n    if (typedValueParsed !== '0') {\n      return currency instanceof Token ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed)) : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed));\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.info(`Failed to parse input amount: \"${value}\"`, error);\n  }\n  // necessary for all paths to return a value\n  return undefined;\n}\nconst BAD_RECIPIENT_ADDRESSES = ['0xBCfCcbde45cE874adCB698cC183deBcF17952812',\n// v2 factory\n'0xf164fC0Ec4E93095b804a4795bBe1e041497b92a',\n// v2 router 01\n'0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F',\n// v2 router 02\n'0x10ed43c718714eb63d5aa57b78b54704e256024e',\n// v2-2 router 02\n'0xca143ce32fe78f1f7019d7d551a6402fc5350c73',\n// v2-2 factory\n'0x670f55c6284c629c23baE99F585e3f17E8b9FC31',\n// panther factory\n'0x16eE9c5C05E22665A144C1a09A5fb8bF94F6Bb3B' // panther router\n];\n\n/**\r\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\r\n * @param trade to check for the given address\r\n * @param checksummedAddress address to check in the pairs and tokens\r\n */\nfunction involvesAddress(trade, checksummedAddress) {\n  return trade.route.path.some(token => token.address === checksummedAddress) || trade.route.pairs.some(pair => pair.liquidityToken.address === checksummedAddress);\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo() {\n  _s3();\n  var _ref, _ref2;\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    recipient\n  } = useSwapState();\n  const inputCurrency = useCurrency(inputCurrencyId);\n  const outputCurrency = useCurrency(outputCurrencyId);\n  const recipientLookup = useENS(recipient !== null && recipient !== void 0 ? recipient : undefined);\n  const to = (_ref = recipient === null ? account : recipientLookup.address) !== null && _ref !== void 0 ? _ref : null;\n  const relevantTokenBalances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, [inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined]);\n  const isExactIn = independentField === Field.INPUT;\n  const parsedAmount = tryParseAmount(typedValue, (_ref2 = isExactIn ? inputCurrency : outputCurrency) !== null && _ref2 !== void 0 ? _ref2 : undefined);\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined);\n  const bestTradeExactOut = useTradeExactOut(inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined, !isExactIn ? parsedAmount : undefined);\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut;\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1]\n  };\n  const currencies = {\n    [Field.INPUT]: inputCurrency !== null && inputCurrency !== void 0 ? inputCurrency : undefined,\n    [Field.OUTPUT]: outputCurrency !== null && outputCurrency !== void 0 ? outputCurrency : undefined\n  };\n  let inputError;\n  if (!account) {\n    inputError = 'Connect Wallet';\n  }\n  if (!parsedAmount) {\n    var _inputError;\n    inputError = (_inputError = inputError) !== null && _inputError !== void 0 ? _inputError : 'Enter an amount';\n  }\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    var _inputError2;\n    inputError = (_inputError2 = inputError) !== null && _inputError2 !== void 0 ? _inputError2 : 'Select a token';\n  }\n  const formattedTo = isAddress(to);\n  if (!to || !formattedTo) {\n    var _inputError3;\n    inputError = (_inputError3 = inputError) !== null && _inputError3 !== void 0 ? _inputError3 : 'Enter a recipient';\n  } else if (BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 || bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo) || bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo)) {\n    var _inputError4;\n    inputError = (_inputError4 = inputError) !== null && _inputError4 !== void 0 ? _inputError4 : 'Invalid recipient';\n  }\n  const [allowedSlippage] = useUserSlippageTolerance();\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage);\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null];\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = `Insufficient ${amountIn.currency.symbol} balance`;\n  }\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    v2Trade: v2Trade !== null && v2Trade !== void 0 ? v2Trade : undefined,\n    inputError\n  };\n}\n_s3(useDerivedSwapInfo, \"tnZFvZulNjT90xoxjnXe3lTpUPQ=\", false, function () {\n  return [useActiveWeb3React, useSwapState, useCurrency, useCurrency, useENS, useCurrencyBalances, useTradeExactIn, useTradeExactOut, useUserSlippageTolerance];\n});\nfunction parseCurrencyFromURLParameter(urlParam) {\n  var _ETH;\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam);\n    if (valid) return valid;\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH';\n    if (valid === false) return 'ETH';\n  }\n  return (_ETH = 'ETH') !== null && _ETH !== void 0 ? _ETH : '';\n}\nfunction parseTokenAmountURLParameter(urlParam) {\n  // eslint-disable-next-line no-restricted-globals\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : '';\n}\nfunction parseIndependentFieldURLParameter(urlParam) {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT;\n}\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/;\nfunction validatedRecipient(recipient) {\n  if (typeof recipient !== 'string') return null;\n  const address = isAddress(recipient);\n  if (address) return address;\n  if (ENS_NAME_REGEX.test(recipient)) return recipient;\n  if (ADDRESS_REGEX.test(recipient)) return recipient;\n  return null;\n}\nexport function queryParametersToSwapState(parsedQs) {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency);\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency);\n  if (inputCurrency === outputCurrency) {\n    if (typeof parsedQs.outputCurrency === 'string') {\n      inputCurrency = '';\n    } else {\n      outputCurrency = '';\n    }\n  }\n  const recipient = validatedRecipient(parsedQs.recipient);\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient\n  };\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch() {\n  _s4();\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const dispatch = useDispatch();\n  const parsedQs = useParsedQueryString();\n  const [result, setResult] = useState();\n  useEffect(() => {\n    if (!chainId) return;\n    const parsed = queryParametersToSwapState(parsedQs);\n    dispatch(replaceSwapState({\n      typedValue: parsed.typedValue,\n      field: parsed.independentField,\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n      recipient: parsed.recipient\n    }));\n    setResult({\n      inputCurrencyId: parsed[Field.INPUT].currencyId,\n      outputCurrencyId: parsed[Field.OUTPUT].currencyId\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId]);\n  return result;\n}\n_s4(useDefaultsFromURLSearch, \"2CnDlZ82rqfhhBu4OPGgJbxv0gQ=\", false, function () {\n  return [useActiveWeb3React, useDispatch, useParsedQueryString];\n});","map":{"version":3,"names":["parseUnits","CurrencyAmount","ETHER","JSBI","Token","TokenAmount","useCallback","useEffect","useState","useDispatch","useSelector","useENS","useActiveWeb3React","useCurrency","useTradeExactIn","useTradeExactOut","useParsedQueryString","isAddress","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useUserSlippageTolerance","computeSlippageAdjustedAmounts","useSwapState","_s","state","swap","useSwapActionHandlers","_s2","dispatch","onCurrencySelection","field","currency","currencyId","address","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","undefined","typedValueParsed","decimals","toString","BigInt","ether","error","console","info","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","route","path","some","token","pairs","pair","liquidityToken","useDerivedSwapInfo","_s3","_ref","_ref2","account","independentField","INPUT","inputCurrencyId","OUTPUT","outputCurrencyId","inputCurrency","outputCurrency","recipientLookup","to","relevantTokenBalances","isExactIn","parsedAmount","bestTradeExactIn","bestTradeExactOut","v2Trade","currencyBalances","currencies","inputError","_inputError","_inputError2","formattedTo","_inputError3","indexOf","_inputError4","allowedSlippage","slippageAdjustedAmounts","balanceIn","amountIn","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","_ETH","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","_s4","chainId","result","setResult","parsed"],"sources":["C:/projects/panther-frontend-dex1/src/state/swap/hooks.ts"],"sourcesContent":["import { parseUnits } from '@ethersproject/units'\r\nimport { Currency, CurrencyAmount, ETHER, JSBI, Token, TokenAmount, Trade } from '@pantherswap-libs/sdk'\r\nimport { ParsedQs } from 'qs'\r\nimport { useCallback, useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useENS from '../../hooks/useENS'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { useTradeExactIn, useTradeExactOut } from '../../hooks/Trades'\r\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\r\nimport { isAddress } from '../../utils'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { useCurrencyBalances } from '../wallet/hooks'\r\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\r\nimport { SwapState } from './reducer'\r\n\r\nimport { useUserSlippageTolerance } from '../user/hooks'\r\nimport { computeSlippageAdjustedAmounts } from '../../utils/prices'\r\n\r\nexport function useSwapState(): AppState['swap'] {\r\n  return useSelector<AppState, AppState['swap']>((state) => state.swap)\r\n}\r\n\r\nexport function useSwapActionHandlers(): {\r\n  onCurrencySelection: (field: Field, currency: Currency) => void\r\n  onSwitchTokens: () => void\r\n  onUserInput: (field: Field, typedValue: string) => void\r\n  onChangeRecipient: (recipient: string | null) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const onCurrencySelection = useCallback(\r\n    (field: Field, currency: Currency) => {\r\n      dispatch(\r\n        selectCurrency({\r\n          field,\r\n          currencyId: currency instanceof Token ? currency.address : currency === ETHER ? 'ETH' : '',\r\n        })\r\n      )\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const onSwitchTokens = useCallback(() => {\r\n    dispatch(switchCurrencies())\r\n  }, [dispatch])\r\n\r\n  const onUserInput = useCallback(\r\n    (field: Field, typedValue: string) => {\r\n      dispatch(typeInput({ field, typedValue }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  const onChangeRecipient = useCallback(\r\n    (recipient: string | null) => {\r\n      dispatch(setRecipient({ recipient }))\r\n    },\r\n    [dispatch]\r\n  )\r\n\r\n  return {\r\n    onSwitchTokens,\r\n    onCurrencySelection,\r\n    onUserInput,\r\n    onChangeRecipient,\r\n  }\r\n}\r\n\r\n// try to parse a user entered amount for a given token\r\nexport function tryParseAmount(value?: string, currency?: Currency): CurrencyAmount | undefined {\r\n  if (!value || !currency) {\r\n    return undefined\r\n  }\r\n  try {\r\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\r\n    if (typedValueParsed !== '0') {\r\n      return currency instanceof Token\r\n        ? new TokenAmount(currency, JSBI.BigInt(typedValueParsed))\r\n        : CurrencyAmount.ether(JSBI.BigInt(typedValueParsed))\r\n    }\r\n  } catch (error) {\r\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\r\n    console.info(`Failed to parse input amount: \"${value}\"`, error)\r\n  }\r\n  // necessary for all paths to return a value\r\n  return undefined\r\n}\r\n\r\nconst BAD_RECIPIENT_ADDRESSES: string[] = [\r\n  '0xBCfCcbde45cE874adCB698cC183deBcF17952812', // v2 factory\r\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a', // v2 router 01\r\n  '0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F', // v2 router 02\r\n  '0x10ed43c718714eb63d5aa57b78b54704e256024e', // v2-2 router 02\r\n  '0xca143ce32fe78f1f7019d7d551a6402fc5350c73', // v2-2 factory\r\n  '0x670f55c6284c629c23baE99F585e3f17E8b9FC31', // panther factory\r\n  '0x16eE9c5C05E22665A144C1a09A5fb8bF94F6Bb3B', // panther router\r\n]\r\n\r\n/**\r\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\r\n * @param trade to check for the given address\r\n * @param checksummedAddress address to check in the pairs and tokens\r\n */\r\nfunction involvesAddress(trade: Trade, checksummedAddress: string): boolean {\r\n  return (\r\n    trade.route.path.some((token) => token.address === checksummedAddress) ||\r\n    trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\r\n  )\r\n}\r\n\r\n// from the current swap inputs, compute the best trade and return it.\r\nexport function useDerivedSwapInfo(): {\r\n  currencies: { [field in Field]?: Currency }\r\n  currencyBalances: { [field in Field]?: CurrencyAmount }\r\n  parsedAmount: CurrencyAmount | undefined\r\n  v2Trade: Trade | undefined\r\n  inputError?: string\r\n} {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const {\r\n    independentField,\r\n    typedValue,\r\n    [Field.INPUT]: { currencyId: inputCurrencyId },\r\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\r\n    recipient,\r\n  } = useSwapState()\r\n\r\n  const inputCurrency = useCurrency(inputCurrencyId)\r\n  const outputCurrency = useCurrency(outputCurrencyId)\r\n  const recipientLookup = useENS(recipient ?? undefined)\r\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\r\n\r\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\r\n    inputCurrency ?? undefined,\r\n    outputCurrency ?? undefined,\r\n  ])\r\n\r\n  const isExactIn: boolean = independentField === Field.INPUT\r\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\r\n\r\n  const bestTradeExactIn = useTradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\r\n  const bestTradeExactOut = useTradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\r\n\r\n  const v2Trade = isExactIn ? bestTradeExactIn : bestTradeExactOut\r\n\r\n  const currencyBalances = {\r\n    [Field.INPUT]: relevantTokenBalances[0],\r\n    [Field.OUTPUT]: relevantTokenBalances[1],\r\n  }\r\n\r\n  const currencies: { [field in Field]?: Currency } = {\r\n    [Field.INPUT]: inputCurrency ?? undefined,\r\n    [Field.OUTPUT]: outputCurrency ?? undefined,\r\n  }\r\n\r\n  let inputError: string | undefined\r\n  if (!account) {\r\n    inputError = 'Connect Wallet'\r\n  }\r\n\r\n  if (!parsedAmount) {\r\n    inputError = inputError ?? 'Enter an amount'\r\n  }\r\n\r\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\r\n    inputError = inputError ?? 'Select a token'\r\n  }\r\n\r\n  const formattedTo = isAddress(to)\r\n  if (!to || !formattedTo) {\r\n    inputError = inputError ?? 'Enter a recipient'\r\n  } else if (\r\n    BAD_RECIPIENT_ADDRESSES.indexOf(formattedTo) !== -1 ||\r\n    (bestTradeExactIn && involvesAddress(bestTradeExactIn, formattedTo)) ||\r\n    (bestTradeExactOut && involvesAddress(bestTradeExactOut, formattedTo))\r\n  ) {\r\n    inputError = inputError ?? 'Invalid recipient'\r\n  }\r\n\r\n  const [allowedSlippage] = useUserSlippageTolerance()\r\n\r\n  const slippageAdjustedAmounts = v2Trade && allowedSlippage && computeSlippageAdjustedAmounts(v2Trade, allowedSlippage)\r\n\r\n  // compare input balance to max input based on version\r\n  const [balanceIn, amountIn] = [\r\n    currencyBalances[Field.INPUT],\r\n    slippageAdjustedAmounts ? slippageAdjustedAmounts[Field.INPUT] : null,\r\n  ]\r\n\r\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\r\n    inputError = `Insufficient ${amountIn.currency.symbol} balance`\r\n  }\r\n\r\n  return {\r\n    currencies,\r\n    currencyBalances,\r\n    parsedAmount,\r\n    v2Trade: v2Trade ?? undefined,\r\n    inputError,\r\n  }\r\n}\r\n\r\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\r\n  if (typeof urlParam === 'string') {\r\n    const valid = isAddress(urlParam)\r\n    if (valid) return valid\r\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH'\r\n    if (valid === false) return 'ETH'\r\n  }\r\n  return 'ETH' ?? ''\r\n}\r\n\r\nfunction parseTokenAmountURLParameter(urlParam: any): string {\r\n  // eslint-disable-next-line no-restricted-globals\r\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\r\n}\r\n\r\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\r\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\r\n}\r\n\r\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\r\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\r\nfunction validatedRecipient(recipient: any): string | null {\r\n  if (typeof recipient !== 'string') return null\r\n  const address = isAddress(recipient)\r\n  if (address) return address\r\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\r\n  if (ADDRESS_REGEX.test(recipient)) return recipient\r\n  return null\r\n}\r\n\r\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\r\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\r\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\r\n  if (inputCurrency === outputCurrency) {\r\n    if (typeof parsedQs.outputCurrency === 'string') {\r\n      inputCurrency = ''\r\n    } else {\r\n      outputCurrency = ''\r\n    }\r\n  }\r\n\r\n  const recipient = validatedRecipient(parsedQs.recipient)\r\n\r\n  return {\r\n    [Field.INPUT]: {\r\n      currencyId: inputCurrency,\r\n    },\r\n    [Field.OUTPUT]: {\r\n      currencyId: outputCurrency,\r\n    },\r\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\r\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\r\n    recipient,\r\n  }\r\n}\r\n\r\n// updates the swap state to use the defaults for a given network\r\nexport function useDefaultsFromURLSearch():\r\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\r\n  | undefined {\r\n  const { chainId } = useActiveWeb3React()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const parsedQs = useParsedQueryString()\r\n  const [result, setResult] = useState<\r\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\r\n  >()\r\n\r\n  useEffect(() => {\r\n    if (!chainId) return\r\n    const parsed = queryParametersToSwapState(parsedQs)\r\n\r\n    dispatch(\r\n      replaceSwapState({\r\n        typedValue: parsed.typedValue,\r\n        field: parsed.independentField,\r\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\r\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\r\n        recipient: parsed.recipient,\r\n      })\r\n    )\r\n\r\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dispatch, chainId])\r\n\r\n  return result\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}