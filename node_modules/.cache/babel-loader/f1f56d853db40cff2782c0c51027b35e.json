{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Translations = void 0;\nconst core_1 = require(\"../core\");\n/**\n * Translators can work with entirely untranslated project or you can pre-translate the files to ease the translations process.\n *\n * Use API to pre-translate files via Machine Translation (MT) or Translation Memory (TM), upload your existing translations, and download translations correspondingly.\n * Pre-translate and build are asynchronous operations and shall be completed with sequence of API methods.\n */\nclass Translations extends core_1.CrowdinApi {\n  /**\n   * @param projectId project identifier\n   * @param preTranslationId pre translation identifier\n   * @see https://developer.crowdin.com/api/v2/#tag/Translations/paths/~1projects~1{projectId}~1pre-translations~1{preTranslationId}/get\n   */\n  preTranslationStatus(projectId, preTranslationId) {\n    const url = `${this.url}/projects/${projectId}/pre-translations/${preTranslationId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.pre-translations.post\n   */\n  applyPreTranslation(projectId, request) {\n    const url = `${this.url}/projects/${projectId}/pre-translations`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param directoryId directory identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.directories.post\n   */\n  buildProjectDirectoryTranslation(projectId, directoryId) {\n    let request = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const url = `${this.url}/projects/${projectId}/translations/builds/directories/${directoryId}`;\n    const config = this.defaultConfig();\n    return this.post(url, request, config);\n  }\n  /**\n   * @param projectId project identifier\n   * @param fileId file identifier\n   * @param request request body\n   * @param eTag 'If-None-Match' header\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.files.post\n   */\n  buildProjectFileTranslation(projectId, fileId, request, eTag) {\n    const url = `${this.url}/projects/${projectId}/translations/builds/files/${fileId}`;\n    const config = this.defaultConfig();\n    if (eTag) {\n      config.headers['If-None-Match'] = eTag;\n    }\n    return this.post(url, request, config);\n  }\n  listProjectBuilds(projectId, options, deprecatedLimit, deprecatedOffset) {\n    if ((0, core_1.isOptionalNumber)(options, '1' in arguments)) {\n      options = {\n        branchId: options,\n        limit: deprecatedLimit,\n        offset: deprecatedOffset\n      };\n    }\n    let url = `${this.url}/projects/${projectId}/translations/builds`;\n    url = this.addQueryParam(url, 'branchId', options.branchId);\n    return this.getList(url, options.limit, options.offset);\n  }\n  /**\n   * @param projectId project identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.post\n   */\n  buildProject(projectId) {\n    let request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const url = `${this.url}/projects/${projectId}/translations/builds`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param languageId language identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.postOnLanguage\n   */\n  uploadTranslation(projectId, languageId, request) {\n    const url = `${this.url}/projects/${projectId}/translations/${languageId}`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param buildId build identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.download.download\n   */\n  downloadTranslations(projectId, buildId) {\n    const url = `${this.url}/projects/${projectId}/translations/builds/${buildId}/download`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param buildId build identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.get\n   */\n  checkBuildStatus(projectId, buildId) {\n    const url = `${this.url}/projects/${projectId}/translations/builds/${buildId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param buildId build identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.delete\n   */\n  cancelBuild(projectId, buildId) {\n    const url = `${this.url}/projects/${projectId}/translations/builds/${buildId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param request request body\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.exports.post\n   */\n  exportProjectTranslation(projectId, request) {\n    const url = `${this.url}/projects/${projectId}/translations/exports`;\n    return this.post(url, request, this.defaultConfig());\n  }\n}\nexports.Translations = Translations;","map":{"version":3,"names":["Object","defineProperty","exports","value","Translations","core_1","require","CrowdinApi","preTranslationStatus","projectId","preTranslationId","url","get","defaultConfig","applyPreTranslation","request","post","buildProjectDirectoryTranslation","directoryId","arguments","length","undefined","config","buildProjectFileTranslation","fileId","eTag","headers","listProjectBuilds","options","deprecatedLimit","deprecatedOffset","isOptionalNumber","branchId","limit","offset","addQueryParam","getList","buildProject","uploadTranslation","languageId","downloadTranslations","buildId","checkBuildStatus","cancelBuild","delete","exportProjectTranslation"],"sources":["C:/projects/panther-frontend-dex1/node_modules/@crowdin/crowdin-api-client/out/translations/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Translations = void 0;\nconst core_1 = require(\"../core\");\n/**\n * Translators can work with entirely untranslated project or you can pre-translate the files to ease the translations process.\n *\n * Use API to pre-translate files via Machine Translation (MT) or Translation Memory (TM), upload your existing translations, and download translations correspondingly.\n * Pre-translate and build are asynchronous operations and shall be completed with sequence of API methods.\n */\nclass Translations extends core_1.CrowdinApi {\n    /**\n     * @param projectId project identifier\n     * @param preTranslationId pre translation identifier\n     * @see https://developer.crowdin.com/api/v2/#tag/Translations/paths/~1projects~1{projectId}~1pre-translations~1{preTranslationId}/get\n     */\n    preTranslationStatus(projectId, preTranslationId) {\n        const url = `${this.url}/projects/${projectId}/pre-translations/${preTranslationId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.pre-translations.post\n     */\n    applyPreTranslation(projectId, request) {\n        const url = `${this.url}/projects/${projectId}/pre-translations`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param directoryId directory identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.directories.post\n     */\n    buildProjectDirectoryTranslation(projectId, directoryId, request = {}) {\n        const url = `${this.url}/projects/${projectId}/translations/builds/directories/${directoryId}`;\n        const config = this.defaultConfig();\n        return this.post(url, request, config);\n    }\n    /**\n     * @param projectId project identifier\n     * @param fileId file identifier\n     * @param request request body\n     * @param eTag 'If-None-Match' header\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.files.post\n     */\n    buildProjectFileTranslation(projectId, fileId, request, eTag) {\n        const url = `${this.url}/projects/${projectId}/translations/builds/files/${fileId}`;\n        const config = this.defaultConfig();\n        if (eTag) {\n            config.headers['If-None-Match'] = eTag;\n        }\n        return this.post(url, request, config);\n    }\n    listProjectBuilds(projectId, options, deprecatedLimit, deprecatedOffset) {\n        if ((0, core_1.isOptionalNumber)(options, '1' in arguments)) {\n            options = { branchId: options, limit: deprecatedLimit, offset: deprecatedOffset };\n        }\n        let url = `${this.url}/projects/${projectId}/translations/builds`;\n        url = this.addQueryParam(url, 'branchId', options.branchId);\n        return this.getList(url, options.limit, options.offset);\n    }\n    /**\n     * @param projectId project identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.post\n     */\n    buildProject(projectId, request = {}) {\n        const url = `${this.url}/projects/${projectId}/translations/builds`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param languageId language identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.postOnLanguage\n     */\n    uploadTranslation(projectId, languageId, request) {\n        const url = `${this.url}/projects/${projectId}/translations/${languageId}`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param buildId build identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.download.download\n     */\n    downloadTranslations(projectId, buildId) {\n        const url = `${this.url}/projects/${projectId}/translations/builds/${buildId}/download`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param buildId build identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.get\n     */\n    checkBuildStatus(projectId, buildId) {\n        const url = `${this.url}/projects/${projectId}/translations/builds/${buildId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param buildId build identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.builds.delete\n     */\n    cancelBuild(projectId, buildId) {\n        const url = `${this.url}/projects/${projectId}/translations/builds/${buildId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param request request body\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.translations.exports.post\n     */\n    exportProjectTranslation(projectId, request) {\n        const url = `${this.url}/projects/${projectId}/translations/exports`;\n        return this.post(url, request, this.defaultConfig());\n    }\n}\nexports.Translations = Translations;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}