{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { CurrencyAmount, ETHER, JSBI, Percent, Price } from '@pantherswap-libs/sdk';\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PairState, usePair } from '../../data/Reserves';\nimport { useTotalSupply } from '../../data/TotalSupply';\nimport { useActiveWeb3React } from '../../hooks';\nimport { TranslateString } from '../../utils/translateTextHelpers';\nimport { wrappedCurrency, wrappedCurrencyAmount } from '../../utils/wrappedCurrency';\nimport { tryParseAmount } from '../swap/hooks';\nimport { useCurrencyBalances } from '../wallet/hooks';\nimport { Field, typeInput } from './actions';\nconst ZERO = JSBI.BigInt(0);\nexport function useMintState() {\n  _s();\n  return useSelector(state => state.mint);\n}\n_s(useMintState, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nexport function useDerivedMintInfo(currencyA, currencyB) {\n  _s2();\n  var _currencyBalances$Fie, _currencyBalances$Fie2;\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const {\n    independentField,\n    typedValue,\n    otherTypedValue\n  } = useMintState();\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A;\n\n  // tokens\n  const currencies = useMemo(() => ({\n    [Field.CURRENCY_A]: currencyA !== null && currencyA !== void 0 ? currencyA : undefined,\n    [Field.CURRENCY_B]: currencyB !== null && currencyB !== void 0 ? currencyB : undefined\n  }), [currencyA, currencyB]);\n\n  // pair\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]);\n  const totalSupply = useTotalSupply(pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  const noLiquidity = pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO));\n\n  // balances\n  const balances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, [currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]]);\n  const currencyBalances = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1]\n  };\n\n  // amounts\n  const independentAmount = tryParseAmount(typedValue, currencies[independentField]);\n  const dependentAmount = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField]);\n      }\n      return undefined;\n    }\n    if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId);\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)];\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA;\n        const dependentTokenAmount = dependentField === Field.CURRENCY_B ? pair.priceOf(tokenA).quote(wrappedIndependentAmount) : pair.priceOf(tokenB).quote(wrappedIndependentAmount);\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount;\n      }\n      return undefined;\n    }\n    return undefined;\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const parsedAmounts = {\n    [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n    [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount\n  };\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const {\n        [Field.CURRENCY_A]: currencyAAmount,\n        [Field.CURRENCY_B]: currencyBAmount\n      } = parsedAmounts;\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw);\n      }\n      return undefined;\n    }\n    const wrappedCurrencyA = wrappedCurrency(currencyA, chainId);\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined;\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts]);\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const {\n      [Field.CURRENCY_A]: currencyAAmount,\n      [Field.CURRENCY_B]: currencyBAmount\n    } = parsedAmounts;\n    const [tokenAmountA, tokenAmountB] = [wrappedCurrencyAmount(currencyAAmount, chainId), wrappedCurrencyAmount(currencyBAmount, chainId)];\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB);\n    }\n    return undefined;\n  }, [parsedAmounts, chainId, pair, totalSupply]);\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw);\n    }\n    return undefined;\n  }, [liquidityMinted, totalSupply]);\n  let error;\n  if (!account) {\n    error = 'Connect Wallet';\n  }\n  if (pairState === PairState.INVALID) {\n    var _error;\n    error = (_error = error) !== null && _error !== void 0 ? _error : TranslateString(136, 'Invalid pair');\n  }\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    var _error2;\n    error = (_error2 = error) !== null && _error2 !== void 0 ? _error2 : TranslateString(84, 'Enter an amount');\n  }\n  const {\n    [Field.CURRENCY_A]: currencyAAmount,\n    [Field.CURRENCY_B]: currencyBAmount\n  } = parsedAmounts;\n  if (currencyAAmount && currencyBalances !== null && currencyBalances !== void 0 && (_currencyBalances$Fie = currencyBalances[Field.CURRENCY_A]) !== null && _currencyBalances$Fie !== void 0 && _currencyBalances$Fie.lessThan(currencyAAmount)) {\n    var _currencies$Field$CUR;\n    error = `Insufficient ${(_currencies$Field$CUR = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR === void 0 ? void 0 : _currencies$Field$CUR.symbol} balance`;\n  }\n  if (currencyBAmount && currencyBalances !== null && currencyBalances !== void 0 && (_currencyBalances$Fie2 = currencyBalances[Field.CURRENCY_B]) !== null && _currencyBalances$Fie2 !== void 0 && _currencyBalances$Fie2.lessThan(currencyBAmount)) {\n    var _currencies$Field$CUR2;\n    error = `Insufficient ${(_currencies$Field$CUR2 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR2 === void 0 ? void 0 : _currencies$Field$CUR2.symbol} balance`;\n  }\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  };\n}\n_s2(useDerivedMintInfo, \"6d+04DJuG6/sZ0FrWwfhaQF3Dc4=\", false, function () {\n  return [useActiveWeb3React, useMintState, usePair, useTotalSupply, useCurrencyBalances];\n});\nexport function useMintActionHandlers(noLiquidity) {\n  _s3();\n  const dispatch = useDispatch();\n  const onFieldAInput = useCallback(typedValue => {\n    dispatch(typeInput({\n      field: Field.CURRENCY_A,\n      typedValue,\n      noLiquidity: noLiquidity === true\n    }));\n  }, [dispatch, noLiquidity]);\n  const onFieldBInput = useCallback(typedValue => {\n    dispatch(typeInput({\n      field: Field.CURRENCY_B,\n      typedValue,\n      noLiquidity: noLiquidity === true\n    }));\n  }, [dispatch, noLiquidity]);\n  return {\n    onFieldAInput,\n    onFieldBInput\n  };\n}\n_s3(useMintActionHandlers, \"WFlKWyC0ve3B69CG338SnuQ6XIY=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"names":["CurrencyAmount","ETHER","JSBI","Percent","Price","useCallback","useMemo","useDispatch","useSelector","PairState","usePair","useTotalSupply","useActiveWeb3React","TranslateString","wrappedCurrency","wrappedCurrencyAmount","tryParseAmount","useCurrencyBalances","Field","typeInput","ZERO","BigInt","useMintState","_s","state","mint","useDerivedMintInfo","currencyA","currencyB","_s2","_currencyBalances$Fie","_currencyBalances$Fie2","account","chainId","independentField","typedValue","otherTypedValue","dependentField","CURRENCY_A","CURRENCY_B","currencies","undefined","pairState","pair","totalSupply","liquidityToken","noLiquidity","NOT_EXISTS","Boolean","equal","raw","balances","currencyBalances","independentAmount","dependentAmount","wrappedIndependentAmount","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","ether","parsedAmounts","price","currencyAAmount","currencyBAmount","currency","wrappedCurrencyA","liquidityMinted","tokenAmountA","tokenAmountB","getLiquidityMinted","poolTokenPercentage","add","error","INVALID","_error","_error2","lessThan","_currencies$Field$CUR","symbol","_currencies$Field$CUR2","useMintActionHandlers","_s3","dispatch","onFieldAInput","field","onFieldBInput"],"sources":["C:/projects/panther-frontend-dex1/src/state/mint/hooks.ts"],"sourcesContent":["import { Currency, CurrencyAmount, ETHER, JSBI, Pair, Percent, Price, TokenAmount } from '@pantherswap-libs/sdk'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { PairState, usePair } from '../../data/Reserves'\r\nimport { useTotalSupply } from '../../data/TotalSupply'\r\n\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { TranslateString } from '../../utils/translateTextHelpers'\r\nimport { wrappedCurrency, wrappedCurrencyAmount } from '../../utils/wrappedCurrency'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { tryParseAmount } from '../swap/hooks'\r\nimport { useCurrencyBalances } from '../wallet/hooks'\r\nimport { Field, typeInput } from './actions'\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\n\r\nexport function useMintState(): AppState['mint'] {\r\n  return useSelector<AppState, AppState['mint']>((state) => state.mint)\r\n}\r\n\r\nexport function useDerivedMintInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined\r\n): {\r\n  dependentField: Field\r\n  currencies: { [field in Field]?: Currency }\r\n  pair?: Pair | null\r\n  pairState: PairState\r\n  currencyBalances: { [field in Field]?: CurrencyAmount }\r\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\r\n  price?: Price\r\n  noLiquidity?: boolean\r\n  liquidityMinted?: TokenAmount\r\n  poolTokenPercentage?: Percent\r\n  error?: string\r\n} {\r\n  const { account, chainId } = useActiveWeb3React()\r\n\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n\r\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\r\n\r\n  // tokens\r\n  const currencies: { [field in Field]?: Currency } = useMemo(\r\n    () => ({\r\n      [Field.CURRENCY_A]: currencyA ?? undefined,\r\n      [Field.CURRENCY_B]: currencyB ?? undefined,\r\n    }),\r\n    [currencyA, currencyB]\r\n  )\r\n\r\n  // pair\r\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\r\n\r\n  const noLiquidity: boolean =\r\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO))\r\n\r\n  // balances\r\n  const balances = useCurrencyBalances(account ?? undefined, [\r\n    currencies[Field.CURRENCY_A],\r\n    currencies[Field.CURRENCY_B],\r\n  ])\r\n  const currencyBalances: { [field in Field]?: CurrencyAmount } = {\r\n    [Field.CURRENCY_A]: balances[0],\r\n    [Field.CURRENCY_B]: balances[1],\r\n  }\r\n\r\n  // amounts\r\n  const independentAmount: CurrencyAmount | undefined = tryParseAmount(typedValue, currencies[independentField])\r\n  const dependentAmount: CurrencyAmount | undefined = useMemo(() => {\r\n    if (noLiquidity) {\r\n      if (otherTypedValue && currencies[dependentField]) {\r\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\r\n      }\r\n      return undefined\r\n    }\r\n    if (independentAmount) {\r\n      // we wrap the currencies just to get the price in terms of the other token\r\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId)\r\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\r\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\r\n        const dependentTokenAmount =\r\n          dependentField === Field.CURRENCY_B\r\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\r\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\r\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount\r\n      }\r\n      return undefined\r\n    }\r\n    return undefined\r\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair])\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const parsedAmounts: { [field in Field]: CurrencyAmount | undefined } = {\r\n    [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\r\n    [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\r\n  }\r\n\r\n  const price = useMemo(() => {\r\n    if (noLiquidity) {\r\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n      if (currencyAAmount && currencyBAmount) {\r\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw)\r\n      }\r\n      return undefined\r\n    }\r\n    const wrappedCurrencyA = wrappedCurrency(currencyA, chainId)\r\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\r\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts])\r\n\r\n  // liquidity minted\r\n  const liquidityMinted = useMemo(() => {\r\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n    const [tokenAmountA, tokenAmountB] = [\r\n      wrappedCurrencyAmount(currencyAAmount, chainId),\r\n      wrappedCurrencyAmount(currencyBAmount, chainId),\r\n    ]\r\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\r\n      return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\r\n    }\r\n    return undefined\r\n  }, [parsedAmounts, chainId, pair, totalSupply])\r\n\r\n  const poolTokenPercentage = useMemo(() => {\r\n    if (liquidityMinted && totalSupply) {\r\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\r\n    }\r\n    return undefined\r\n  }, [liquidityMinted, totalSupply])\r\n\r\n  let error: string | undefined\r\n  if (!account) {\r\n    error = 'Connect Wallet'\r\n  }\r\n\r\n  if (pairState === PairState.INVALID) {\r\n    error = error ?? TranslateString(136, 'Invalid pair')\r\n  }\r\n\r\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? TranslateString(84, 'Enter an amount')\r\n  }\r\n\r\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n\r\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\r\n    error = `Insufficient ${currencies[Field.CURRENCY_A]?.symbol} balance`\r\n  }\r\n\r\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\r\n    error = `Insufficient ${currencies[Field.CURRENCY_B]?.symbol} balance`\r\n  }\r\n\r\n  return {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n  }\r\n}\r\n\r\nexport function useMintActionHandlers(\r\n  noLiquidity: boolean | undefined\r\n): {\r\n  onFieldAInput: (typedValue: string) => void\r\n  onFieldBInput: (typedValue: string) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const onFieldAInput = useCallback(\r\n    (typedValue: string) => {\r\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\r\n    },\r\n    [dispatch, noLiquidity]\r\n  )\r\n  const onFieldBInput = useCallback(\r\n    (typedValue: string) => {\r\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\r\n    },\r\n    [dispatch, noLiquidity]\r\n  )\r\n\r\n  return {\r\n    onFieldAInput,\r\n    onFieldBInput,\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}