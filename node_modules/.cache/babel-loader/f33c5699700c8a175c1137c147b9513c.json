{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseBlockTracker = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue;\nconst blockTrackerEvents = ['sync', 'latest'];\nclass BaseBlockTracker extends safe_event_emitter_1.default {\n  constructor(opts) {\n    super();\n    // config\n    this._blockResetDuration = opts.blockResetDuration || 20 * sec;\n    // state\n    this._currentBlock = null;\n    this._isRunning = false;\n    // bind functions for internal use\n    this._onNewListener = this._onNewListener.bind(this);\n    this._onRemoveListener = this._onRemoveListener.bind(this);\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n    // listen for handler changes\n    this._setupInternalEvents();\n  }\n  async destroy() {\n    this._cancelBlockResetTimeout();\n    await this._maybeEnd();\n    super.removeAllListeners();\n  }\n  isRunning() {\n    return this._isRunning;\n  }\n  getCurrentBlock() {\n    return this._currentBlock;\n  }\n  async getLatestBlock() {\n    // return if available\n    if (this._currentBlock) {\n      return this._currentBlock;\n    }\n    // wait for a new latest block\n    const latestBlock = await new Promise(resolve => this.once('latest', resolve));\n    // return newly set current block\n    return latestBlock;\n  }\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners(eventName) {\n    // perform default behavior, preserve fn arity\n    if (eventName) {\n      super.removeAllListeners(eventName);\n    } else {\n      super.removeAllListeners();\n    }\n    // re-add internal events\n    this._setupInternalEvents();\n    // trigger stop check just in case\n    this._onRemoveListener();\n    return this;\n  }\n  _setupInternalEvents() {\n    // first remove listeners for idempotence\n    this.removeListener('newListener', this._onNewListener);\n    this.removeListener('removeListener', this._onRemoveListener);\n    // then add them\n    this.on('newListener', this._onNewListener);\n    this.on('removeListener', this._onRemoveListener);\n  }\n  _onNewListener(eventName) {\n    // `newListener` is called *before* the listener is added\n    if (blockTrackerEvents.includes(eventName)) {\n      this._maybeStart();\n    }\n  }\n  _onRemoveListener() {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) {\n      return;\n    }\n    this._maybeEnd();\n  }\n  async _maybeStart() {\n    if (this._isRunning) {\n      return;\n    }\n    this._isRunning = true;\n    // cancel setting latest block to stale\n    this._cancelBlockResetTimeout();\n    await this._start();\n    this.emit('_started');\n  }\n  async _maybeEnd() {\n    if (!this._isRunning) {\n      return;\n    }\n    this._isRunning = false;\n    this._setupBlockResetTimeout();\n    await this._end();\n    this.emit('_ended');\n  }\n  _getBlockTrackerEventCount() {\n    return blockTrackerEvents.map(eventName => this.listenerCount(eventName)).reduce(calculateSum);\n  }\n  _newPotentialLatest(newBlock) {\n    const currentBlock = this._currentBlock;\n    // only update if blok number is higher\n    if (currentBlock && hexToInt(newBlock) <= hexToInt(currentBlock)) {\n      return;\n    }\n    this._setCurrentBlock(newBlock);\n  }\n  _setCurrentBlock(newBlock) {\n    const oldBlock = this._currentBlock;\n    this._currentBlock = newBlock;\n    this.emit('latest', newBlock);\n    this.emit('sync', {\n      oldBlock,\n      newBlock\n    });\n  }\n  _setupBlockResetTimeout() {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout();\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration);\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref();\n    }\n  }\n  _cancelBlockResetTimeout() {\n    if (this._blockResetTimeout) {\n      clearTimeout(this._blockResetTimeout);\n    }\n  }\n  _resetCurrentBlock() {\n    this._currentBlock = null;\n  }\n}\nexports.BaseBlockTracker = BaseBlockTracker;\n/**\n * Converts a number represented as a string in hexadecimal format into a native\n * number.\n *\n * @param hexInt - The hex string.\n * @returns The number.\n */\nfunction hexToInt(hexInt) {\n  return Number.parseInt(hexInt, 16);\n}","map":{"version":3,"sources":["../src/BaseBlockTracker.ts"],"names":[],"mappings":"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","sourcesContent":["import SafeEventEmitter from '@metamask/safe-event-emitter';\n\nconst sec = 1000;\n\nconst calculateSum = (accumulator: number, currentValue: number) =>\n  accumulator + currentValue;\nconst blockTrackerEvents: (string | symbol)[] = ['sync', 'latest'];\n\ninterface BaseBlockTrackerArgs {\n  blockResetDuration?: number;\n}\n\nexport abstract class BaseBlockTracker extends SafeEventEmitter {\n  protected _isRunning: boolean;\n\n  private _blockResetDuration: number;\n\n  private _currentBlock: string | null;\n\n  private _blockResetTimeout?: ReturnType<typeof setTimeout>;\n\n  constructor(opts: BaseBlockTrackerArgs) {\n    super();\n\n    // config\n    this._blockResetDuration = opts.blockResetDuration || 20 * sec;\n    // state\n    this._currentBlock = null;\n    this._isRunning = false;\n\n    // bind functions for internal use\n    this._onNewListener = this._onNewListener.bind(this);\n    this._onRemoveListener = this._onRemoveListener.bind(this);\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n\n    // listen for handler changes\n    this._setupInternalEvents();\n  }\n\n  async destroy() {\n    this._cancelBlockResetTimeout();\n    await this._maybeEnd();\n    super.removeAllListeners();\n  }\n\n  isRunning(): boolean {\n    return this._isRunning;\n  }\n\n  getCurrentBlock(): string | null {\n    return this._currentBlock;\n  }\n\n  async getLatestBlock(): Promise<string> {\n    // return if available\n    if (this._currentBlock) {\n      return this._currentBlock;\n    }\n    // wait for a new latest block\n    const latestBlock: string = await new Promise((resolve) =>\n      this.once('latest', resolve),\n    );\n    // return newly set current block\n    return latestBlock;\n  }\n\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners(eventName?: string | symbol) {\n    // perform default behavior, preserve fn arity\n    if (eventName) {\n      super.removeAllListeners(eventName);\n    } else {\n      super.removeAllListeners();\n    }\n\n    // re-add internal events\n    this._setupInternalEvents();\n    // trigger stop check just in case\n    this._onRemoveListener();\n\n    return this;\n  }\n\n  /**\n   * To be implemented in subclass.\n   */\n  protected abstract _start(): Promise<void>;\n\n  /**\n   * To be implemented in subclass.\n   */\n  protected abstract _end(): Promise<void>;\n\n  private _setupInternalEvents(): void {\n    // first remove listeners for idempotence\n    this.removeListener('newListener', this._onNewListener);\n    this.removeListener('removeListener', this._onRemoveListener);\n    // then add them\n    this.on('newListener', this._onNewListener);\n    this.on('removeListener', this._onRemoveListener);\n  }\n\n  private _onNewListener(eventName: string | symbol): void {\n    // `newListener` is called *before* the listener is added\n    if (blockTrackerEvents.includes(eventName)) {\n      this._maybeStart();\n    }\n  }\n\n  private _onRemoveListener(): void {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) {\n      return;\n    }\n    this._maybeEnd();\n  }\n\n  private async _maybeStart(): Promise<void> {\n    if (this._isRunning) {\n      return;\n    }\n    this._isRunning = true;\n    // cancel setting latest block to stale\n    this._cancelBlockResetTimeout();\n    await this._start();\n    this.emit('_started');\n  }\n\n  private async _maybeEnd(): Promise<void> {\n    if (!this._isRunning) {\n      return;\n    }\n    this._isRunning = false;\n    this._setupBlockResetTimeout();\n    await this._end();\n    this.emit('_ended');\n  }\n\n  private _getBlockTrackerEventCount(): number {\n    return blockTrackerEvents\n      .map((eventName) => this.listenerCount(eventName))\n      .reduce(calculateSum);\n  }\n\n  protected _newPotentialLatest(newBlock: string): void {\n    const currentBlock = this._currentBlock;\n    // only update if blok number is higher\n    if (currentBlock && hexToInt(newBlock) <= hexToInt(currentBlock)) {\n      return;\n    }\n    this._setCurrentBlock(newBlock);\n  }\n\n  private _setCurrentBlock(newBlock: string): void {\n    const oldBlock = this._currentBlock;\n    this._currentBlock = newBlock;\n    this.emit('latest', newBlock);\n    this.emit('sync', { oldBlock, newBlock });\n  }\n\n  private _setupBlockResetTimeout(): void {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout();\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(\n      this._resetCurrentBlock,\n      this._blockResetDuration,\n    );\n\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref();\n    }\n  }\n\n  private _cancelBlockResetTimeout(): void {\n    if (this._blockResetTimeout) {\n      clearTimeout(this._blockResetTimeout);\n    }\n  }\n\n  private _resetCurrentBlock(): void {\n    this._currentBlock = null;\n  }\n}\n\n/**\n * Converts a number represented as a string in hexadecimal format into a native\n * number.\n *\n * @param hexInt - The hex string.\n * @returns The number.\n */\nfunction hexToInt(hexInt: string): number {\n  return Number.parseInt(hexInt, 16);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}