{"ast":null,"code":"import { ChainId, JSBI, Percent, Token, WETH } from '@pantherswap-libs/sdk';\nexport const ROUTER_ADDRESS = '0x16eE9c5C05E22665A144C1a09A5fb8bF94F6Bb3B';\n\n// a list of tokens by chain\n\nexport const BUSD = new Token(ChainId.MAINNET, '0xe9e7cea3dedca5984780bafc599bd69add087d56', 18, 'BUSD', 'Binance USD');\nexport const USDT = new Token(ChainId.MAINNET, '0x73E84bFD35C3f1537A72180D1481E1eABf64B70b', 18, 'USDT-R', 'RedLight USD');\nconst WETH_ONLY = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]]\n};\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], BUSD, USDT]\n};\n\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n */\nexport const CUSTOM_BASES = {\n  [ChainId.MAINNET]: {}\n};\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], BUSD, USDT]\n};\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], BUSD, USDT]\n};\nexport const PINNED_PAIRS = {\n  [ChainId.MAINNET]: [[new Token(ChainId.MAINNET, '0x93E7ae1eF759Ee2dBEf0F87424b08d7Af7E4BcA5', 18, 'SIRENS', 'Sirens Treasure Token'), new Token(ChainId.MAINNET, '0x00F22F97e249B980A1df5A091FcCbd6599600779', 18, 'WREDLC', 'Wrapped REDLC')], [BUSD, USDT]]\n};\nexport const NetworkContextName = 'NETWORK';\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 650;\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20;\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000));\nexport const BIPS_BASE = JSBI.BigInt(10000);\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW = new Percent(JSBI.BigInt(100), BIPS_BASE); // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM = new Percent(JSBI.BigInt(300), BIPS_BASE); // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH = new Percent(JSBI.BigInt(500), BIPS_BASE); // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN = new Percent(JSBI.BigInt(1000), BIPS_BASE); // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT = new Percent(JSBI.BigInt(1500), BIPS_BASE); // 15%\n\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport const MIN_ETH = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)); // .01 ETH","map":{"version":3,"names":["ChainId","JSBI","Percent","Token","WETH","ROUTER_ADDRESS","BUSD","MAINNET","USDT","WETH_ONLY","BSCTESTNET","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate"],"sources":["C:/projects/panther-frontend-dex1/src/constants/index.ts"],"sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pantherswap-libs/sdk'\r\n\r\nexport const ROUTER_ADDRESS = '0x16eE9c5C05E22665A144C1a09A5fb8bF94F6Bb3B'\r\n\r\n// a list of tokens by chain\r\ntype ChainTokenList = {\r\n  readonly [chainId in ChainId]: Token[]\r\n}\r\n\r\nexport const BUSD = new Token(ChainId.MAINNET, '0xe9e7cea3dedca5984780bafc599bd69add087d56', 18, 'BUSD', 'Binance USD')\r\nexport const USDT = new Token(ChainId.MAINNET, '0x73E84bFD35C3f1537A72180D1481E1eABf64B70b', 18, 'USDT-R', 'RedLight USD')\r\n\r\nconst WETH_ONLY: ChainTokenList = {\r\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\r\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]],\r\n}\r\n\r\n// used to construct intermediary pairs for trading\r\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], BUSD, USDT],\r\n}\r\n\r\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n */\r\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [ChainId.MAINNET]: {},\r\n}\r\n\r\n// used for display in the default list when adding liquidity\r\nexport const SUGGESTED_BASES: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], BUSD, USDT],\r\n}\r\n\r\n// used to construct the list of all pairs we consider by default in the frontend\r\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\r\n  ...WETH_ONLY,\r\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], BUSD, USDT],\r\n}\r\n\r\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\r\n  [ChainId.MAINNET]: [\r\n    [\r\n      new Token(ChainId.MAINNET, '0x93E7ae1eF759Ee2dBEf0F87424b08d7Af7E4BcA5', 18, 'SIRENS', 'Sirens Treasure Token'),\r\n      new Token(ChainId.MAINNET, '0x00F22F97e249B980A1df5A091FcCbd6599600779', 18, 'WREDLC', 'Wrapped REDLC'),\r\n    ],\r\n    [BUSD, USDT],\r\n  ],\r\n}\r\n\r\nexport const NetworkContextName = 'NETWORK'\r\n\r\n// default allowed slippage, in bips\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 650\r\n// 20 minutes, denominated in seconds\r\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\r\n\r\n// one basis point\r\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\r\nexport const BIPS_BASE = JSBI.BigInt(10000)\r\n// used for warning states\r\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\r\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\r\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\r\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\r\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\r\n// for non expert mode disable swaps above this\r\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\r\n\r\n// used to ensure the user doesn't send so much ETH so they end up with <.01\r\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}