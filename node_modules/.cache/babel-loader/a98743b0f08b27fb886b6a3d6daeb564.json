{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{ThemeProvider as SCThemeProvider}from'styled-components';import{light,dark}from'@pantherswap-libs/uikit';var CACHE_KEY='IS_DARK';var ThemeContext=/*#__PURE__*/React.createContext({isDark:false,toggleTheme:function toggleTheme(){return null;}});var ThemeContextProvider=function ThemeContextProvider(_ref){var children=_ref.children;var _useState=useState(function(){// const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n// return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\nreturn true;}),_useState2=_slicedToArray(_useState,2),isDark=_useState2[0],setIsDark=_useState2[1];var toggleTheme=function toggleTheme(){setIsDark(function(prevState){localStorage.setItem(CACHE_KEY,JSON.stringify(!prevState));return!prevState||true;});};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{isDark:isDark,toggleTheme:toggleTheme},children:/*#__PURE__*/_jsx(SCThemeProvider,{theme:isDark?dark:light,children:children})});};export{ThemeContext,ThemeContextProvider};","map":{"version":3,"sources":["C:/projects/panther-frontend-dex1/src/ThemeContext.tsx"],"names":["React","useState","ThemeProvider","SCThemeProvider","light","dark","CACHE_KEY","ThemeContext","createContext","isDark","toggleTheme","ThemeContextProvider","children","setIsDark","prevState","localStorage","setItem","JSON","stringify"],"mappings":"mMAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,aAAa,GAAIC,CAAAA,eAA1B,KAAiD,mBAAjD,CACA,OAASC,KAAT,CAAgBC,IAAhB,KAA4B,yBAA5B,CAEA,GAAMC,CAAAA,SAAS,CAAG,SAAlB,CAOA,GAAMC,CAAAA,YAAY,cAAGP,KAAK,CAACQ,aAAN,CAAsC,CAAEC,MAAM,CAAE,KAAV,CAAiBC,WAAW,CAAE,6BAAM,KAAN,EAA9B,CAAtC,CAArB,CAEA,GAAMC,CAAAA,oBAA8B,CAAG,QAAjCA,CAAAA,oBAAiC,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eAC3BX,QAAQ,CAAC,UAAM,CACzC;AACA;AACA,MAAO,KAAP,CACD,CAJmC,CADmB,wCAChDQ,MADgD,eACxCI,SADwC,eAOvD,GAAMH,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACxBG,SAAS,CAAC,SAACC,SAAD,CAAoB,CAC5BC,YAAY,CAACC,OAAb,CAAqBV,SAArB,CAAgCW,IAAI,CAACC,SAAL,CAAe,CAACJ,SAAhB,CAAhC,EACA,MAAO,CAACA,SAAD,EAAc,IAArB,CACD,CAHQ,CAAT,CAID,CALD,CAOA,mBACE,KAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAAEL,MAAM,CAANA,MAAF,CAAUC,WAAW,CAAXA,WAAV,CAA9B,uBACE,KAAC,eAAD,EAAiB,KAAK,CAAED,MAAM,CAAGJ,IAAH,CAAUD,KAAxC,UAAgDQ,QAAhD,EADF,EADF,CAKD,CAnBD,CAqBA,OAASL,YAAT,CAAuBI,oBAAvB","sourcesContent":["import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pantherswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nexport interface ThemeContextType {\r\n  isDark: boolean;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = React.createContext<ThemeContextType>({ isDark: false, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider: React.FC = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    // const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    // return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n    return true;\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState: any) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState || true;\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n"]},"metadata":{},"sourceType":"module"}