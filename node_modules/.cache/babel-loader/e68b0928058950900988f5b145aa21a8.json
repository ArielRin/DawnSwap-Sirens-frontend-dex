{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { JSBI, Percent, Router, TradeType } from '@pantherswap-libs/sdk';\nimport { useMemo } from 'react';\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport { useActiveWeb3React } from './index';\nimport useENS from './useENS';\nexport let SwapCallbackState = /*#__PURE__*/function (SwapCallbackState) {\n  SwapCallbackState[SwapCallbackState[\"INVALID\"] = 0] = \"INVALID\";\n  SwapCallbackState[SwapCallbackState[\"LOADING\"] = 1] = \"LOADING\";\n  SwapCallbackState[SwapCallbackState[\"VALID\"] = 2] = \"VALID\";\n  return SwapCallbackState;\n}({});\n/**\r\n * Returns the swap calls that can be used to make the trade\r\n * @param trade trade to execute\r\n * @param allowedSlippage user allowed slippage\r\n * @param deadline the deadline for the trade\r\n * @param recipientAddressOrName\r\n */\nfunction useSwapCallArguments(trade) {\n  _s();\n  let allowedSlippage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INITIAL_ALLOWED_SLIPPAGE;\n  let deadline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_DEADLINE_FROM_NOW;\n  let\n  // in seconds from now\n  recipientAddressOrName = arguments.length > 3 ? arguments[3] : undefined;\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId) return [];\n    const contract = getRouterContract(chainId, library, account);\n    if (!contract) {\n      return [];\n    }\n    const swapMethods = [];\n    swapMethods.push(\n    // @ts-ignore\n    Router.swapCallParameters(trade, {\n      feeOnTransfer: false,\n      allowedSlippage: new Percent(JSBI.BigInt(Math.floor(allowedSlippage)), BIPS_BASE),\n      recipient,\n      ttl: deadline\n    }));\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      swapMethods.push(\n      // @ts-ignore\n      Router.swapCallParameters(trade, {\n        feeOnTransfer: true,\n        allowedSlippage: new Percent(JSBI.BigInt(Math.floor(allowedSlippage)), BIPS_BASE),\n        recipient,\n        ttl: deadline\n      }));\n    }\n    return swapMethods.map(parameters => ({\n      parameters,\n      contract\n    }));\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade]);\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\n_s(useSwapCallArguments, \"/vPK1Zgax8/DIHr5jZbv3FWm97w=\", false, function () {\n  return [useActiveWeb3React, useENS];\n});\nexport function useSwapCallback(trade) {\n  _s2();\n  let allowedSlippage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INITIAL_ALLOWED_SLIPPAGE;\n  let deadline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_DEADLINE_FROM_NOW;\n  let\n  // in seconds from now\n  recipientAddressOrName = arguments.length > 3 ? arguments[3] : undefined;\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName);\n  const addTransaction = useTransactionAdder();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies'\n      };\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: SwapCallbackState.INVALID,\n          callback: null,\n          error: 'Invalid recipient'\n        };\n      }\n      return {\n        state: SwapCallbackState.LOADING,\n        callback: null,\n        error: null\n      };\n    }\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap() {\n        const estimatedCalls = await Promise.all(swapCalls.map(call => {\n          const {\n            parameters: {\n              methodName,\n              args,\n              value\n            },\n            contract\n          } = call;\n          const options = !value || isZero(value) ? {} : {\n            value\n          };\n          return contract.estimateGas[methodName](...args, options).then(gasEstimate => {\n            return {\n              call,\n              gasEstimate\n            };\n          }).catch(gasError => {\n            console.info('Gas estimate failed, trying eth_call to extract error', call);\n            return contract.callStatic[methodName](...args, options).then(result => {\n              console.info('Unexpected successful call after failed estimate gas', call, gasError, result);\n              return {\n                call,\n                error: new Error('Unexpected issue with estimating the gas. Please try again.')\n              };\n            }).catch(callError => {\n              console.info('Call threw error', call, callError);\n              let errorMessage;\n              switch (callError.reason) {\n                case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                  errorMessage = 'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';\n                  break;\n                default:\n                  errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`;\n              }\n              return {\n                call,\n                error: new Error(errorMessage)\n              };\n            });\n          });\n        }));\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find((el, ix, list) => 'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]));\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter(call => 'error' in call);\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error;\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error');\n        }\n        const {\n          call: {\n            contract,\n            parameters: {\n              methodName,\n              args,\n              value\n            }\n          },\n          gasEstimate\n        } = successfulEstimation;\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? {\n            value,\n            from: account\n          } : {\n            from: account\n          })\n        }).then(response => {\n          const inputSymbol = trade.inputAmount.currency.symbol;\n          const outputSymbol = trade.outputAmount.currency.symbol;\n          const inputAmount = trade.inputAmount.toSignificant(3);\n          const outputAmount = trade.outputAmount.toSignificant(3);\n          const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`;\n          const withRecipient = recipient === account ? base : `${base} to ${recipientAddressOrName && isAddress(recipientAddressOrName) ? shortenAddress(recipientAddressOrName) : recipientAddressOrName}`;\n          addTransaction(response, {\n            summary: withRecipient\n          });\n          return response.hash;\n        }).catch(error => {\n          // if the user rejected the tx, pass this along\n          if ((error === null || error === void 0 ? void 0 : error.code) === 4001) {\n            throw new Error('Transaction rejected.');\n          } else {\n            // otherwise, the error was unexpected and we need to convey that\n            console.error(`Swap failed`, error, methodName, args, value);\n            throw new Error(`Swap failed: ${error.message}`);\n          }\n        });\n      },\n      error: null\n    };\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction]);\n}\n_s2(useSwapCallback, \"G8+T55P1ph4OGYQvDIdQ9DZmL+I=\", false, function () {\n  return [useActiveWeb3React, useSwapCallArguments, useTransactionAdder, useENS];\n});","map":{"version":3,"names":["JSBI","Percent","Router","TradeType","useMemo","BIPS_BASE","DEFAULT_DEADLINE_FROM_NOW","INITIAL_ALLOWED_SLIPPAGE","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","shortenAddress","isZero","useActiveWeb3React","useENS","SwapCallbackState","useSwapCallArguments","trade","_s","allowedSlippage","arguments","length","undefined","deadline","recipientAddressOrName","account","chainId","library","address","recipientAddress","recipient","contract","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","Math","floor","ttl","tradeType","EXACT_INPUT","map","parameters","useSwapCallback","_s2","swapCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","onSwap","estimatedCalls","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","console","info","callStatic","result","Error","callError","errorMessage","reason","successfulEstimation","find","el","ix","list","errorCalls","filter","gasLimit","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","summary","hash","code","message"],"sources":["C:/projects/panther-frontend-dex1/src/hooks/useSwapCallback.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from '@pantherswap-libs/sdk'\r\nimport { useMemo } from 'react'\r\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants'\r\nimport { useTransactionAdder } from '../state/transactions/hooks'\r\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils'\r\nimport isZero from '../utils/isZero'\r\nimport { useActiveWeb3React } from './index'\r\nimport useENS from './useENS'\r\n\r\nexport enum SwapCallbackState {\r\n  INVALID,\r\n  LOADING,\r\n  VALID,\r\n}\r\n\r\ninterface SwapCall {\r\n  contract: Contract\r\n  parameters: SwapParameters\r\n}\r\n\r\ninterface SuccessfulCall {\r\n  call: SwapCall\r\n  gasEstimate: BigNumber\r\n}\r\n\r\ninterface FailedCall {\r\n  call: SwapCall\r\n  error: Error\r\n}\r\n\r\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\r\n\r\n/**\r\n * Returns the swap calls that can be used to make the trade\r\n * @param trade trade to execute\r\n * @param allowedSlippage user allowed slippage\r\n * @param deadline the deadline for the trade\r\n * @param recipientAddressOrName\r\n */\r\nfunction useSwapCallArguments(\r\n  trade: Trade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\r\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): SwapCall[] {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n\r\n  return useMemo(() => {\r\n    if (!trade || !recipient || !library || !account || !chainId) return []\r\n\r\n    const contract: Contract | null = getRouterContract(chainId, library, account)\r\n    if (!contract) {\r\n      return []\r\n    }\r\n\r\n    const swapMethods = []\r\n\r\n    swapMethods.push(\r\n      // @ts-ignore\r\n      Router.swapCallParameters(trade, {\r\n        feeOnTransfer: false,\r\n        allowedSlippage: new Percent(JSBI.BigInt(Math.floor(allowedSlippage)), BIPS_BASE),\r\n        recipient,\r\n        ttl: deadline,\r\n      })\r\n    )\r\n\r\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n      swapMethods.push(\r\n        // @ts-ignore\r\n        Router.swapCallParameters(trade, {\r\n          feeOnTransfer: true,\r\n          allowedSlippage: new Percent(JSBI.BigInt(Math.floor(allowedSlippage)), BIPS_BASE),\r\n          recipient,\r\n          ttl: deadline,\r\n        })\r\n      )\r\n    }\r\n\r\n    return swapMethods.map((parameters) => ({ parameters, contract }))\r\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade])\r\n}\r\n\r\n// returns a function that will execute a swap, if the parameters are all valid\r\n// and the user has approved the slippage adjusted input amount for the trade\r\nexport function useSwapCallback(\r\n  trade: Trade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\r\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n\r\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName)\r\n\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n\r\n  return useMemo(() => {\r\n    if (!trade || !library || !account || !chainId) {\r\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\r\n    }\r\n    if (!recipient) {\r\n      if (recipientAddressOrName !== null) {\r\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\r\n      }\r\n      return { state: SwapCallbackState.LOADING, callback: null, error: null }\r\n    }\r\n\r\n    return {\r\n      state: SwapCallbackState.VALID,\r\n      callback: async function onSwap(): Promise<string> {\r\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\r\n          swapCalls.map((call) => {\r\n            const {\r\n              parameters: { methodName, args, value },\r\n              contract,\r\n            } = call\r\n            const options = !value || isZero(value) ? {} : { value }\r\n\r\n            return contract.estimateGas[methodName](...args, options)\r\n              .then((gasEstimate) => {\r\n                return {\r\n                  call,\r\n                  gasEstimate,\r\n                }\r\n              })\r\n              .catch((gasError) => {\r\n                console.info('Gas estimate failed, trying eth_call to extract error', call)\r\n\r\n                return contract.callStatic[methodName](...args, options)\r\n                  .then((result) => {\r\n                    console.info('Unexpected successful call after failed estimate gas', call, gasError, result)\r\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\r\n                  })\r\n                  .catch((callError) => {\r\n                    console.info('Call threw error', call, callError)\r\n                    let errorMessage: string\r\n                    switch (callError.reason) {\r\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\r\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\r\n                        errorMessage =\r\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\r\n                        break\r\n                      default:\r\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`\r\n                    }\r\n                    return { call, error: new Error(errorMessage) }\r\n                  })\r\n              })\r\n          })\r\n        )\r\n\r\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\r\n        const successfulEstimation = estimatedCalls.find(\r\n          (el, ix, list): el is SuccessfulCall =>\r\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\r\n        )\r\n\r\n        if (!successfulEstimation) {\r\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\r\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\r\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\r\n        }\r\n\r\n        const {\r\n          call: {\r\n            contract,\r\n            parameters: { methodName, args, value },\r\n          },\r\n          gasEstimate,\r\n        } = successfulEstimation\r\n\r\n        return contract[methodName](...args, {\r\n          gasLimit: calculateGasMargin(gasEstimate),\r\n          ...(value && !isZero(value) ? { value, from: account } : { from: account }),\r\n        })\r\n          .then((response: any) => {\r\n            const inputSymbol = trade.inputAmount.currency.symbol\r\n            const outputSymbol = trade.outputAmount.currency.symbol\r\n            const inputAmount = trade.inputAmount.toSignificant(3)\r\n            const outputAmount = trade.outputAmount.toSignificant(3)\r\n\r\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\r\n            const withRecipient =\r\n              recipient === account\r\n                ? base\r\n                : `${base} to ${\r\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\r\n                      ? shortenAddress(recipientAddressOrName)\r\n                      : recipientAddressOrName\r\n                  }`\r\n\r\n            addTransaction(response, {\r\n              summary: withRecipient,\r\n            })\r\n\r\n            return response.hash\r\n          })\r\n          .catch((error: any) => {\r\n            // if the user rejected the tx, pass this along\r\n            if (error?.code === 4001) {\r\n              throw new Error('Transaction rejected.')\r\n            } else {\r\n              // otherwise, the error was unexpected and we need to convey that\r\n              console.error(`Swap failed`, error, methodName, args, value)\r\n              throw new Error(`Swap failed: ${error.message}`)\r\n            }\r\n          })\r\n      },\r\n      error: null,\r\n    }\r\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction])\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}