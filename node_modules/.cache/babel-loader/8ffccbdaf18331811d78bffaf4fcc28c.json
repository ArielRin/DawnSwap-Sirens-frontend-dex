{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\panther-frontend-dex1\\\\src\\\\components\\\\ProgressSteps\\\\index.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport { RowBetween } from '../Row';\nimport { AutoColumn } from '../Column';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled(AutoColumn)`\n  margin-top: 1.25rem;\n`;\n_c = Wrapper;\nconst Grouping = styled(RowBetween)`\n  width: 50%;\n`;\n_c2 = Grouping;\nconst Circle = styled.div`\n  min-width: 20px;\n  min-height: 20px;\n  background-color: ${_ref => {\n  let {\n    theme,\n    confirmed,\n    disabled\n  } = _ref;\n  return disabled ? theme.colors.backgroundDisabled : confirmed ? theme.colors.success : theme.colors.primary;\n}};\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 8px;\n  font-size: 12px;\n  color: ${_ref2 => {\n  let {\n    theme,\n    confirmed,\n    disabled\n  } = _ref2;\n  return disabled ? theme.colors.text : confirmed ? theme.colors.success : '#FFFFFF';\n}};\n`;\n_c3 = Circle;\nconst CircleRow = styled.div`\n  width: calc(100% - 20px);\n  display: flex;\n  align-items: center;\n`;\n_c4 = CircleRow;\nconst Connector = styled.div`\n  width: 100%;\n  height: 2px;\n  background-color: ;\n  background: linear-gradient(\n    90deg,\n    ${_ref3 => {\n  let {\n    theme,\n    prevConfirmed\n  } = _ref3;\n  return transparentize(0.5, prevConfirmed ? theme.colors.success : theme.colors.primary);\n}} 0%,\n    ${_ref4 => {\n  let {\n    theme,\n    prevConfirmed\n  } = _ref4;\n  return prevConfirmed ? theme.colors.primary : theme.colors.backgroundDisabled;\n}} 80%\n  );\n  opacity: 0.6;\n`;\n_c5 = Connector;\n/**\r\n * Based on array of steps, create a step counter of circles.\r\n * A circle can be enabled, disabled, or confirmed. States are derived\r\n * from previous step.\r\n *\r\n * An extra circle is added to represent the ability to swap, add, or remove.\r\n * This step will never be marked as complete (because no 'txn done' state in body ui).\r\n *\r\n * @param steps  array of booleans where true means step is complete\r\n */\nexport default function ProgressCircles(_ref5) {\n  let {\n    steps\n  } = _ref5;\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    justify: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Grouping, {\n      children: [steps.map((step, i) => {\n        return (\n          /*#__PURE__*/\n          // eslint-disable-next-line react/no-array-index-key\n          _jsxDEV(CircleRow, {\n            children: [/*#__PURE__*/_jsxDEV(Circle, {\n              confirmed: step,\n              disabled: !steps[i - 1] && i !== 0,\n              children: step ? '✓' : i + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Connector, {\n              prevConfirmed: step\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        );\n      }), /*#__PURE__*/_jsxDEV(Circle, {\n        disabled: !steps[steps.length - 1],\n        children: steps.length + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_c6 = ProgressCircles;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Grouping\");\n$RefreshReg$(_c3, \"Circle\");\n$RefreshReg$(_c4, \"CircleRow\");\n$RefreshReg$(_c5, \"Connector\");\n$RefreshReg$(_c6, \"ProgressCircles\");","map":{"version":3,"names":["React","styled","transparentize","RowBetween","AutoColumn","jsxDEV","_jsxDEV","Wrapper","_c","Grouping","_c2","Circle","div","_ref","theme","confirmed","disabled","colors","backgroundDisabled","success","primary","_ref2","text","_c3","CircleRow","_c4","Connector","_ref3","prevConfirmed","_ref4","_c5","ProgressCircles","_ref5","steps","justify","children","map","step","i","fileName","_jsxFileName","lineNumber","columnNumber","length","_c6","$RefreshReg$"],"sources":["C:/projects/panther-frontend-dex1/src/components/ProgressSteps/index.tsx"],"sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { transparentize } from 'polished'\r\nimport { RowBetween } from '../Row'\r\nimport { AutoColumn } from '../Column'\r\n\r\nconst Wrapper = styled(AutoColumn)`\r\n  margin-top: 1.25rem;\r\n`\r\n\r\nconst Grouping = styled(RowBetween)`\r\n  width: 50%;\r\n`\r\n\r\nconst Circle = styled.div<{ confirmed?: boolean; disabled?: boolean }>`\r\n  min-width: 20px;\r\n  min-height: 20px;\r\n  background-color: ${({ theme, confirmed, disabled }) =>\r\n    disabled ? theme.colors.backgroundDisabled : confirmed ? theme.colors.success : theme.colors.primary};\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  line-height: 8px;\r\n  font-size: 12px;\r\n  color: ${({ theme, confirmed, disabled }) =>\r\n    disabled ? theme.colors.text : confirmed ? theme.colors.success : '#FFFFFF'};\r\n`\r\n\r\nconst CircleRow = styled.div`\r\n  width: calc(100% - 20px);\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Connector = styled.div<{ prevConfirmed?: boolean }>`\r\n  width: 100%;\r\n  height: 2px;\r\n  background-color: ;\r\n  background: linear-gradient(\r\n    90deg,\r\n    ${({ theme, prevConfirmed }) => transparentize(0.5, prevConfirmed ? theme.colors.success : theme.colors.primary)} 0%,\r\n    ${({ theme, prevConfirmed }) => (prevConfirmed ? theme.colors.primary : theme.colors.backgroundDisabled)} 80%\r\n  );\r\n  opacity: 0.6;\r\n`\r\n\r\ninterface ProgressCirclesProps {\r\n  steps: boolean[]\r\n}\r\n\r\n/**\r\n * Based on array of steps, create a step counter of circles.\r\n * A circle can be enabled, disabled, or confirmed. States are derived\r\n * from previous step.\r\n *\r\n * An extra circle is added to represent the ability to swap, add, or remove.\r\n * This step will never be marked as complete (because no 'txn done' state in body ui).\r\n *\r\n * @param steps  array of booleans where true means step is complete\r\n */\r\nexport default function ProgressCircles({ steps }: ProgressCirclesProps) {\r\n  return (\r\n    <Wrapper justify=\"center\">\r\n      <Grouping>\r\n        {steps.map((step, i) => {\r\n          return (\r\n            // eslint-disable-next-line react/no-array-index-key\r\n            <CircleRow key={i}>\r\n              <Circle confirmed={step} disabled={!steps[i - 1] && i !== 0}>\r\n                {step ? '✓' : i + 1}\r\n              </Circle>\r\n              <Connector prevConfirmed={step} />\r\n            </CircleRow>\r\n          )\r\n        })}\r\n        <Circle disabled={!steps[steps.length - 1]}>{steps.length + 1}</Circle>\r\n      </Grouping>\r\n    </Wrapper>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}