{"ast":null,"code":"import schema from '@uniswap/token-lists/src/tokenlist.schema.json';\nimport Ajv from 'ajv';\nimport contenthashToUri from './contenthashToUri';\nimport { parseENSAddress } from './parseENSAddress';\nimport uriToHttp from './uriToHttp';\n\n// bakeryswap defaultTokenJson\nimport { DEFAULT_TOKEN_LIST_URL } from '../constants/lists';\nimport defaultTokenJson from '../constants/token/pantherswap.json';\nconst tokenListValidator = new Ajv({\n  allErrors: true\n}).compile(schema);\n\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\nexport default async function getTokenList(listUrl, resolveENSContentHash) {\n  if (listUrl === DEFAULT_TOKEN_LIST_URL) {\n    return defaultTokenJson;\n  }\n  const parsedENS = parseENSAddress(listUrl);\n  let urls;\n  if (parsedENS) {\n    var _parsedENS$ensPath;\n    let contentHashUri;\n    try {\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName);\n    } catch (error) {\n      console.error(`Failed to resolve ENS name: ${parsedENS.ensName}`, error);\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`);\n    }\n    let translatedUri;\n    try {\n      translatedUri = contenthashToUri(contentHashUri);\n    } catch (error) {\n      console.error('Failed to translate contenthash to URI', contentHashUri);\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`);\n    }\n    urls = uriToHttp(`${translatedUri}${(_parsedENS$ensPath = parsedENS.ensPath) !== null && _parsedENS$ensPath !== void 0 ? _parsedENS$ensPath : ''}`);\n  } else {\n    urls = uriToHttp(listUrl);\n  }\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    const isLast = i === urls.length - 1;\n    let response;\n    try {\n      response = await fetch(url);\n    } catch (error) {\n      console.error('Failed to fetch list', listUrl, error);\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    if (!response.ok) {\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`);\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    const json = await response.json();\n    if (!tokenListValidator(json)) {\n      var _tokenListValidator$e, _tokenListValidator$e2;\n      const validationErrors = (_tokenListValidator$e = (_tokenListValidator$e2 = tokenListValidator.errors) === null || _tokenListValidator$e2 === void 0 ? void 0 : _tokenListValidator$e2.reduce((memo, error) => {\n        var _error$message;\n        const add = `${error.dataPath} ${(_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : ''}`;\n        return memo.length > 0 ? `${memo}; ${add}` : `${add}`;\n      }, '')) !== null && _tokenListValidator$e !== void 0 ? _tokenListValidator$e : 'unknown error';\n      throw new Error(`Token list failed validation: ${validationErrors}`);\n    }\n    return json;\n  }\n  throw new Error('Unrecognized list URL protocol.');\n}","map":{"version":3,"names":["schema","Ajv","contenthashToUri","parseENSAddress","uriToHttp","DEFAULT_TOKEN_LIST_URL","defaultTokenJson","tokenListValidator","allErrors","compile","getTokenList","listUrl","resolveENSContentHash","parsedENS","urls","_parsedENS$ensPath","contentHashUri","ensName","error","console","Error","translatedUri","ensPath","i","length","url","isLast","response","fetch","ok","json","_tokenListValidator$e","_tokenListValidator$e2","validationErrors","errors","reduce","memo","_error$message","add","dataPath","message"],"sources":["C:/projects/panther-frontend-dex1/src/utils/getTokenList.ts"],"sourcesContent":["import { TokenList } from '@uniswap/token-lists'\r\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\r\nimport Ajv from 'ajv'\r\nimport contenthashToUri from './contenthashToUri'\r\nimport { parseENSAddress } from './parseENSAddress'\r\nimport uriToHttp from './uriToHttp'\r\n\r\n// bakeryswap defaultTokenJson\r\nimport { DEFAULT_TOKEN_LIST_URL } from '../constants/lists'\r\nimport defaultTokenJson from '../constants/token/pantherswap.json'\r\n\r\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\r\n\r\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\r\nexport default async function getTokenList(\r\n  listUrl: string,\r\n  resolveENSContentHash: (ensName: string) => Promise<string>\r\n): Promise<TokenList> {\r\n  if (listUrl === DEFAULT_TOKEN_LIST_URL) {\r\n    return defaultTokenJson\r\n  }\r\n  const parsedENS = parseENSAddress(listUrl)\r\n\r\n  let urls: string[]\r\n  if (parsedENS) {\r\n    let contentHashUri\r\n    try {\r\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName)\r\n    } catch (error) {\r\n      console.error(`Failed to resolve ENS name: ${parsedENS.ensName}`, error)\r\n      throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`)\r\n    }\r\n    let translatedUri\r\n    try {\r\n      translatedUri = contenthashToUri(contentHashUri)\r\n    } catch (error) {\r\n      console.error('Failed to translate contenthash to URI', contentHashUri)\r\n      throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`)\r\n    }\r\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`)\r\n  } else {\r\n    urls = uriToHttp(listUrl)\r\n  }\r\n  for (let i = 0; i < urls.length; i++) {\r\n    const url = urls[i]\r\n    const isLast = i === urls.length - 1\r\n    let response\r\n    try {\r\n      response = await fetch(url)\r\n    } catch (error) {\r\n      console.error('Failed to fetch list', listUrl, error)\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      // eslint-disable-next-line no-continue\r\n      continue\r\n    }\r\n\r\n    if (!response.ok) {\r\n      if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n      // eslint-disable-next-line no-continue\r\n      continue\r\n    }\r\n\r\n    const json = await response.json()\r\n    if (!tokenListValidator(json)) {\r\n      const validationErrors: string =\r\n        tokenListValidator.errors?.reduce<string>((memo, error) => {\r\n          const add = `${error.dataPath} ${error.message ?? ''}`\r\n          return memo.length > 0 ? `${memo}; ${add}` : `${add}`\r\n        }, '') ?? 'unknown error'\r\n      throw new Error(`Token list failed validation: ${validationErrors}`)\r\n    }\r\n    return json\r\n  }\r\n  throw new Error('Unrecognized list URL protocol.')\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}