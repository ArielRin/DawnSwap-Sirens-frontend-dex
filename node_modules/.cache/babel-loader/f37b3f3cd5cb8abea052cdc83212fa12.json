{"ast":null,"code":"import _toConsumableArray from\"C:/projects/panther-frontend-dex1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{configureStore,getDefaultMiddleware}from'@reduxjs/toolkit';import{save,load}from'redux-localstorage-simple';import application from'./application/reducer';import{updateVersion}from'./global/actions';import user from'./user/reducer';import transactions from'./transactions/reducer';import swap from'./swap/reducer';import mint from'./mint/reducer';import lists from'./lists/reducer';import burn from'./burn/reducer';import multicall from'./multicall/reducer';import{getThemeCache}from'../utils/theme';var PERSISTED_KEYS=['user','transactions'];var loadedState=load({states:PERSISTED_KEYS});if(loadedState.user){loadedState.user.userDarkMode=getThemeCache();}var store=configureStore({reducer:{application:application,user:user,transactions:transactions,swap:swap,mint:mint,burn:burn,multicall:multicall,lists:lists},middleware:[].concat(_toConsumableArray(getDefaultMiddleware({thunk:false})),[save({states:PERSISTED_KEYS})]),preloadedState:loadedState});store.dispatch(updateVersion());export default store;","map":{"version":3,"sources":["C:/projects/panther-frontend-dex1/src/state/index.ts"],"names":["configureStore","getDefaultMiddleware","save","load","application","updateVersion","user","transactions","swap","mint","lists","burn","multicall","getThemeCache","PERSISTED_KEYS","loadedState","states","userDarkMode","store","reducer","middleware","thunk","preloadedState","dispatch"],"mappings":"gKAAA,OAASA,cAAT,CAAyBC,oBAAzB,KAAqD,kBAArD,CACA,OAASC,IAAT,CAAeC,IAAf,KAA2B,2BAA3B,CAEA,MAAOC,CAAAA,WAAP,KAAwB,uBAAxB,CACA,OAASC,aAAT,KAA8B,kBAA9B,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,KAAP,KAAkB,iBAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,SAAP,KAAsB,qBAAtB,CACA,OAASC,aAAT,KAA8B,gBAA9B,CAUA,GAAMC,CAAAA,cAAwB,CAAG,CAAC,MAAD,CAAS,cAAT,CAAjC,CACA,GAAMC,CAAAA,WAAW,CAAGZ,IAAI,CAAC,CAAEa,MAAM,CAAEF,cAAV,CAAD,CAAxB,CACA,GAAIC,WAAW,CAACT,IAAhB,CAAsB,CACpBS,WAAW,CAACT,IAAZ,CAAiBW,YAAjB,CAAgCJ,aAAa,EAA7C,CACD,CAED,GAAMK,CAAAA,KAAK,CAAGlB,cAAc,CAAC,CAC3BmB,OAAO,CAAE,CACPf,WAAW,CAAXA,WADO,CAEPE,IAAI,CAAJA,IAFO,CAGPC,YAAY,CAAZA,YAHO,CAIPC,IAAI,CAAJA,IAJO,CAKPC,IAAI,CAAJA,IALO,CAMPE,IAAI,CAAJA,IANO,CAOPC,SAAS,CAATA,SAPO,CAQPF,KAAK,CAALA,KARO,CADkB,CAW3BU,UAAU,8BAAMnB,oBAAoB,CAAC,CAAEoB,KAAK,CAAE,KAAT,CAAD,CAA1B,GAA8CnB,IAAI,CAAC,CAAEc,MAAM,CAAEF,cAAV,CAAD,CAAlD,EAXiB,CAY3BQ,cAAc,CAAEP,WAZW,CAAD,CAA5B,CAeAG,KAAK,CAACK,QAAN,CAAelB,aAAa,EAA5B,EAEA,cAAea,CAAAA,KAAf","sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport { save, load } from 'redux-localstorage-simple'\r\n\r\nimport application from './application/reducer'\r\nimport { updateVersion } from './global/actions'\r\nimport user from './user/reducer'\r\nimport transactions from './transactions/reducer'\r\nimport swap from './swap/reducer'\r\nimport mint from './mint/reducer'\r\nimport lists from './lists/reducer'\r\nimport burn from './burn/reducer'\r\nimport multicall from './multicall/reducer'\r\nimport { getThemeCache } from '../utils/theme'\r\n\r\ntype MergedState = {\r\n  user: {\r\n    [key: string]: any\r\n  }\r\n  transactions: {\r\n    [key: string]: any\r\n  }\r\n}\r\nconst PERSISTED_KEYS: string[] = ['user', 'transactions']\r\nconst loadedState = load({ states: PERSISTED_KEYS }) as MergedState\r\nif (loadedState.user) {\r\n  loadedState.user.userDarkMode = getThemeCache()\r\n}\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    application,\r\n    user,\r\n    transactions,\r\n    swap,\r\n    mint,\r\n    burn,\r\n    multicall,\r\n    lists,\r\n  },\r\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\r\n  preloadedState: loadedState,\r\n})\r\n\r\nstore.dispatch(updateVersion())\r\n\r\nexport default store\r\n\r\nexport type AppState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n"]},"metadata":{},"sourceType":"module"}