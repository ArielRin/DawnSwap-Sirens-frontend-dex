{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { addTransaction, checkedTransaction, clearAllTransactions, finalizeTransaction } from './actions';\nconst now = () => new Date().getTime();\nexport const initialState = {};\nexport default createReducer(initialState, builder => builder.addCase(addTransaction, (transactions, _ref) => {\n  var _transactions$chainId, _transactions$chainId2;\n  let {\n    payload: {\n      chainId,\n      from,\n      hash,\n      approval,\n      summary\n    }\n  } = _ref;\n  if ((_transactions$chainId = transactions[chainId]) !== null && _transactions$chainId !== void 0 && _transactions$chainId[hash]) {\n    throw Error('Attempted to add existing transaction.');\n  }\n  const txs = (_transactions$chainId2 = transactions[chainId]) !== null && _transactions$chainId2 !== void 0 ? _transactions$chainId2 : {};\n  txs[hash] = {\n    hash,\n    approval,\n    summary,\n    from,\n    addedTime: now()\n  };\n  transactions[chainId] = txs;\n}).addCase(clearAllTransactions, (transactions, _ref2) => {\n  let {\n    payload: {\n      chainId\n    }\n  } = _ref2;\n  if (!transactions[chainId]) return;\n  transactions[chainId] = {};\n}).addCase(checkedTransaction, (transactions, _ref3) => {\n  var _transactions$chainId3;\n  let {\n    payload: {\n      chainId,\n      hash,\n      blockNumber\n    }\n  } = _ref3;\n  const tx = (_transactions$chainId3 = transactions[chainId]) === null || _transactions$chainId3 === void 0 ? void 0 : _transactions$chainId3[hash];\n  if (!tx) {\n    return;\n  }\n  if (!tx.lastCheckedBlockNumber) {\n    tx.lastCheckedBlockNumber = blockNumber;\n  } else {\n    tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n  }\n}).addCase(finalizeTransaction, (transactions, _ref4) => {\n  var _transactions$chainId4;\n  let {\n    payload: {\n      hash,\n      chainId,\n      receipt\n    }\n  } = _ref4;\n  const tx = (_transactions$chainId4 = transactions[chainId]) === null || _transactions$chainId4 === void 0 ? void 0 : _transactions$chainId4[hash];\n  if (!tx) {\n    return;\n  }\n  tx.receipt = receipt;\n  tx.confirmedTime = now();\n}));","map":{"version":3,"names":["createReducer","addTransaction","checkedTransaction","clearAllTransactions","finalizeTransaction","now","Date","getTime","initialState","builder","addCase","transactions","_ref","_transactions$chainId","_transactions$chainId2","payload","chainId","from","hash","approval","summary","Error","txs","addedTime","_ref2","_ref3","_transactions$chainId3","blockNumber","tx","lastCheckedBlockNumber","Math","max","_ref4","_transactions$chainId4","receipt","confirmedTime"],"sources":["C:/projects/panther-frontend-dex1/src/state/transactions/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\r\nimport {\r\n  addTransaction,\r\n  checkedTransaction,\r\n  clearAllTransactions,\r\n  finalizeTransaction,\r\n  SerializableTransactionReceipt\r\n} from './actions'\r\n\r\nconst now = () => new Date().getTime()\r\n\r\nexport interface TransactionDetails {\r\n  hash: string\r\n  approval?: { tokenAddress: string; spender: string }\r\n  summary?: string\r\n  receipt?: SerializableTransactionReceipt\r\n  lastCheckedBlockNumber?: number\r\n  addedTime: number\r\n  confirmedTime?: number\r\n  from: string\r\n}\r\n\r\nexport interface TransactionState {\r\n  [chainId: number]: {\r\n    [txHash: string]: TransactionDetails\r\n  }\r\n}\r\n\r\nexport const initialState: TransactionState = {}\r\n\r\nexport default createReducer(initialState, builder =>\r\n  builder\r\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, approval, summary } }) => {\r\n      if (transactions[chainId]?.[hash]) {\r\n        throw Error('Attempted to add existing transaction.')\r\n      }\r\n      const txs = transactions[chainId] ?? {}\r\n      txs[hash] = { hash, approval, summary, from, addedTime: now() }\r\n      transactions[chainId] = txs\r\n    })\r\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\r\n      if (!transactions[chainId]) return\r\n      transactions[chainId] = {}\r\n    })\r\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\r\n      const tx = transactions[chainId]?.[hash]\r\n      if (!tx) {\r\n        return\r\n      }\r\n      if (!tx.lastCheckedBlockNumber) {\r\n        tx.lastCheckedBlockNumber = blockNumber\r\n      } else {\r\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\r\n      }\r\n    })\r\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\r\n      const tx = transactions[chainId]?.[hash]\r\n      if (!tx) {\r\n        return\r\n      }\r\n      tx.receipt = receipt\r\n      tx.confirmedTime = now()\r\n    })\r\n)\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,SACEC,cAAc,EACdC,kBAAkB,EAClBC,oBAAoB,EACpBC,mBAAmB,QAEd,WAAW;AAElB,MAAMC,GAAG,GAAGA,CAAA,KAAM,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;AAmBtC,OAAO,MAAMC,YAA8B,GAAG,CAAC,CAAC;AAEhD,eAAeR,aAAa,CAACQ,YAAY,EAAEC,OAAO,IAChDA,OAAO,CACJC,OAAO,CAACT,cAAc,EAAE,CAACU,YAAY,EAAAC,IAAA,KAA8D;EAAA,IAAAC,qBAAA,EAAAC,sBAAA;EAAA,IAA5D;IAAEC,OAAO,EAAE;MAAEC,OAAO;MAAEC,IAAI;MAAEC,IAAI;MAAEC,QAAQ;MAAEC;IAAQ;EAAE,CAAC,GAAAR,IAAA;EAC7F,KAAAC,qBAAA,GAAIF,YAAY,CAACK,OAAO,CAAC,cAAAH,qBAAA,eAArBA,qBAAA,CAAwBK,IAAI,CAAC,EAAE;IACjC,MAAMG,KAAK,CAAC,wCAAwC,CAAC;EACvD;EACA,MAAMC,GAAG,IAAAR,sBAAA,GAAGH,YAAY,CAACK,OAAO,CAAC,cAAAF,sBAAA,cAAAA,sBAAA,GAAI,CAAC,CAAC;EACvCQ,GAAG,CAACJ,IAAI,CAAC,GAAG;IAAEA,IAAI;IAAEC,QAAQ;IAAEC,OAAO;IAAEH,IAAI;IAAEM,SAAS,EAAElB,GAAG,CAAC;EAAE,CAAC;EAC/DM,YAAY,CAACK,OAAO,CAAC,GAAGM,GAAG;AAC7B,CAAC,CAAC,CACDZ,OAAO,CAACP,oBAAoB,EAAE,CAACQ,YAAY,EAAAa,KAAA,KAA+B;EAAA,IAA7B;IAAET,OAAO,EAAE;MAAEC;IAAQ;EAAE,CAAC,GAAAQ,KAAA;EACpE,IAAI,CAACb,YAAY,CAACK,OAAO,CAAC,EAAE;EAC5BL,YAAY,CAACK,OAAO,CAAC,GAAG,CAAC,CAAC;AAC5B,CAAC,CAAC,CACDN,OAAO,CAACR,kBAAkB,EAAE,CAACS,YAAY,EAAAc,KAAA,KAAkD;EAAA,IAAAC,sBAAA;EAAA,IAAhD;IAAEX,OAAO,EAAE;MAAEC,OAAO;MAAEE,IAAI;MAAES;IAAY;EAAE,CAAC,GAAAF,KAAA;EACrF,MAAMG,EAAE,IAAAF,sBAAA,GAAGf,YAAY,CAACK,OAAO,CAAC,cAAAU,sBAAA,uBAArBA,sBAAA,CAAwBR,IAAI,CAAC;EACxC,IAAI,CAACU,EAAE,EAAE;IACP;EACF;EACA,IAAI,CAACA,EAAE,CAACC,sBAAsB,EAAE;IAC9BD,EAAE,CAACC,sBAAsB,GAAGF,WAAW;EACzC,CAAC,MAAM;IACLC,EAAE,CAACC,sBAAsB,GAAGC,IAAI,CAACC,GAAG,CAACJ,WAAW,EAAEC,EAAE,CAACC,sBAAsB,CAAC;EAC9E;AACF,CAAC,CAAC,CACDnB,OAAO,CAACN,mBAAmB,EAAE,CAACO,YAAY,EAAAqB,KAAA,KAA8C;EAAA,IAAAC,sBAAA;EAAA,IAA5C;IAAElB,OAAO,EAAE;MAAEG,IAAI;MAAEF,OAAO;MAAEkB;IAAQ;EAAE,CAAC,GAAAF,KAAA;EAClF,MAAMJ,EAAE,IAAAK,sBAAA,GAAGtB,YAAY,CAACK,OAAO,CAAC,cAAAiB,sBAAA,uBAArBA,sBAAA,CAAwBf,IAAI,CAAC;EACxC,IAAI,CAACU,EAAE,EAAE;IACP;EACF;EACAA,EAAE,CAACM,OAAO,GAAGA,OAAO;EACpBN,EAAE,CAACO,aAAa,GAAG9B,GAAG,CAAC,CAAC;AAC1B,CAAC,CACL,CAAC"},"metadata":{},"sourceType":"module"}