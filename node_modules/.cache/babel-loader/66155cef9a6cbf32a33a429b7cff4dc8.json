{"ast":null,"code":"import { isAddress } from '../../utils';\nexport function filterTokens(tokens, search) {\n  if (search.length === 0) return tokens;\n  const searchingAddress = isAddress(search);\n  if (searchingAddress) {\n    return tokens.filter(token => token.address === searchingAddress);\n  }\n  const lowerSearchParts = search.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n  if (lowerSearchParts.length === 0) {\n    return tokens;\n  }\n  const matchesSearch = s => {\n    const sParts = s.toLowerCase().split(/\\s+/).filter(str => str.length > 0);\n    return lowerSearchParts.every(p => p.length === 0 || sParts.some(sp => sp.startsWith(p) || sp.endsWith(p)));\n  };\n  return tokens.filter(token => {\n    const {\n      symbol,\n      name\n    } = token;\n    return symbol && matchesSearch(symbol) || name && matchesSearch(name);\n  });\n}\nexport default filterTokens;","map":{"version":3,"names":["isAddress","filterTokens","tokens","search","length","searchingAddress","filter","token","address","lowerSearchParts","toLowerCase","split","s","matchesSearch","sParts","str","every","p","some","sp","startsWith","endsWith","symbol","name"],"sources":["C:/projects/panther-frontend-dex1/src/components/SearchModal/filtering.ts"],"sourcesContent":["import { Token } from '@pantherswap-libs/sdk'\r\nimport { isAddress } from '../../utils'\r\n\r\nexport function filterTokens(tokens: Token[], search: string): Token[] {\r\n  if (search.length === 0) return tokens\r\n\r\n  const searchingAddress = isAddress(search)\r\n\r\n  if (searchingAddress) {\r\n    return tokens.filter((token) => token.address === searchingAddress)\r\n  }\r\n\r\n  const lowerSearchParts = search\r\n    .toLowerCase()\r\n    .split(/\\s+/)\r\n    .filter((s) => s.length > 0)\r\n\r\n  if (lowerSearchParts.length === 0) {\r\n    return tokens\r\n  }\r\n\r\n  const matchesSearch = (s: string): boolean => {\r\n    const sParts = s\r\n      .toLowerCase()\r\n      .split(/\\s+/)\r\n      .filter((str) => str.length > 0)\r\n\r\n    return lowerSearchParts.every((p) => p.length === 0 || sParts.some((sp) => sp.startsWith(p) || sp.endsWith(p)))\r\n  }\r\n\r\n  return tokens.filter((token) => {\r\n    const { symbol, name } = token\r\n\r\n    return (symbol && matchesSearch(symbol)) || (name && matchesSearch(name))\r\n  })\r\n}\r\n\r\nexport default filterTokens\r\n"],"mappings":"AACA,SAASA,SAAS,QAAQ,aAAa;AAEvC,OAAO,SAASC,YAAYA,CAACC,MAAe,EAAEC,MAAc,EAAW;EACrE,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE,OAAOF,MAAM;EAEtC,MAAMG,gBAAgB,GAAGL,SAAS,CAACG,MAAM,CAAC;EAE1C,IAAIE,gBAAgB,EAAE;IACpB,OAAOH,MAAM,CAACI,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,OAAO,KAAKH,gBAAgB,CAAC;EACrE;EAEA,MAAMI,gBAAgB,GAAGN,MAAM,CAC5BO,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,KAAK,CAAC,CACZL,MAAM,CAAEM,CAAC,IAAKA,CAAC,CAACR,MAAM,GAAG,CAAC,CAAC;EAE9B,IAAIK,gBAAgB,CAACL,MAAM,KAAK,CAAC,EAAE;IACjC,OAAOF,MAAM;EACf;EAEA,MAAMW,aAAa,GAAID,CAAS,IAAc;IAC5C,MAAME,MAAM,GAAGF,CAAC,CACbF,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,KAAK,CAAC,CACZL,MAAM,CAAES,GAAG,IAAKA,GAAG,CAACX,MAAM,GAAG,CAAC,CAAC;IAElC,OAAOK,gBAAgB,CAACO,KAAK,CAAEC,CAAC,IAAKA,CAAC,CAACb,MAAM,KAAK,CAAC,IAAIU,MAAM,CAACI,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,UAAU,CAACH,CAAC,CAAC,IAAIE,EAAE,CAACE,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC;EACjH,CAAC;EAED,OAAOf,MAAM,CAACI,MAAM,CAAEC,KAAK,IAAK;IAC9B,MAAM;MAAEe,MAAM;MAAEC;IAAK,CAAC,GAAGhB,KAAK;IAE9B,OAAQe,MAAM,IAAIT,aAAa,CAACS,MAAM,CAAC,IAAMC,IAAI,IAAIV,aAAa,CAACU,IAAI,CAAE;EAC3E,CAAC,CAAC;AACJ;AAEA,eAAetB,YAAY"},"metadata":{},"sourceType":"module"}