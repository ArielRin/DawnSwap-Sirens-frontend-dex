{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\panther-frontend-dex1\\\\src\\\\pages\\\\AddLiquidity\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { currencyEquals, ETHER, WETH } from '@pantherswap-libs/sdk';\nimport { Button, CardBody, AddIcon, Text as UIKitText } from '@pantherswap-libs/uikit';\nimport { LightCard } from 'components/Card';\nimport { AutoColumn, ColumnCenter } from 'components/Column';\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/TransactionConfirmationModal';\nimport CardNav from 'components/CardNav';\nimport CurrencyInputPanel from 'components/CurrencyInputPanel';\nimport DoubleCurrencyLogo from 'components/DoubleLogo';\nimport { AddRemoveTabs } from 'components/NavigationTabs';\nimport { MinimalPositionCard } from 'components/PositionCard';\nimport Row, { RowBetween, RowFlat } from 'components/Row';\nimport { PairState } from 'data/Reserves';\nimport { useActiveWeb3React } from 'hooks';\nimport { useCurrency } from 'hooks/Tokens';\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback';\nimport { Field } from 'state/mint/actions';\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from 'state/mint/hooks';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport { useIsExpertMode, useUserDeadline, useUserSlippageTolerance } from 'state/user/hooks';\nimport { TYPE } from 'components/Shared';\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from 'utils';\nimport { maxAmountSpend } from 'utils/maxAmountSpend';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { currencyId } from 'utils/currencyId';\nimport Pane from 'components/Pane';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport AppBody from '../AppBody';\nimport { Dots, Wrapper } from '../Pool/styleds';\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom';\nimport { PoolPriceBar } from './PoolPriceBar';\nimport { ROUTER_ADDRESS } from '../../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  italic: Italic\n} = TYPE;\nexport default function AddLiquidity(_ref) {\n  _s();\n  var _parsedAmounts$depend, _parsedAmounts$depend2, _parsedAmounts$Field$3, _currencies$Field$CUR7, _parsedAmounts$Field$4, _currencies$Field$CUR8, _currencies$Field$CUR9, _currencies$Field$CUR10, _currencies$Field$CUR11, _currencies$Field$CUR12;\n  let {\n    match: {\n      params: {\n        currencyIdA,\n        currencyIdB\n      }\n    },\n    history\n  } = _ref;\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const currencyA = useCurrency(currencyIdA);\n  const currencyB = useCurrency(currencyIdB);\n  const oneCurrencyIsWETH = Boolean(chainId && (currencyA && currencyEquals(currencyA, WETH[chainId]) || currencyB && currencyEquals(currencyB, WETH[chainId])));\n  const expertMode = useIsExpertMode();\n\n  // mint state\n  const {\n    independentField,\n    typedValue,\n    otherTypedValue\n  } = useMintState();\n  const {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  } = useDerivedMintInfo(currencyA !== null && currencyA !== void 0 ? currencyA : undefined, currencyB !== null && currencyB !== void 0 ? currencyB : undefined);\n  const {\n    onFieldAInput,\n    onFieldBInput\n  } = useMintActionHandlers(noLiquidity);\n  const isValid = !error;\n\n  // modal and loading\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [attemptingTxn, setAttemptingTxn] = useState(false); // clicked confirm\n\n  // txn values\n  const [deadline] = useUserDeadline(); // custom from users settings\n  const [allowedSlippage] = useUserSlippageTolerance(); // custom from users\n  const [txHash, setTxHash] = useState('');\n\n  // get formatted amounts\n  const formattedAmounts = {\n    [independentField]: typedValue,\n    [dependentField]: noLiquidity ? otherTypedValue : (_parsedAmounts$depend = (_parsedAmounts$depend2 = parsedAmounts[dependentField]) === null || _parsedAmounts$depend2 === void 0 ? void 0 : _parsedAmounts$depend2.toSignificant(6)) !== null && _parsedAmounts$depend !== void 0 ? _parsedAmounts$depend : ''\n  };\n\n  // get the max amounts user can add\n  const maxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    return {\n      ...accumulator,\n      [field]: maxAmountSpend(currencyBalances[field])\n    };\n  }, {});\n  const atMaxAmounts = [Field.CURRENCY_A, Field.CURRENCY_B].reduce((accumulator, field) => {\n    var _maxAmounts$field, _parsedAmounts$field;\n    return {\n      ...accumulator,\n      [field]: (_maxAmounts$field = maxAmounts[field]) === null || _maxAmounts$field === void 0 ? void 0 : _maxAmounts$field.equalTo((_parsedAmounts$field = parsedAmounts[field]) !== null && _parsedAmounts$field !== void 0 ? _parsedAmounts$field : '0')\n    };\n  }, {});\n\n  // check whether the user has approved the router on the tokens\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS);\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS);\n  const addTransaction = useTransactionAdder();\n  async function onAdd() {\n    if (!chainId || !library || !account) return;\n    const router = getRouterContract(chainId, library, account);\n    const {\n      [Field.CURRENCY_A]: parsedAmountA,\n      [Field.CURRENCY_B]: parsedAmountB\n    } = parsedAmounts;\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB) {\n      return;\n    }\n    const amountsMin = {\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0]\n    };\n    const deadlineFromNow = Math.ceil(Date.now() / 1000) + deadline;\n    let estimate;\n    let method;\n    let args;\n    let value;\n    if (currencyA === ETHER || currencyB === ETHER) {\n      var _wrappedCurrency$addr, _wrappedCurrency;\n      const tokenBIsETH = currencyB === ETHER;\n      estimate = router.estimateGas.addLiquidityETH;\n      method = router.addLiquidityETH;\n      args = [(_wrappedCurrency$addr = (_wrappedCurrency = wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)) === null || _wrappedCurrency === void 0 ? void 0 : _wrappedCurrency.address) !== null && _wrappedCurrency$addr !== void 0 ? _wrappedCurrency$addr : '',\n      // token\n      (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(),\n      // token desired\n      amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(),\n      // token min\n      amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(),\n      // eth min\n      account, deadlineFromNow];\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString());\n    } else {\n      var _wrappedCurrency$addr2, _wrappedCurrency2, _wrappedCurrency$addr3, _wrappedCurrency3;\n      estimate = router.estimateGas.addLiquidity;\n      method = router.addLiquidity;\n      args = [(_wrappedCurrency$addr2 = (_wrappedCurrency2 = wrappedCurrency(currencyA, chainId)) === null || _wrappedCurrency2 === void 0 ? void 0 : _wrappedCurrency2.address) !== null && _wrappedCurrency$addr2 !== void 0 ? _wrappedCurrency$addr2 : '', (_wrappedCurrency$addr3 = (_wrappedCurrency3 = wrappedCurrency(currencyB, chainId)) === null || _wrappedCurrency3 === void 0 ? void 0 : _wrappedCurrency3.address) !== null && _wrappedCurrency$addr3 !== void 0 ? _wrappedCurrency$addr3 : '', parsedAmountA.raw.toString(), parsedAmountB.raw.toString(), amountsMin[Field.CURRENCY_A].toString(), amountsMin[Field.CURRENCY_B].toString(), account, deadlineFromNow];\n      value = null;\n    }\n    setAttemptingTxn(true);\n    // const aa = await estimate(...args, value ? { value } : {})\n    await estimate(...args, value ? {\n      value\n    } : {}).then(estimatedGasLimit => method(...args, {\n      ...(value ? {\n        value\n      } : {}),\n      gasLimit: calculateGasMargin(estimatedGasLimit)\n    }).then(response => {\n      var _parsedAmounts$Field$, _currencies$Field$CUR, _parsedAmounts$Field$2, _currencies$Field$CUR2;\n      setAttemptingTxn(false);\n      addTransaction(response, {\n        summary: `Add ${(_parsedAmounts$Field$ = parsedAmounts[Field.CURRENCY_A]) === null || _parsedAmounts$Field$ === void 0 ? void 0 : _parsedAmounts$Field$.toSignificant(3)} ${(_currencies$Field$CUR = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR === void 0 ? void 0 : _currencies$Field$CUR.symbol} and ${(_parsedAmounts$Field$2 = parsedAmounts[Field.CURRENCY_B]) === null || _parsedAmounts$Field$2 === void 0 ? void 0 : _parsedAmounts$Field$2.toSignificant(3)} ${(_currencies$Field$CUR2 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR2 === void 0 ? void 0 : _currencies$Field$CUR2.symbol}`\n      });\n      setTxHash(response.hash);\n    })).catch(e => {\n      setAttemptingTxn(false);\n      // we only care if the error is something _other_ than the user rejected the tx\n      if ((e === null || e === void 0 ? void 0 : e.code) !== 4001) {\n        console.error(e);\n      }\n    });\n  }\n  const modalHeader = () => {\n    var _currencies$Field$CUR3, _currencies$Field$CUR4, _currencies$Field$CUR5, _currencies$Field$CUR6;\n    return noLiquidity ? /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"20px\",\n      children: /*#__PURE__*/_jsxDEV(LightCard, {\n        mt: \"20px\",\n        borderRadius: \"20px\",\n        children: /*#__PURE__*/_jsxDEV(RowFlat, {\n          children: [/*#__PURE__*/_jsxDEV(UIKitText, {\n            fontSize: \"48px\",\n            mr: \"8px\",\n            children: `${(_currencies$Field$CUR3 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR3 === void 0 ? void 0 : _currencies$Field$CUR3.symbol}/${(_currencies$Field$CUR4 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR4 === void 0 ? void 0 : _currencies$Field$CUR4.symbol}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DoubleCurrencyLogo, {\n            currency0: currencies[Field.CURRENCY_A],\n            currency1: currencies[Field.CURRENCY_B],\n            size: 30\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"20px\",\n      children: [/*#__PURE__*/_jsxDEV(RowFlat, {\n        style: {\n          marginTop: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(UIKitText, {\n          fontSize: \"48px\",\n          mr: \"8px\",\n          children: liquidityMinted === null || liquidityMinted === void 0 ? void 0 : liquidityMinted.toSignificant(6)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DoubleCurrencyLogo, {\n          currency0: currencies[Field.CURRENCY_A],\n          currency1: currencies[Field.CURRENCY_B],\n          size: 30\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(UIKitText, {\n          fontSize: \"24px\",\n          children: `${(_currencies$Field$CUR5 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR5 === void 0 ? void 0 : _currencies$Field$CUR5.symbol}/${(_currencies$Field$CUR6 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR6 === void 0 ? void 0 : _currencies$Field$CUR6.symbol} Pool Tokens`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Italic, {\n        fontSize: 12,\n        textAlign: \"left\",\n        padding: \"8px 0 0 0 \",\n        children: `Output is estimated. If the price changes by more than ${allowedSlippage / 100}% your transaction will revert.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this);\n  };\n  const modalBottom = () => {\n    return /*#__PURE__*/_jsxDEV(ConfirmAddModalBottom, {\n      price: price,\n      currencies: currencies,\n      parsedAmounts: parsedAmounts,\n      noLiquidity: noLiquidity,\n      onAdd: onAdd,\n      poolTokenPercentage: poolTokenPercentage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this);\n  };\n  const pendingText = `Supplying ${(_parsedAmounts$Field$3 = parsedAmounts[Field.CURRENCY_A]) === null || _parsedAmounts$Field$3 === void 0 ? void 0 : _parsedAmounts$Field$3.toSignificant(6)} ${(_currencies$Field$CUR7 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR7 === void 0 ? void 0 : _currencies$Field$CUR7.symbol} and ${(_parsedAmounts$Field$4 = parsedAmounts[Field.CURRENCY_B]) === null || _parsedAmounts$Field$4 === void 0 ? void 0 : _parsedAmounts$Field$4.toSignificant(6)} ${(_currencies$Field$CUR8 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR8 === void 0 ? void 0 : _currencies$Field$CUR8.symbol}`;\n  const handleCurrencyASelect = useCallback(currA => {\n    const newCurrencyIdA = currencyId(currA);\n    if (newCurrencyIdA === currencyIdB) {\n      history.push(`/add/${currencyIdB}/${currencyIdA}`);\n    } else {\n      history.push(`/add/${newCurrencyIdA}/${currencyIdB}`);\n    }\n  }, [currencyIdB, history, currencyIdA]);\n  const handleCurrencyBSelect = useCallback(currB => {\n    const newCurrencyIdB = currencyId(currB);\n    if (currencyIdA === newCurrencyIdB) {\n      if (currencyIdB) {\n        history.push(`/add/${currencyIdB}/${newCurrencyIdB}`);\n      } else {\n        history.push(`/add/${newCurrencyIdB}`);\n      }\n    } else {\n      history.push(`/add/${currencyIdA || 'ETH'}/${newCurrencyIdB}`);\n    }\n  }, [currencyIdA, history, currencyIdB]);\n  const handleDismissConfirmation = useCallback(() => {\n    setShowConfirm(false);\n    // if there was a tx hash, we want to clear the input\n    if (txHash) {\n      onFieldAInput('');\n    }\n    setTxHash('');\n  }, [onFieldAInput, txHash]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CardNav, {\n      activeIndex: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppBody, {\n      children: [/*#__PURE__*/_jsxDEV(AddRemoveTabs, {\n        adding: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        children: [/*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n          isOpen: showConfirm,\n          onDismiss: handleDismissConfirmation,\n          attemptingTxn: attemptingTxn,\n          hash: txHash,\n          content: () => /*#__PURE__*/_jsxDEV(ConfirmationModalContent, {\n            title: noLiquidity ? 'You are creating a pool' : 'You will receive',\n            onDismiss: handleDismissConfirmation,\n            topContent: modalHeader,\n            bottomContent: modalBottom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 15\n          }, this),\n          pendingText: pendingText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n            gap: \"20px\",\n            children: [noLiquidity && /*#__PURE__*/_jsxDEV(ColumnCenter, {\n              children: /*#__PURE__*/_jsxDEV(Pane, {\n                children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n                  gap: \"12px\",\n                  children: [/*#__PURE__*/_jsxDEV(UIKitText, {\n                    children: \"You are the first liquidity provider.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 318,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(UIKitText, {\n                    children: \"The ratio of tokens you add will set the price of this pool.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 319,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(UIKitText, {\n                    children: \"Once you are happy with the rate click supply to review.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 320,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n              value: formattedAmounts[Field.CURRENCY_A],\n              onUserInput: onFieldAInput,\n              onMax: () => {\n                var _maxAmounts$Field$CUR, _maxAmounts$Field$CUR2;\n                onFieldAInput((_maxAmounts$Field$CUR = (_maxAmounts$Field$CUR2 = maxAmounts[Field.CURRENCY_A]) === null || _maxAmounts$Field$CUR2 === void 0 ? void 0 : _maxAmounts$Field$CUR2.toExact()) !== null && _maxAmounts$Field$CUR !== void 0 ? _maxAmounts$Field$CUR : '');\n              },\n              onCurrencySelect: handleCurrencyASelect,\n              showMaxButton: !atMaxAmounts[Field.CURRENCY_A],\n              currency: currencies[Field.CURRENCY_A],\n              id: \"add-liquidity-input-tokena\",\n              showCommonBases: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ColumnCenter, {\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                color: \"textSubtle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 338,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n              value: formattedAmounts[Field.CURRENCY_B],\n              onUserInput: onFieldBInput,\n              onCurrencySelect: handleCurrencyBSelect,\n              onMax: () => {\n                var _maxAmounts$Field$CUR3, _maxAmounts$Field$CUR4;\n                onFieldBInput((_maxAmounts$Field$CUR3 = (_maxAmounts$Field$CUR4 = maxAmounts[Field.CURRENCY_B]) === null || _maxAmounts$Field$CUR4 === void 0 ? void 0 : _maxAmounts$Field$CUR4.toExact()) !== null && _maxAmounts$Field$CUR3 !== void 0 ? _maxAmounts$Field$CUR3 : '');\n              },\n              showMaxButton: !atMaxAmounts[Field.CURRENCY_B],\n              currency: currencies[Field.CURRENCY_B],\n              id: \"add-liquidity-input-tokenb\",\n              showCommonBases: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 15\n            }, this), currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(UIKitText, {\n                style: {\n                  textTransform: 'uppercase',\n                  fontWeight: 600\n                },\n                color: \"textSubtle\",\n                fontSize: \"12px\",\n                mb: \"2px\",\n                children: noLiquidity ? 'Initial prices and pool share' : 'Prices and pool share'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Pane, {\n                children: /*#__PURE__*/_jsxDEV(PoolPriceBar, {\n                  currencies: currencies,\n                  poolTokenPercentage: poolTokenPercentage,\n                  noLiquidity: noLiquidity,\n                  price: price\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 17\n            }, this), !account ? /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(AutoColumn, {\n              gap: \"md\",\n              children: [(approvalA === ApprovalState.NOT_APPROVED || approvalA === ApprovalState.PENDING || approvalB === ApprovalState.NOT_APPROVED || approvalB === ApprovalState.PENDING) && isValid && /*#__PURE__*/_jsxDEV(RowBetween, {\n                children: [approvalA !== ApprovalState.APPROVED && /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: approveACallback,\n                  disabled: approvalA === ApprovalState.PENDING,\n                  style: {\n                    width: approvalB !== ApprovalState.APPROVED ? '48%' : '100%'\n                  },\n                  children: approvalA === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(Dots, {\n                    children: [\"Approving \", (_currencies$Field$CUR9 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR9 === void 0 ? void 0 : _currencies$Field$CUR9.symbol]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 390,\n                    columnNumber: 31\n                  }, this) : `Approve ${(_currencies$Field$CUR10 = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR10 === void 0 ? void 0 : _currencies$Field$CUR10.symbol}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 27\n                }, this), approvalB !== ApprovalState.APPROVED && /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: approveBCallback,\n                  disabled: approvalB === ApprovalState.PENDING,\n                  style: {\n                    width: approvalA !== ApprovalState.APPROVED ? '48%' : '100%'\n                  },\n                  children: approvalB === ApprovalState.PENDING ? /*#__PURE__*/_jsxDEV(Dots, {\n                    children: [\"Approving \", (_currencies$Field$CUR11 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR11 === void 0 ? void 0 : _currencies$Field$CUR11.symbol]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 403,\n                    columnNumber: 31\n                  }, this) : `Approve ${(_currencies$Field$CUR12 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR12 === void 0 ? void 0 : _currencies$Field$CUR12.symbol}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 397,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 382,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  if (expertMode) {\n                    onAdd();\n                  } else {\n                    setShowConfirm(true);\n                  }\n                },\n                disabled: !isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED,\n                variant: !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B] ? 'danger' : 'primary',\n                fullWidth: true,\n                children: error !== null && error !== void 0 ? error : 'Supply'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), pair && !noLiquidity && pairState !== PairState.INVALID ? /*#__PURE__*/_jsxDEV(AutoColumn, {\n      style: {\n        maxWidth: '436px',\n        width: '100%',\n        marginTop: '1rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(MinimalPositionCard, {\n        showUnwrapped: oneCurrencyIsWETH,\n        pair: pair\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}\n_s(AddLiquidity, \"kSUmJRNGZCzpTQqhGp8nwva1wF8=\", false, function () {\n  return [useActiveWeb3React, useCurrency, useCurrency, useIsExpertMode, useMintState, useDerivedMintInfo, useMintActionHandlers, useUserDeadline, useUserSlippageTolerance, useApproveCallback, useApproveCallback, useTransactionAdder];\n});\n_c = AddLiquidity;\nvar _c;\n$RefreshReg$(_c, \"AddLiquidity\");","map":{"version":3,"names":["React","useCallback","useState","BigNumber","currencyEquals","ETHER","WETH","Button","CardBody","AddIcon","Text","UIKitText","LightCard","AutoColumn","ColumnCenter","TransactionConfirmationModal","ConfirmationModalContent","CardNav","CurrencyInputPanel","DoubleCurrencyLogo","AddRemoveTabs","MinimalPositionCard","Row","RowBetween","RowFlat","PairState","useActiveWeb3React","useCurrency","ApprovalState","useApproveCallback","Field","useDerivedMintInfo","useMintActionHandlers","useMintState","useTransactionAdder","useIsExpertMode","useUserDeadline","useUserSlippageTolerance","TYPE","calculateGasMargin","calculateSlippageAmount","getRouterContract","maxAmountSpend","wrappedCurrency","currencyId","Pane","ConnectWalletButton","AppBody","Dots","Wrapper","ConfirmAddModalBottom","PoolPriceBar","ROUTER_ADDRESS","jsxDEV","_jsxDEV","Fragment","_Fragment","italic","Italic","AddLiquidity","_ref","_s","_parsedAmounts$depend","_parsedAmounts$depend2","_parsedAmounts$Field$3","_currencies$Field$CUR7","_parsedAmounts$Field$4","_currencies$Field$CUR8","_currencies$Field$CUR9","_currencies$Field$CUR10","_currencies$Field$CUR11","_currencies$Field$CUR12","match","params","currencyIdA","currencyIdB","history","account","chainId","library","currencyA","currencyB","oneCurrencyIsWETH","Boolean","expertMode","independentField","typedValue","otherTypedValue","dependentField","currencies","pair","pairState","currencyBalances","parsedAmounts","price","noLiquidity","liquidityMinted","poolTokenPercentage","error","undefined","onFieldAInput","onFieldBInput","isValid","showConfirm","setShowConfirm","attemptingTxn","setAttemptingTxn","deadline","allowedSlippage","txHash","setTxHash","formattedAmounts","toSignificant","maxAmounts","CURRENCY_A","CURRENCY_B","reduce","accumulator","field","atMaxAmounts","_maxAmounts$field","_parsedAmounts$field","equalTo","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","onAdd","router","parsedAmountA","parsedAmountB","amountsMin","deadlineFromNow","Math","ceil","Date","now","estimate","method","args","value","_wrappedCurrency$addr","_wrappedCurrency","tokenBIsETH","estimateGas","addLiquidityETH","address","raw","toString","from","_wrappedCurrency$addr2","_wrappedCurrency2","_wrappedCurrency$addr3","_wrappedCurrency3","addLiquidity","then","estimatedGasLimit","gasLimit","response","_parsedAmounts$Field$","_currencies$Field$CUR","_parsedAmounts$Field$2","_currencies$Field$CUR2","summary","symbol","hash","catch","e","code","console","modalHeader","_currencies$Field$CUR3","_currencies$Field$CUR4","_currencies$Field$CUR5","_currencies$Field$CUR6","gap","children","mt","borderRadius","fontSize","mr","fileName","_jsxFileName","lineNumber","columnNumber","currency0","currency1","size","style","marginTop","textAlign","padding","modalBottom","pendingText","handleCurrencyASelect","currA","newCurrencyIdA","push","handleCurrencyBSelect","currB","newCurrencyIdB","handleDismissConfirmation","activeIndex","adding","isOpen","onDismiss","content","title","topContent","bottomContent","onUserInput","onMax","_maxAmounts$Field$CUR","_maxAmounts$Field$CUR2","toExact","onCurrencySelect","showMaxButton","currency","id","showCommonBases","color","_maxAmounts$Field$CUR3","_maxAmounts$Field$CUR4","INVALID","textTransform","fontWeight","mb","fullWidth","NOT_APPROVED","PENDING","APPROVED","onClick","disabled","width","variant","maxWidth","showUnwrapped","_c","$RefreshReg$"],"sources":["C:/projects/panther-frontend-dex1/src/pages/AddLiquidity/index.tsx"],"sourcesContent":["import React, { useCallback, useState } from 'react'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, currencyEquals, ETHER, TokenAmount, WETH } from '@pantherswap-libs/sdk'\r\nimport { Button, CardBody, AddIcon, Text as UIKitText } from '@pantherswap-libs/uikit'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { LightCard } from 'components/Card'\r\nimport { AutoColumn, ColumnCenter } from 'components/Column'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/TransactionConfirmationModal'\r\nimport CardNav from 'components/CardNav'\r\nimport CurrencyInputPanel from 'components/CurrencyInputPanel'\r\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\r\nimport { AddRemoveTabs } from 'components/NavigationTabs'\r\nimport { MinimalPositionCard } from 'components/PositionCard'\r\nimport Row, { RowBetween, RowFlat } from 'components/Row'\r\n\r\nimport { PairState } from 'data/Reserves'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { useCurrency } from 'hooks/Tokens'\r\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\r\nimport { Field } from 'state/mint/actions'\r\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from 'state/mint/hooks'\r\n\r\nimport { useTransactionAdder } from 'state/transactions/hooks'\r\nimport { useIsExpertMode, useUserDeadline, useUserSlippageTolerance } from 'state/user/hooks'\r\nimport { TYPE } from 'components/Shared'\r\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from 'utils'\r\nimport { maxAmountSpend } from 'utils/maxAmountSpend'\r\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\r\nimport { currencyId } from 'utils/currencyId'\r\nimport Pane from 'components/Pane'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport AppBody from '../AppBody'\r\nimport { Dots, Wrapper } from '../Pool/styleds'\r\nimport { ConfirmAddModalBottom } from './ConfirmAddModalBottom'\r\nimport { PoolPriceBar } from './PoolPriceBar'\r\nimport { ROUTER_ADDRESS } from '../../constants'\r\n\r\nconst { italic: Italic } = TYPE\r\n\r\nexport default function AddLiquidity({\r\n  match: {\r\n    params: { currencyIdA, currencyIdB },\r\n  },\r\n  history,\r\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n  const currencyA = useCurrency(currencyIdA)\r\n  const currencyB = useCurrency(currencyIdB)\r\n\r\n  const oneCurrencyIsWETH = Boolean(\r\n    chainId &&\r\n      ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\r\n        (currencyB && currencyEquals(currencyB, WETH[chainId])))\r\n  )\r\n  const expertMode = useIsExpertMode()\r\n\r\n  // mint state\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n  const {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\r\n\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [showConfirm, setShowConfirm] = useState<boolean>(false)\r\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\r\n\r\n  // txn values\r\n  const [deadline] = useUserDeadline() // custom from users settings\r\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\r\n  const [txHash, setTxHash] = useState<string>('')\r\n\r\n  // get formatted amounts\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  // get the max amounts user can add\r\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmountSpend(currencyBalances[field]),\r\n      }\r\n    },\r\n    {}\r\n  )\r\n\r\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\r\n      }\r\n    },\r\n    {}\r\n  )\r\n\r\n  // check whether the user has approved the router on the tokens\r\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS)\r\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS)\r\n\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  async function onAdd() {\r\n    if (!chainId || !library || !account) return\r\n    const router = getRouterContract(chainId, library, account)\r\n\r\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\r\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB) {\r\n      return\r\n    }\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\r\n    }\r\n\r\n    const deadlineFromNow = Math.ceil(Date.now() / 1000) + deadline\r\n\r\n    let estimate\r\n    let method: (...args: any) => Promise<TransactionResponse>\r\n    let args: Array<string | string[] | number>\r\n    let value: BigNumber | null\r\n    if (currencyA === ETHER || currencyB === ETHER) {\r\n      const tokenBIsETH = currencyB === ETHER\r\n      estimate = router.estimateGas.addLiquidityETH\r\n      method = router.addLiquidityETH\r\n      args = [\r\n        wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)?.address ?? '', // token\r\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\r\n        account,\r\n        deadlineFromNow,\r\n      ]\r\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString())\r\n    } else {\r\n      estimate = router.estimateGas.addLiquidity\r\n      method = router.addLiquidity\r\n      args = [\r\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\r\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\r\n        parsedAmountA.raw.toString(),\r\n        parsedAmountB.raw.toString(),\r\n        amountsMin[Field.CURRENCY_A].toString(),\r\n        amountsMin[Field.CURRENCY_B].toString(),\r\n        account,\r\n        deadlineFromNow,\r\n      ]\r\n      value = null\r\n    }\r\n\r\n    setAttemptingTxn(true)\r\n    // const aa = await estimate(...args, value ? { value } : {})\r\n    await estimate(...args, value ? { value } : {})\r\n      .then((estimatedGasLimit) =>\r\n        method(...args, {\r\n          ...(value ? { value } : {}),\r\n          gasLimit: calculateGasMargin(estimatedGasLimit),\r\n        }).then((response) => {\r\n          setAttemptingTxn(false)\r\n\r\n          addTransaction(response, {\r\n            summary: `Add ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\r\n              currencies[Field.CURRENCY_A]?.symbol\r\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencies[Field.CURRENCY_B]?.symbol}`,\r\n          })\r\n\r\n          setTxHash(response.hash)\r\n        })\r\n      )\r\n      .catch((e) => {\r\n        setAttemptingTxn(false)\r\n        // we only care if the error is something _other_ than the user rejected the tx\r\n        if (e?.code !== 4001) {\r\n          console.error(e)\r\n        }\r\n      })\r\n  }\r\n\r\n  const modalHeader = () => {\r\n    return noLiquidity ? (\r\n      <AutoColumn gap=\"20px\">\r\n        <LightCard mt=\"20px\" borderRadius=\"20px\">\r\n          <RowFlat>\r\n            <UIKitText fontSize=\"48px\" mr=\"8px\">\r\n              {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol}`}\r\n            </UIKitText>\r\n            <DoubleCurrencyLogo\r\n              currency0={currencies[Field.CURRENCY_A]}\r\n              currency1={currencies[Field.CURRENCY_B]}\r\n              size={30}\r\n            />\r\n          </RowFlat>\r\n        </LightCard>\r\n      </AutoColumn>\r\n    ) : (\r\n      <AutoColumn gap=\"20px\">\r\n        <RowFlat style={{ marginTop: '20px' }}>\r\n          <UIKitText fontSize=\"48px\" mr=\"8px\">\r\n            {liquidityMinted?.toSignificant(6)}\r\n          </UIKitText>\r\n          <DoubleCurrencyLogo\r\n            currency0={currencies[Field.CURRENCY_A]}\r\n            currency1={currencies[Field.CURRENCY_B]}\r\n            size={30}\r\n          />\r\n        </RowFlat>\r\n        <Row>\r\n          <UIKitText fontSize=\"24px\">\r\n            {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol} Pool Tokens`}\r\n          </UIKitText>\r\n        </Row>\r\n        <Italic fontSize={12} textAlign=\"left\" padding=\"8px 0 0 0 \">\r\n          {`Output is estimated. If the price changes by more than ${\r\n            allowedSlippage / 100\r\n          }% your transaction will revert.`}\r\n        </Italic>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  const modalBottom = () => {\r\n    return (\r\n      <ConfirmAddModalBottom\r\n        price={price}\r\n        currencies={currencies}\r\n        parsedAmounts={parsedAmounts}\r\n        noLiquidity={noLiquidity}\r\n        onAdd={onAdd}\r\n        poolTokenPercentage={poolTokenPercentage}\r\n      />\r\n    )\r\n  }\r\n\r\n  const pendingText = `Supplying ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)} ${\r\n    currencies[Field.CURRENCY_A]?.symbol\r\n  } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)} ${currencies[Field.CURRENCY_B]?.symbol}`\r\n\r\n  const handleCurrencyASelect = useCallback(\r\n    (currA: Currency) => {\r\n      const newCurrencyIdA = currencyId(currA)\r\n      if (newCurrencyIdA === currencyIdB) {\r\n        history.push(`/add/${currencyIdB}/${currencyIdA}`)\r\n      } else {\r\n        history.push(`/add/${newCurrencyIdA}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdB, history, currencyIdA]\r\n  )\r\n  const handleCurrencyBSelect = useCallback(\r\n    (currB: Currency) => {\r\n      const newCurrencyIdB = currencyId(currB)\r\n      if (currencyIdA === newCurrencyIdB) {\r\n        if (currencyIdB) {\r\n          history.push(`/add/${currencyIdB}/${newCurrencyIdB}`)\r\n        } else {\r\n          history.push(`/add/${newCurrencyIdB}`)\r\n        }\r\n      } else {\r\n        history.push(`/add/${currencyIdA || 'ETH'}/${newCurrencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, history, currencyIdB]\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    setShowConfirm(false)\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onFieldAInput('')\r\n    }\r\n    setTxHash('')\r\n  }, [onFieldAInput, txHash])\r\n\r\n  return (\r\n    <>\r\n      <CardNav activeIndex={1} />\r\n      <AppBody>\r\n        <AddRemoveTabs adding />\r\n        <Wrapper>\r\n          <TransactionConfirmationModal\r\n            isOpen={showConfirm}\r\n            onDismiss={handleDismissConfirmation}\r\n            attemptingTxn={attemptingTxn}\r\n            hash={txHash}\r\n            content={() => (\r\n              <ConfirmationModalContent\r\n                title={noLiquidity ? 'You are creating a pool' : 'You will receive'}\r\n                onDismiss={handleDismissConfirmation}\r\n                topContent={modalHeader}\r\n                bottomContent={modalBottom}\r\n              />\r\n            )}\r\n            pendingText={pendingText}\r\n          />\r\n          <CardBody>\r\n            <AutoColumn gap=\"20px\">\r\n              {noLiquidity && (\r\n                <ColumnCenter>\r\n                  <Pane>\r\n                    <AutoColumn gap=\"12px\">\r\n                      <UIKitText>You are the first liquidity provider.</UIKitText>\r\n                      <UIKitText>The ratio of tokens you add will set the price of this pool.</UIKitText>\r\n                      <UIKitText>Once you are happy with the rate click supply to review.</UIKitText>\r\n                    </AutoColumn>\r\n                  </Pane>\r\n                </ColumnCenter>\r\n              )}\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.CURRENCY_A]}\r\n                onUserInput={onFieldAInput}\r\n                onMax={() => {\r\n                  onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\r\n                }}\r\n                onCurrencySelect={handleCurrencyASelect}\r\n                showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\r\n                currency={currencies[Field.CURRENCY_A]}\r\n                id=\"add-liquidity-input-tokena\"\r\n                showCommonBases={false}\r\n              />\r\n              <ColumnCenter>\r\n                <AddIcon color=\"textSubtle\" />\r\n              </ColumnCenter>\r\n              <CurrencyInputPanel\r\n                value={formattedAmounts[Field.CURRENCY_B]}\r\n                onUserInput={onFieldBInput}\r\n                onCurrencySelect={handleCurrencyBSelect}\r\n                onMax={() => {\r\n                  onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\r\n                }}\r\n                showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\r\n                currency={currencies[Field.CURRENCY_B]}\r\n                id=\"add-liquidity-input-tokenb\"\r\n                showCommonBases={false}\r\n              />\r\n              {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\r\n                <div>\r\n                  <UIKitText\r\n                    style={{ textTransform: 'uppercase', fontWeight: 600 }}\r\n                    color=\"textSubtle\"\r\n                    fontSize=\"12px\"\r\n                    mb=\"2px\"\r\n                  >\r\n                    {noLiquidity ? 'Initial prices and pool share' : 'Prices and pool share'}\r\n                  </UIKitText>\r\n                  <Pane>\r\n                    <PoolPriceBar\r\n                      currencies={currencies}\r\n                      poolTokenPercentage={poolTokenPercentage}\r\n                      noLiquidity={noLiquidity}\r\n                      price={price}\r\n                    />\r\n                  </Pane>\r\n                </div>\r\n              )}\r\n\r\n              {!account ? (\r\n                <ConnectWalletButton fullWidth />\r\n              ) : (\r\n                <AutoColumn gap=\"md\">\r\n                  {(approvalA === ApprovalState.NOT_APPROVED ||\r\n                    approvalA === ApprovalState.PENDING ||\r\n                    approvalB === ApprovalState.NOT_APPROVED ||\r\n                    approvalB === ApprovalState.PENDING) &&\r\n                    isValid && (\r\n                      <RowBetween>\r\n                        {approvalA !== ApprovalState.APPROVED && (\r\n                          <Button\r\n                            onClick={approveACallback}\r\n                            disabled={approvalA === ApprovalState.PENDING}\r\n                            style={{ width: approvalB !== ApprovalState.APPROVED ? '48%' : '100%' }}\r\n                          >\r\n                            {approvalA === ApprovalState.PENDING ? (\r\n                              <Dots>Approving {currencies[Field.CURRENCY_A]?.symbol}</Dots>\r\n                            ) : (\r\n                              `Approve ${currencies[Field.CURRENCY_A]?.symbol}`\r\n                            )}\r\n                          </Button>\r\n                        )}\r\n                        {approvalB !== ApprovalState.APPROVED && (\r\n                          <Button\r\n                            onClick={approveBCallback}\r\n                            disabled={approvalB === ApprovalState.PENDING}\r\n                            style={{ width: approvalA !== ApprovalState.APPROVED ? '48%' : '100%' }}\r\n                          >\r\n                            {approvalB === ApprovalState.PENDING ? (\r\n                              <Dots>Approving {currencies[Field.CURRENCY_B]?.symbol}</Dots>\r\n                            ) : (\r\n                              `Approve ${currencies[Field.CURRENCY_B]?.symbol}`\r\n                            )}\r\n                          </Button>\r\n                        )}\r\n                      </RowBetween>\r\n                    )}\r\n                  <Button\r\n                    onClick={() => {\r\n                      if (expertMode) {\r\n                        onAdd()\r\n                      } else {\r\n                        setShowConfirm(true)\r\n                      }\r\n                    }}\r\n                    disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\r\n                    variant={\r\n                      !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\r\n                        ? 'danger'\r\n                        : 'primary'\r\n                    }\r\n                    fullWidth\r\n                  >\r\n                    {error ?? 'Supply'}\r\n                  </Button>\r\n                </AutoColumn>\r\n              )}\r\n            </AutoColumn>\r\n          </CardBody>\r\n        </Wrapper>\r\n      </AppBody>\r\n      {pair && !noLiquidity && pairState !== PairState.INVALID ? (\r\n        <AutoColumn style={{ maxWidth: '436px', width: '100%', marginTop: '1rem' }}>\r\n          <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\r\n        </AutoColumn>\r\n      ) : null}\r\n    </>\r\n  )\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}