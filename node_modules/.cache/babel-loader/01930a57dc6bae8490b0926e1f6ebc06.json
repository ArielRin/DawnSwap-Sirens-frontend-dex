{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Users = void 0;\nconst core_1 = require(\"../core\");\n/**\n * Users API gives you the possibility to get profile information about the currently authenticated user.\n *\n * In Crowdin Enterprise users are the members of your organization with the defined access levels.\n * Use API to get the list of organization users and to check the information on a specific user.\n */\nclass Users extends core_1.CrowdinApi {\n  listProjectMembers(projectId, options, deprecatedRole, deprecatedLanguageId, deprecatedLimit, deprecatedOffset) {\n    let url = `${this.url}/projects/${projectId}/members`;\n    if ((0, core_1.isOptionalString)(options, '1' in arguments)) {\n      options = {\n        search: options,\n        role: deprecatedRole,\n        languageId: deprecatedLanguageId,\n        limit: deprecatedLimit,\n        offset: deprecatedOffset\n      };\n    }\n    url = this.addQueryParam(url, 'search', options.search);\n    url = this.addQueryParam(url, 'role', options.role);\n    url = this.addQueryParam(url, 'languageId', options.languageId);\n    return this.getList(url, options.limit, options.offset);\n  }\n  /**\n   * @param projectId project identifier\n   * @param request request body\n   * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.post\n   */\n  addProjectMember(projectId, request) {\n    const url = `${this.url}/projects/${projectId}/members`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param memberId member identifier\n   * @see https://developer.crowdin.com/api/v2/#operation/api.projects.members.get\n   */\n  getProjectMemberPermissions(projectId, memberId) {\n    const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param memberId member identifier\n   * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.put\n   */\n  replaceProjectMemberPermissions(projectId, memberId) {\n    let request = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n    return this.put(url, request, this.defaultConfig());\n  }\n  /**\n   * @param projectId project identifier\n   * @param memberId member identifier\n   * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.delete\n   */\n  deleteMemberFromProject(projectId, memberId) {\n    const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  listUsers(options, deprecatedSearch, deprecatedTwoFactor, deprecatedLimit, deprecatedOffset) {\n    let url = `${this.url}/users`;\n    if ((0, core_1.isOptionalString)(options, '0' in arguments)) {\n      options = {\n        status: options,\n        search: deprecatedSearch,\n        twoFactor: deprecatedTwoFactor,\n        limit: deprecatedLimit,\n        offset: deprecatedOffset\n      };\n    }\n    url = this.addQueryParam(url, 'status', options.status);\n    url = this.addQueryParam(url, 'search', options.search);\n    url = this.addQueryParam(url, 'twoFactor', options.twoFactor);\n    return this.getList(url, options.limit, options.offset);\n  }\n  /**\n   * @param request request body\n   * @see https://support.crowdin.com/enterprise/api/#operation/api.users.post\n   */\n  inviteUser(request) {\n    const url = `${this.url}/users`;\n    return this.post(url, request, this.defaultConfig());\n  }\n  /**\n   * @param userId user identifier\n   * @see https://support.crowdin.com/enterprise/api/#operation/api.users.getById\n   */\n  getUserInfo(userId) {\n    const url = `${this.url}/users/${userId}`;\n    return this.get(url, this.defaultConfig());\n  }\n  /**\n   * @param userId user identifier\n   * @see https://support.crowdin.com/enterprise/api/#operation/api.users.delete\n   */\n  deleteUser(userId) {\n    const url = `${this.url}/users/${userId}`;\n    return this.delete(url, this.defaultConfig());\n  }\n  /**\n   * @param userId user identifier\n   * @param request request body\n   * @see https://support.crowdin.com/enterprise/api/#operation/api.users.patch\n   */\n  editUser(userId, request) {\n    const url = `${this.url}/users/${userId}`;\n    return this.patch(url, request, this.defaultConfig());\n  }\n  /**\n   * @see https://developer.crowdin.com/api/v2/#operation/api.user.get\n   */\n  getAuthenticatedUser() {\n    const url = `${this.url}/user`;\n    return this.get(url, this.defaultConfig());\n  }\n}\nexports.Users = Users;","map":{"version":3,"names":["Object","defineProperty","exports","value","Users","core_1","require","CrowdinApi","listProjectMembers","projectId","options","deprecatedRole","deprecatedLanguageId","deprecatedLimit","deprecatedOffset","url","isOptionalString","arguments","search","role","languageId","limit","offset","addQueryParam","getList","addProjectMember","request","post","defaultConfig","getProjectMemberPermissions","memberId","get","replaceProjectMemberPermissions","length","undefined","put","deleteMemberFromProject","delete","listUsers","deprecatedSearch","deprecatedTwoFactor","status","twoFactor","inviteUser","getUserInfo","userId","deleteUser","editUser","patch","getAuthenticatedUser"],"sources":["C:/projects/panther-frontend-dex1/node_modules/@crowdin/crowdin-api-client/out/users/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Users = void 0;\nconst core_1 = require(\"../core\");\n/**\n * Users API gives you the possibility to get profile information about the currently authenticated user.\n *\n * In Crowdin Enterprise users are the members of your organization with the defined access levels.\n * Use API to get the list of organization users and to check the information on a specific user.\n */\nclass Users extends core_1.CrowdinApi {\n    listProjectMembers(projectId, options, deprecatedRole, deprecatedLanguageId, deprecatedLimit, deprecatedOffset) {\n        let url = `${this.url}/projects/${projectId}/members`;\n        if ((0, core_1.isOptionalString)(options, '1' in arguments)) {\n            options = {\n                search: options,\n                role: deprecatedRole,\n                languageId: deprecatedLanguageId,\n                limit: deprecatedLimit,\n                offset: deprecatedOffset,\n            };\n        }\n        url = this.addQueryParam(url, 'search', options.search);\n        url = this.addQueryParam(url, 'role', options.role);\n        url = this.addQueryParam(url, 'languageId', options.languageId);\n        return this.getList(url, options.limit, options.offset);\n    }\n    /**\n     * @param projectId project identifier\n     * @param request request body\n     * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.post\n     */\n    addProjectMember(projectId, request) {\n        const url = `${this.url}/projects/${projectId}/members`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param memberId member identifier\n     * @see https://developer.crowdin.com/api/v2/#operation/api.projects.members.get\n     */\n    getProjectMemberPermissions(projectId, memberId) {\n        const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param memberId member identifier\n     * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.put\n     */\n    replaceProjectMemberPermissions(projectId, memberId, request = {}) {\n        const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n        return this.put(url, request, this.defaultConfig());\n    }\n    /**\n     * @param projectId project identifier\n     * @param memberId member identifier\n     * @see https://support.crowdin.com/enterprise/api/#operation/api.projects.members.delete\n     */\n    deleteMemberFromProject(projectId, memberId) {\n        const url = `${this.url}/projects/${projectId}/members/${memberId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    listUsers(options, deprecatedSearch, deprecatedTwoFactor, deprecatedLimit, deprecatedOffset) {\n        let url = `${this.url}/users`;\n        if ((0, core_1.isOptionalString)(options, '0' in arguments)) {\n            options = {\n                status: options,\n                search: deprecatedSearch,\n                twoFactor: deprecatedTwoFactor,\n                limit: deprecatedLimit,\n                offset: deprecatedOffset,\n            };\n        }\n        url = this.addQueryParam(url, 'status', options.status);\n        url = this.addQueryParam(url, 'search', options.search);\n        url = this.addQueryParam(url, 'twoFactor', options.twoFactor);\n        return this.getList(url, options.limit, options.offset);\n    }\n    /**\n     * @param request request body\n     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.post\n     */\n    inviteUser(request) {\n        const url = `${this.url}/users`;\n        return this.post(url, request, this.defaultConfig());\n    }\n    /**\n     * @param userId user identifier\n     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.getById\n     */\n    getUserInfo(userId) {\n        const url = `${this.url}/users/${userId}`;\n        return this.get(url, this.defaultConfig());\n    }\n    /**\n     * @param userId user identifier\n     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.delete\n     */\n    deleteUser(userId) {\n        const url = `${this.url}/users/${userId}`;\n        return this.delete(url, this.defaultConfig());\n    }\n    /**\n     * @param userId user identifier\n     * @param request request body\n     * @see https://support.crowdin.com/enterprise/api/#operation/api.users.patch\n     */\n    editUser(userId, request) {\n        const url = `${this.url}/users/${userId}`;\n        return this.patch(url, request, this.defaultConfig());\n    }\n    /**\n     * @see https://developer.crowdin.com/api/v2/#operation/api.user.get\n     */\n    getAuthenticatedUser() {\n        const url = `${this.url}/user`;\n        return this.get(url, this.defaultConfig());\n    }\n}\nexports.Users = Users;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}