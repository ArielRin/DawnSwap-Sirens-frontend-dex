{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\panther-frontend-dex1\\\\src\\\\components\\\\Web3ReactManager\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { useTranslation } from 'react-i18next';\nimport { network } from '../../connectors';\nimport { useEagerConnect, useInactiveListener } from '../../hooks';\nimport { NetworkContextName } from '../../constants';\nimport Loader from '../Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`;\n_c = MessageWrapper;\nconst Message = styled.h2`\n  color: ${_ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.colors.primaryDark;\n}};\n`;\n_c2 = Message;\nexport default function Web3ReactManager(_ref2) {\n  _s();\n  let {\n    children\n  } = _ref2;\n  const {\n    t\n  } = useTranslation();\n  const {\n    active\n  } = useWeb3React();\n  const {\n    active: networkActive,\n    error: networkError,\n    activate: activateNetwork\n  } = useWeb3React(NetworkContextName);\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network);\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active]);\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager);\n\n  // handle delayed loader state\n  const [showLoader, setShowLoader] = useState(false);\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setShowLoader(true);\n    }, 600);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  // on page load, do nothing until we've tried to connect to the injected connector\n  if (!triedEager) {\n    return null;\n  }\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (!active && networkError) {\n    return /*#__PURE__*/_jsxDEV(MessageWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Message, {\n        children: t('unknownError')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n  // if neither context is active, spin\n  if (!active && !networkActive) {\n    return showLoader ? /*#__PURE__*/_jsxDEV(MessageWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this) : null;\n  }\n  return children;\n}\n_s(Web3ReactManager, \"/OB5GxP5m4bdOx6OKHtbWLXcry0=\", false, function () {\n  return [useTranslation, useWeb3React, useWeb3React, useEagerConnect, useInactiveListener];\n});\n_c3 = Web3ReactManager;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MessageWrapper\");\n$RefreshReg$(_c2, \"Message\");\n$RefreshReg$(_c3, \"Web3ReactManager\");","map":{"version":3,"names":["React","useState","useEffect","useWeb3React","styled","useTranslation","network","useEagerConnect","useInactiveListener","NetworkContextName","Loader","jsxDEV","_jsxDEV","MessageWrapper","div","_c","Message","h2","_ref","theme","colors","primaryDark","_c2","Web3ReactManager","_ref2","_s","children","t","active","networkActive","error","networkError","activate","activateNetwork","triedEager","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["C:/projects/panther-frontend-dex1/src/components/Web3ReactManager/index.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'react-i18next'\r\n\r\nimport { network } from '../../connectors'\r\nimport { useEagerConnect, useInactiveListener } from '../../hooks'\r\nimport { NetworkContextName } from '../../constants'\r\nimport Loader from '../Loader'\r\n\r\nconst MessageWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 20rem;\r\n`\r\n\r\nconst Message = styled.h2`\r\n  color: ${({ theme }) => theme.colors.primaryDark};\r\n`\r\n\r\nexport default function Web3ReactManager({ children }: { children: JSX.Element }) {\r\n  const { t } = useTranslation()\r\n  const { active } = useWeb3React()\r\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\r\n\r\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\r\n  const triedEager = useEagerConnect()\r\n\r\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\r\n  useEffect(() => {\r\n    if (triedEager && !networkActive && !networkError && !active) {\r\n      activateNetwork(network)\r\n    }\r\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\r\n\r\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\r\n  useInactiveListener(!triedEager)\r\n\r\n  // handle delayed loader state\r\n  const [showLoader, setShowLoader] = useState(false)\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setShowLoader(true)\r\n    }, 600)\r\n\r\n    return () => {\r\n      clearTimeout(timeout)\r\n    }\r\n  }, [])\r\n\r\n  // on page load, do nothing until we've tried to connect to the injected connector\r\n  if (!triedEager) {\r\n    return null\r\n  }\r\n\r\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\r\n  if (!active && networkError) {\r\n    return (\r\n      <MessageWrapper>\r\n        <Message>{t('unknownError')}</Message>\r\n      </MessageWrapper>\r\n    )\r\n  }\r\n\r\n  // if neither context is active, spin\r\n  if (!active && !networkActive) {\r\n    return showLoader ? (\r\n      <MessageWrapper>\r\n        <Loader />\r\n      </MessageWrapper>\r\n    ) : null\r\n  }\r\n\r\n  return children\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}